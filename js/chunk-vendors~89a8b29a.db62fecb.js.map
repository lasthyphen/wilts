{"version":3,"sources":["webpack:///./node_modules/avalanche/dist/apis/socket/socket.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/validationtx.js","webpack:///./node_modules/avalanche/dist/common/jrpcapi.js","webpack:///./node_modules/avalanche/dist/apis/info/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/outputs.js","webpack:///./node_modules/avalanche/dist/common/output.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/utxos.js","webpack:///./node_modules/avalanche/dist/common/nbytes.js","webpack:///./node_modules/avalanche/dist/apis/index/index.js","webpack:///./node_modules/avalanche/dist/common/secp256k1.js","webpack:///./node_modules/avalanche/dist/avalanche.js","webpack:///./node_modules/avalanche/dist/apis/health/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/createsubnettx.js","webpack:///./node_modules/avalanche/dist/common/apibase.js","webpack:///./node_modules/avalanche/dist/common/keychain.js","webpack:///./node_modules/avalanche/dist/apis/info/index.js","webpack:///./node_modules/avalanche/dist/common/input.js","webpack:///./node_modules/avalanche/dist/common/assetamount.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/keychain.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/importtx.js","webpack:///./node_modules/avalanche/dist/common/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/interfaces.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/addsubnetvalidatortx.js","webpack:///./node_modules/avalanche/dist/apis/health/index.js","webpack:///./node_modules/avalanche/dist/common/utxos.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/subnetauth.js","webpack:///./node_modules/avalanche/dist/apis/keystore/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/index.js","webpack:///./node_modules/avalanche/dist/common/interfaces.js","webpack:///./node_modules/avalanche/dist/apis/metrics/api.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/api.js","webpack:///./node_modules/avalanche/dist/common/evmtx.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/metrics/index.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/tx.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/constants.js","webpack:///./node_modules/avalanche/dist/common/tx.js","webpack:///./node_modules/avalanche/dist/common/credentials.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/createchaintx.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/credentials.js","webpack:///./node_modules/avalanche/dist/apis/platformvm/basetx.js","webpack:///./node_modules/avalanche/dist/common/restapi.js","webpack:///./node_modules/avalanche/dist/apis/index/api.js","webpack:///./node_modules/avalanche/dist/apis/keystore/api.js"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","Socket","isomorphic_ws_1","utils_1","default","url","MainnetAPI","options","super","data","cb","send","mcode","close","AddValidatorTx","AddDelegatorTx","WeightedValidatorTx","ValidatorTx","bn_js_1","bintools_1","basetx_1","outputs_1","buffer_1","constants_1","constants_2","helperfunctions_1","outputs_2","serialization_1","errors_1","bintools","getInstance","serialization","Serialization","BaseTx","networkID","blockchainID","outs","ins","memo","nodeID","startTime","endTime","_typeName","_typeID","undefined","Buffer","alloc","fromBNToBuffer","encoding","fields","serialize","assign","encoder","deserialize","decoder","bufferToNodeIDString","fromBufferToBN","bytes","offset","fromBuffer","copyFrom","superbuff","toBuffer","bsize","length","concat","DefaultNetworkID","weight","stakeAmount","stakeOuts","rewardOwners","PlatformVMConstants","ADDDELEGATORTX","map","s","xferout","TransferableOutput","ParseableOutput","getWeight","val","i","add","getOutput","getAmount","getOuts","getStakeOuts","numstakeouts","outcount","readUInt32BE","push","numouts","writeUInt32BE","barr","sort","comparator","out","ro","newbase","args","delegationFee","ADDVALIDATORTX","DelegationFeeError","parseFloat","toFixed","getDelegationFeeBuffer","dbuff","delegatorMultiplier","dBuff","buffnum","superBuff","feeBuff","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","JRPCAPI","apibase_1","APIBase","core","baseURL","jrpcVersion","rpcID","callMethod","method","params","headers","ep","rpc","id","jsonrpc","headrs","getURL","axConf","responseType","adapter","fetch","fetchAdapter","resp","post","JSON","stringify","status","parse","Error","error","message","getRPCID","InfoAPI","jrpcapi_1","getBlockchainID","alias","response","getNodeIP","ip","getNetworkID","getNetworkName","networkName","getNodeID","getNodeVersion","version","getTxFee","txFee","creationTxFee","isBootstrapped","chain","peers","nodeIDs","uptime","SECPOwnerOutput","StakeableLockOut","SECPTransferOutput","AmountOutput","SelectOutputClass","output_1","outputid","SECPXFEROUTPUTID","SECPOWNEROUTPUTID","STAKEABLELOCKOUTID","OutputIdError","StandardTransferableOutput","arguments","output","assetID","ASSETIDLEN","StandardParseableOutput","StandardAmountOutput","newout","create","amount","addresses","locktime","threshold","stakeableLocktime","transferableOutput","synchronize","outobj","getAddresses","a","addr","Address","numaddrs","getLocktime","getThreshold","amountValue","outbuff","xferoutBuff","Output","BaseNFTOutput","OutputOwners","nbytes_1","NBytes","cb58Encode","addrbuff","b58ToBuffer","validateChecksum","newbuff","ChecksumError","AddressError","getSize","b","compare","Serializable","getAddressIdx","address","toString","getAddress","idx","AddressIndexError","meetsThreshold","asOf","now","UnixNow","qualified","getSpenders","lte","j","addrs","bufferToB58","aoutid","getOutputID","abuff","boutid","bbuff","asort","bsort","outid","sorta","sortb","getAssetID","parseableBuff","clone","groupID","getGroupID","UTXOSet","AssetAmountDestination","UTXO","inputs_1","utxos_1","tx_1","exporttx_1","importtx_1","assetamount_1","validationtx_1","createsubnettx_1","_1","addsubnetvalidatortx_1","StandardUTXO","codecID","txid","outputidx","serialized","cb58Decode","utxo","LATESTCODEC","StandardAssetAmountDestination","StandardUTXOSet","getConsumableUXTO","stakeable","getAllUTXOs","filter","stakeableOutput","getStakeableLocktime","lt","getMinimumSpendable","aad","utxoArray","tmpUTXOArray","forEach","getTypeID","stakeableLockOut1","stakeableLockOut2","toNumber","index","assetKey","fromAddresses","getSenders","assetExists","assetAmount","getAssetAmount","isFinished","lockedStakeable","unlocked","amountOutput","input","SECPTransferInput","locked","gt","StakeableLockIn","ParseableInput","spendAmount","spenders","spender","addSignatureIdx","txID","getTxID","outputIdx","getOutputIdx","transferInput","TransferableInput","addInput","canComplete","InsufficientFundsError","zero","assetAmounts","getAmounts","change","getChange","isStakeableLockChange","getStakeableLockChange","lockedChange","getAssetIDString","lockedOutputs","lockedOutput","parseableOutput","getTransferableOutput","outputAmountRemaining","sub","newChangeOutput","newLockedChangeOutput","transferOutput","addChange","newOutput","newLockedOutput","addOutput","unlockedChange","getChangeAddresses","totalAmountSpent","getSpent","stakeableLockedAmount","getStakeableLockSpent","totalUnlockedSpent","amountBurnt","getBurn","totalUnlockedAvailable","unlockedAmount","getDestinations","buildBaseTx","toAddresses","changeAddresses","fee","feeAssetID","ThresholdError","eq","addAssetAmount","_feeCheck","minSpendableErr","getInputs","getAllOutputs","baseTx","UnsignedTx","buildImportTx","atomics","sourceChain","importIns","feepaid","feeAssetStr","amt","infeeamount","assetStr","gte","xferin","from","getInput","spendout","feeRemaining","importTx","ImportTx","buildExportTx","djtxAssetID","destinationChain","exportouts","FeeAssetError","Defaults","network","X","getChangeOutputs","getOutputs","exportTx","ExportTx","buildAddSubnetValidatorTx","subnetID","subnetAuthCredentials","success","addSubnetValidatorTx","AddSubnetValidatorTx","subnetAuthCredential","buildAddDelegatorTx","rewardLocktime","rewardThreshold","rewardAddresses","TimeError","rewardOutputOwners","UTx","buildAddValidatorTx","buildCreateSubnetTx","subnetOwnerAddresses","subnetOwnerThreshold","subnetOwners","createSubnetTx","CreateSubnetTx","buildCreateChainTx","chainName","vmID","fxIDs","genesisData","createChainTx","CreateChainTx","utxos","utxoid","utxoidCleaned","addressUTXOs","addressCleaned","utxobalance","utxovar","UTXOError","newset","allUTXOs","addArray","b58str","emsg","buff","BufferSizeError","__createBinding","o","m","k","k2","desc","getOwnPropertyDescriptor","writable","configurable","enumerable","get","__exportStar","p","prototype","hasOwnProperty","call","__setModuleDefault","v","__importStar","SECP256k1KeyChain","SECP256k1KeyPair","elliptic","create_hash_1","keychain_1","EC","ec","ecparams","curve","BN","n","constructor","StandardKeyPair","hrp","chainID","generateKey","sig","r","recoveryParam","readUIntBE","sigOpt","keypair","genKeyPair","privk","getPrivate","padStart","pubk","getPublic","keyFromPrivate","addressFromPublicKey","type","bufferToType","keyFromPublic","sha256","update","digest","ripesha","PublicKeyError","msg","sigObj","sign","canonical","recovery","writeUInt8","toArray","_sigFromSigBuffer","verify","recoverPubKey","encodeCompressed","StandardKeyChain","newKey","addKey","axios_1","fetchadapter_1","AvalancheCore","host","port","protocol","auth","requestConfig","apis","setAddress","baseEndpoint","replace","protocols","includes","ProtocolError","getProtocol","getHost","getIP","getPort","getBaseEndpoint","getHeaders","getRequestConfig","setNetworkID","netID","getPreferredHRP","getHRP","setHRP","setHeader","key","removeHeader","removeAllHeaders","prop","setRequestConfig","removeRequestConfig","removeAllRequestConfigs","setAuthToken","_setHeaders","entries","Authorization","addAPI","apiName","ConstructorFN","baseurl","api","_request","xhrmethod","getdata","postdata","axiosConfig","config","request","xhrdata","RequestResponseData","statusText","delete","put","patch","HealthAPI","health","CREATESUBNETTX","SubnetOwnerError","typeID","db_1","setBaseURL","db","backup","getAll","clearAll","getNamespace","setAll","getBaseURL","getDB","keys","values","kp","getAddressStrings","getAddressString","removeKey","kaddr","hasKey","getKey","StandardAmountInput","StandardTransferableInput","StandardParseableInput","Input","credentials_1","sigCount","sigIdxs","getSigIdxs","addressIdx","sigidx","SigIdx","setSource","sidx","sigbuff","getInputID","inbuff","inid","getUTXOID","AssetAmount","burn","spent","stakeableLockSpent","stakeableLockChange","finished","stakeableLocked","total","destinations","senders","amounts","amountkey","inputs","outputs","aa","assetHexStr","KeyChain","KeyPair","secp256k1_1","newkp","importKey","getPrivateKey","makeKey","setChainID","pk","split","newkc","kc","AmountInput","SelectInputClass","input_1","inputid","SECPINPUTID","STAKEABLELOCKINID","InputIdError","getCredentialID","SECPCREDENTIAL","transferableInput","xferinBuff","credentials_2","IMPORTTX","numIns","Array","isArray","TransferableInputError","ii","anIn","ChainIdError","creds","cred","SelectCredentialClass","sigidxs","getSource","signval","Signature","addSignature","ADDSUBNETVALIDATORTX","subnetAuth","SubnetAuth","sa","newAddSubnetValidatorTx","addressIndex","writeUIntBE","addAddressIndex","getCodecID","readUInt8","getCodecIDBuffer","outputidbuffer","utxoX","parseUTXO","console","log","remove","removeArray","removed","getUTXO","utxoids","results","getAllUTXOStrings","u","getUTXOIDs","spendable","indexOf","getBalance","asset","spend","getAssetIDs","Set","merge","utxoset","hasUTXOIDs","utxos1","utxos2","process","intersection","us1","us2","difference","symDifference","union","mergeByRule","mergeRule","uSet","MergeRuleError","overwrite","added","lambda","SUBNETAUTH","addressIndices","numAddressIndices","numAddrIndices","getNumAddressIndices","typeIDBuf","writeIntBE","MetricsAPI","restapi_1","RESTAPI","getMetrics","PlatformVMAPI","payload_1","keychain","PlatformChainID","blockchainAlias","DJTXAssetID","minValidatorStake","minDelegatorStake","getBlockchainAlias","netid","setBlockchainAlias","refreshBlockchainID","parseAddress","ADDRESSLENGTH","addressFromBuffer","chainid","getDJTXAssetID","refresh","getStakingAssetID","setDJTXAssetID","getDefaultTxFee","getCreateSubnetTxFee","getCreateChainTxFee","setTxFee","getDefaultCreationTxFee","getCreationTxFee","setCreationTxFee","keyChain","newKeyChain","checkGooseEgg","utx","outTotal","outputTotal","getOutputTotal","ONEDJTX","mul","createBlockchain","username","password","name","genesis","getBlockchainStatus","getValidatorsAt","height","createAddress","listAddresses","getCurrentValidators","getPendingValidators","sampleValidators","sampleSize","size","validators","addValidator","rewardAddress","delegationFeeRate","getTime","addSubnetValidator","addDelegator","createSubnet","controlKeys","validatedBy","validates","blockchainIDs","getBlockchains","blockchains","exportDJTX","to","importDJTX","issueTx","tx","Transaction","txobj","Tx","toStringHex","TransactionError","getCurrentSupply","supply","getHeight","getMinStake","getTotalStake","stake","getMaxStakeAmount","setMinStake","getStake","staked","stakedOutputs","stakedOutput","buf","getSubnets","ids","subnets","exportKey","privateKey","getTx","getTxStatus","includeReason","getUTXOs","limit","startIndex","persistOpts","has","getName","selfArray","self","getMergeRule","set","getOverwrite","substring","cb58Strs","str","slice","numFetched","parseInt","ownerAddresses","_cleanAddressArray","stringToAddress","srcChain","atomicUTXOs","PayloadBase","getPayload","builtUnsignedTx","GooseEggCheckError","prefixes","NodeIDStringToBuffer","rewards","minStake","StakeError","owners","getTimestamp","timestamp","getRewardUTXOs","caller","bech32","EVMStandardTx","EVMStandardUnsignedTx","EVMStandardBaseTx","serializer","transaction","codecBuf","writeUInt16BE","aIDHex","getInputTotal","txtype","getTxType","basebuff","unsignedTx","credentials","c","txbuff","credlen","credential","credid","credbuff","addChecksum","exportOuts","EXPORTTX","numOuts","TransferableOutputError","eo","getExportOutputs","anOut","SelectTxClass","BASETX","StandardUnsignedTx","readUInt16BE","StandardTx","numcreds","SECPFXID","SUBNETAUTHID","LOCKEDSTAKEABLES","CREATECHAINTX","ADVANCETIMETX","REWARDVALIDATORTX","BLOCKCHAINIDLEN","SYMBOLMAXLEN","ASSETNAMELEN","StandardBaseTx","cb58","hex","decimalString","buffer","numins","memolen","getTransaction","getIns","getTotalOuts","setCodecID","credID","Credential","source","sigarray","sigArray","siglen","writeInt32BE","numFXIDs","write","fxIDBufs","fxID","chainNameSize","nfxids","genesisDataSize","chainNameBuff","gdLength","newCreateChainTx","SECPCredential","CredIdError","newbasetx","tx_2","newOut","newIn","incount","contentType","acceptType","prepHeaders","getContentType","getAcceptType","IndexAPI","getLastAccepted","getContainerByIndex","getContainerByID","containerID","getContainerRange","numToFetch","getIndex","isAccepted","KeystoreAPI","createUser","exportUser","user","importUser","listUsers","users","deleteUser"],"mappings":"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","file":"js/chunk-vendors~89a8b29a.db62fecb.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = void 0;\nconst isomorphic_ws_1 = __importDefault(require(\"isomorphic-ws\"));\nconst utils_1 = require(\"../../utils\");\nclass Socket extends isomorphic_ws_1.default {\n    /**\n     * Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.\n     *\n     * @param url Defaults to [[MainnetAPI]]\n     * @param options Optional\n     */\n    constructor(url = `wss://${utils_1.MainnetAPI}:443/ext/bc/X/events`, options) {\n        super(url, options);\n    }\n    /**\n     * Send a message to the server\n     *\n     * @param data\n     * @param cb Optional\n     */\n    send(data, cb) {\n        super.send(data, cb);\n    }\n    /**\n     * Terminates the connection completely\n     *\n     * @param mcode Optional\n     * @param data Optional\n     */\n    close(mcode, data) {\n        super.close(mcode, data);\n    }\n}\nexports.Socket = Socket;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvc29ja2V0L3NvY2tldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxrRUFBcUM7QUFDckMsdUNBQXdDO0FBQ3hDLE1BQWEsTUFBTyxTQUFRLHVCQUFTO0lBOEJuQzs7Ozs7T0FLRztJQUNILFlBQ0UsTUFBa0MsU0FBUyxrQkFBVSxzQkFBc0IsRUFDM0UsT0FBcUQ7UUFFckQsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUNyQixDQUFDO0lBL0JEOzs7OztPQUtHO0lBQ0gsSUFBSSxDQUFDLElBQVMsRUFBRSxFQUFRO1FBQ3RCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3RCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxLQUFjLEVBQUUsSUFBYTtRQUNqQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUMxQixDQUFDO0NBY0Y7QUExQ0Qsd0JBMENDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLVNvY2tldFxuICovXG5pbXBvcnQgeyBDbGllbnRSZXF1ZXN0QXJncyB9IGZyb20gXCJodHRwXCJcbmltcG9ydCBXZWJTb2NrZXQgZnJvbSBcImlzb21vcnBoaWMtd3NcIlxuaW1wb3J0IHsgTWFpbm5ldEFQSSB9IGZyb20gXCIuLi8uLi91dGlsc1wiXG5leHBvcnQgY2xhc3MgU29ja2V0IGV4dGVuZHMgV2ViU29ja2V0IHtcbiAgLy8gRmlyZXMgb25jZSB0aGUgY29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZCBiZXR3ZWVuIHRoZSBjbGllbnQgYW5kIHRoZSBzZXJ2ZXJcbiAgb25vcGVuOiBhbnlcbiAgLy8gRmlyZXMgd2hlbiB0aGUgc2VydmVyIHNlbmRzIHNvbWUgZGF0YVxuICBvbm1lc3NhZ2U6IGFueVxuICAvLyBGaXJlcyBhZnRlciBlbmQgb2YgdGhlIGNvbW11bmljYXRpb24gYmV0d2VlbiBzZXJ2ZXIgYW5kIHRoZSBjbGllbnRcbiAgb25jbG9zZTogYW55XG4gIC8vIEZpcmVzIGZvciBzb21lIG1pc3Rha2UsIHdoaWNoIGhhcHBlbnMgZHVyaW5nIHRoZSBjb21tdW5pY2F0aW9uXG4gIG9uZXJyb3I6IGFueVxuXG4gIC8qKlxuICAgKiBTZW5kIGEgbWVzc2FnZSB0byB0aGUgc2VydmVyXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhXG4gICAqIEBwYXJhbSBjYiBPcHRpb25hbFxuICAgKi9cbiAgc2VuZChkYXRhOiBhbnksIGNiPzogYW55KTogdm9pZCB7XG4gICAgc3VwZXIuc2VuZChkYXRhLCBjYilcbiAgfVxuXG4gIC8qKlxuICAgKiBUZXJtaW5hdGVzIHRoZSBjb25uZWN0aW9uIGNvbXBsZXRlbHlcbiAgICpcbiAgICogQHBhcmFtIG1jb2RlIE9wdGlvbmFsXG4gICAqIEBwYXJhbSBkYXRhIE9wdGlvbmFsXG4gICAqL1xuICBjbG9zZShtY29kZT86IG51bWJlciwgZGF0YT86IHN0cmluZyk6IHZvaWQge1xuICAgIHN1cGVyLmNsb3NlKG1jb2RlLCBkYXRhKVxuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIHRoZSBBUEkgZm9yIGNyZWF0aW5nIGFuZCBtYW5hZ2luZyBhIFdlYlNvY2tldCBjb25uZWN0aW9uIHRvIGEgc2VydmVyLCBhcyB3ZWxsIGFzIGZvciBzZW5kaW5nIGFuZCByZWNlaXZpbmcgZGF0YSBvbiB0aGUgY29ubmVjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHVybCBEZWZhdWx0cyB0byBbW01haW5uZXRBUEldXVxuICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgdXJsOiBzdHJpbmcgfCBpbXBvcnQoXCJ1cmxcIikuVVJMID0gYHdzczovLyR7TWFpbm5ldEFQSX06NDQzL2V4dC9iYy9YL2V2ZW50c2AsXG4gICAgb3B0aW9ucz86IFdlYlNvY2tldC5DbGllbnRPcHRpb25zIHwgQ2xpZW50UmVxdWVzdEFyZ3NcbiAgKSB7XG4gICAgc3VwZXIodXJsLCBvcHRpb25zKVxuICB9XG59XG4iXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ValidationTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddValidatorTx = exports.AddDelegatorTx = exports.WeightedValidatorTx = exports.ValidatorTx = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst basetx_1 = require(\"./basetx\");\nconst outputs_1 = require(\"../platformvm/outputs\");\nconst buffer_1 = require(\"buffer/\");\nconst constants_1 = require(\"./constants\");\nconst constants_2 = require(\"../../utils/constants\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst outputs_2 = require(\"./outputs\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Abstract class representing an transactions with validation information.\n */\nclass ValidatorTx extends basetx_1.BaseTx {\n    constructor(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ValidatorTx\";\n        this._typeID = undefined;\n        this.nodeID = buffer_1.Buffer.alloc(20);\n        this.startTime = buffer_1.Buffer.alloc(8);\n        this.endTime = buffer_1.Buffer.alloc(8);\n        this.nodeID = nodeID;\n        this.startTime = bintools.fromBNToBuffer(startTime, 8);\n        this.endTime = bintools.fromBNToBuffer(endTime, 8);\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { nodeID: serialization.encoder(this.nodeID, encoding, \"Buffer\", \"nodeID\"), startTime: serialization.encoder(this.startTime, encoding, \"Buffer\", \"decimalString\"), endTime: serialization.encoder(this.endTime, encoding, \"Buffer\", \"decimalString\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.nodeID = serialization.decoder(fields[\"nodeID\"], encoding, \"nodeID\", \"Buffer\", 20);\n        this.startTime = serialization.decoder(fields[\"startTime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.endTime = serialization.decoder(fields[\"endTime\"], encoding, \"decimalString\", \"Buffer\", 8);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getNodeID() {\n        return this.nodeID;\n    }\n    /**\n     * Returns a string for the nodeID amount.\n     */\n    getNodeIDString() {\n        return (0, helperfunctions_1.bufferToNodeIDString)(this.nodeID);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getStartTime() {\n        return bintools.fromBufferToBN(this.startTime);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getEndTime() {\n        return bintools.fromBufferToBN(this.endTime);\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.nodeID = bintools.copyFrom(bytes, offset, offset + 20);\n        offset += 20;\n        this.startTime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.endTime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ValidatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = superbuff.length +\n            this.nodeID.length +\n            this.startTime.length +\n            this.endTime.length;\n        return buffer_1.Buffer.concat([superbuff, this.nodeID, this.startTime, this.endTime], bsize);\n    }\n}\nexports.ValidatorTx = ValidatorTx;\nclass WeightedValidatorTx extends ValidatorTx {\n    /**\n     * Class representing an unsigned AddSubnetValidatorTx transaction.\n     *\n     * @param networkID Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainID Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n     * @param weight Optional. The amount of nDJTX the validator is staking.\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, weight = undefined) {\n        super(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime);\n        this._typeName = \"WeightedValidatorTx\";\n        this._typeID = undefined;\n        this.weight = buffer_1.Buffer.alloc(8);\n        if (typeof weight !== undefined) {\n            this.weight = bintools.fromBNToBuffer(weight, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { weight: serialization.encoder(this.weight, encoding, \"Buffer\", \"decimalString\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.weight = serialization.decoder(fields[\"weight\"], encoding, \"decimalString\", \"Buffer\", 8);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getWeight() {\n        return bintools.fromBufferToBN(this.weight);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getWeightBuffer() {\n        return this.weight;\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.weight = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[AddSubnetValidatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        return buffer_1.Buffer.concat([superbuff, this.weight]);\n    }\n}\nexports.WeightedValidatorTx = WeightedValidatorTx;\n/**\n * Class representing an unsigned AddDelegatorTx transaction.\n */\nclass AddDelegatorTx extends WeightedValidatorTx {\n    /**\n     * Class representing an unsigned AddDelegatorTx transaction.\n     *\n     * @param networkID Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainID Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n     * @param stakeAmount Optional. The amount of nDJTX the validator is staking.\n     * @param stakeOuts Optional. The outputs used in paying the stake.\n     * @param rewardOwners Optional. The [[ParseableOutput]] containing a [[SECPOwnerOutput]] for the rewards.\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, stakeAmount = undefined, stakeOuts = undefined, rewardOwners = undefined) {\n        super(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, stakeAmount);\n        this._typeName = \"AddDelegatorTx\";\n        this._typeID = constants_1.PlatformVMConstants.ADDDELEGATORTX;\n        this.stakeOuts = [];\n        this.rewardOwners = undefined;\n        if (typeof stakeOuts !== undefined) {\n            this.stakeOuts = stakeOuts;\n        }\n        this.rewardOwners = rewardOwners;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { stakeOuts: this.stakeOuts.map((s) => s.serialize(encoding)), rewardOwners: this.rewardOwners.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.stakeOuts = fields[\"stakeOuts\"].map((s) => {\n            let xferout = new outputs_1.TransferableOutput();\n            xferout.deserialize(s, encoding);\n            return xferout;\n        });\n        this.rewardOwners = new outputs_2.ParseableOutput();\n        this.rewardOwners.deserialize(fields[\"rewardOwners\"], encoding);\n    }\n    /**\n     * Returns the id of the [[AddDelegatorTx]]\n     */\n    getTxType() {\n        return this._typeID;\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the stake amount.\n     */\n    getStakeAmount() {\n        return this.getWeight();\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getStakeAmountBuffer() {\n        return this.weight;\n    }\n    /**\n     * Returns the array of outputs being staked.\n     */\n    getStakeOuts() {\n        return this.stakeOuts;\n    }\n    /**\n     * Should match stakeAmount. Used in sanity checking.\n     */\n    getStakeOutsTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.stakeOuts.length; i++) {\n            val = val.add(this.stakeOuts[`${i}`].getOutput().getAmount());\n        }\n        return val;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the reward address.\n     */\n    getRewardOwners() {\n        return this.rewardOwners;\n    }\n    getTotalOuts() {\n        return [...this.getOuts(), ...this.getStakeOuts()];\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        const numstakeouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = numstakeouts.readUInt32BE(0);\n        this.stakeOuts = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.stakeOuts.push(xferout);\n        }\n        this.rewardOwners = new outputs_2.ParseableOutput();\n        offset = this.rewardOwners.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[AddDelegatorTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        let bsize = superbuff.length;\n        const numouts = buffer_1.Buffer.alloc(4);\n        numouts.writeUInt32BE(this.stakeOuts.length, 0);\n        let barr = [super.toBuffer(), numouts];\n        bsize += numouts.length;\n        this.stakeOuts = this.stakeOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.stakeOuts.length; i++) {\n            let out = this.stakeOuts[`${i}`].toBuffer();\n            barr.push(out);\n            bsize += out.length;\n        }\n        let ro = this.rewardOwners.toBuffer();\n        barr.push(ro);\n        bsize += ro.length;\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    clone() {\n        let newbase = new AddDelegatorTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new AddDelegatorTx(...args);\n    }\n}\nexports.AddDelegatorTx = AddDelegatorTx;\nclass AddValidatorTx extends AddDelegatorTx {\n    /**\n     * Class representing an unsigned AddValidatorTx transaction.\n     *\n     * @param networkID Optional. Networkid, [[DefaultNetworkID]]\n     * @param blockchainID Optional. Blockchainid, default Buffer.alloc(32, 16)\n     * @param outs Optional. Array of the [[TransferableOutput]]s\n     * @param ins Optional. Array of the [[TransferableInput]]s\n     * @param memo Optional. {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n     * @param stakeAmount Optional. The amount of nDJTX the validator is staking.\n     * @param stakeOuts Optional. The outputs used in paying the stake.\n     * @param rewardOwners Optional. The [[ParseableOutput]] containing the [[SECPOwnerOutput]] for the rewards.\n     * @param delegationFee Optional. The percent fee this validator charges when others delegate stake to them.\n     * Up to 4 decimal places allowed; additional decimal places are ignored. Must be between 0 and 100, inclusive.\n     * For example, if delegationFeeRate is 1.2345 and someone delegates to this validator, then when the delegation\n     * period is over, 1.2345% of the reward goes to the validator and the rest goes to the delegator.\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, stakeAmount = undefined, stakeOuts = undefined, rewardOwners = undefined, delegationFee = undefined) {\n        super(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, rewardOwners);\n        this._typeName = \"AddValidatorTx\";\n        this._typeID = constants_1.PlatformVMConstants.ADDVALIDATORTX;\n        this.delegationFee = 0;\n        if (typeof delegationFee === \"number\") {\n            if (delegationFee >= 0 && delegationFee <= 100) {\n                this.delegationFee = parseFloat(delegationFee.toFixed(4));\n            }\n            else {\n                throw new errors_1.DelegationFeeError(\"AddValidatorTx.constructor -- delegationFee must be in the range of 0 and 100, inclusively.\");\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { delegationFee: serialization.encoder(this.getDelegationFeeBuffer(), encoding, \"Buffer\", \"decimalString\", 4) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let dbuff = serialization.decoder(fields[\"delegationFee\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.delegationFee =\n            dbuff.readUInt32BE(0) / AddValidatorTx.delegatorMultiplier;\n    }\n    /**\n     * Returns the id of the [[AddValidatorTx]]\n     */\n    getTxType() {\n        return this._typeID;\n    }\n    /**\n     * Returns the delegation fee (represents a percentage from 0 to 100);\n     */\n    getDelegationFee() {\n        return this.delegationFee;\n    }\n    /**\n     * Returns the binary representation of the delegation fee as a {@link https://github.com/feross/buffer|Buffer}.\n     */\n    getDelegationFeeBuffer() {\n        let dBuff = buffer_1.Buffer.alloc(4);\n        let buffnum = parseFloat(this.delegationFee.toFixed(4)) *\n            AddValidatorTx.delegatorMultiplier;\n        dBuff.writeUInt32BE(buffnum, 0);\n        return dBuff;\n    }\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        let dbuff = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.delegationFee =\n            dbuff.readUInt32BE(0) / AddValidatorTx.delegatorMultiplier;\n        return offset;\n    }\n    toBuffer() {\n        let superBuff = super.toBuffer();\n        let feeBuff = this.getDelegationFeeBuffer();\n        return buffer_1.Buffer.concat([superBuff, feeBuff]);\n    }\n}\nexports.AddValidatorTx = AddValidatorTx;\nAddValidatorTx.delegatorMultiplier = 10000;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-JRPCAPI\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JRPCAPI = void 0;\nconst utils_1 = require(\"../utils\");\nconst apibase_1 = require(\"./apibase\");\nclass JRPCAPI extends apibase_1.APIBase {\n    /**\n     *\n     * @param core Reference to the Avalanche instance using this endpoint\n     * @param baseURL Path of the APIs baseURL - ex: \"/ext/bc/avm\"\n     * @param jrpcVersion The jrpc version to use, default \"2.0\".\n     */\n    constructor(core, baseURL, jrpcVersion = \"2.0\") {\n        super(core, baseURL);\n        this.jrpcVersion = \"2.0\";\n        this.rpcID = 1;\n        this.callMethod = (method, params, baseURL, headers) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseURL || this.baseURL;\n            const rpc = {};\n            rpc.id = this.rpcID;\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            else if (this.jrpcVersion === \"1.0\") {\n                rpc.params = [];\n            }\n            if (this.jrpcVersion !== \"1.0\") {\n                rpc.jsonrpc = this.jrpcVersion;\n            }\n            let headrs = { \"Content-Type\": \"application/json;charset=UTF-8\" };\n            if (headers) {\n                headrs = Object.assign(Object.assign({}, headrs), headers);\n            }\n            baseURL = this.core.getURL();\n            const axConf = {\n                baseURL: baseURL,\n                responseType: \"json\",\n                // use the fetch adapter if fetch is available e.g. non Node<17 env\n                adapter: typeof fetch !== \"undefined\" ? utils_1.fetchAdapter : undefined\n            };\n            const resp = yield this.core.post(ep, {}, JSON.stringify(rpc), headrs, axConf);\n            if (resp.status >= 200 && resp.status < 300) {\n                this.rpcID += 1;\n                if (typeof resp.data === \"string\") {\n                    resp.data = JSON.parse(resp.data);\n                }\n                if (typeof resp.data === \"object\" &&\n                    (resp.data === null || \"error\" in resp.data)) {\n                    throw new Error(resp.data.error.message);\n                }\n            }\n            return resp;\n        });\n        /**\n         * Returns the rpcid, a strictly-increasing number, starting from 1, indicating the next\n         * request ID that will be sent.\n         */\n        this.getRPCID = () => this.rpcID;\n        this.jrpcVersion = jrpcVersion;\n        this.rpcID = 1;\n    }\n}\nexports.JRPCAPI = JRPCAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianJwY2FwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vanJwY2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7Ozs7Ozs7QUFHSCxvQ0FBdUM7QUFFdkMsdUNBQXdEO0FBRXhELE1BQWEsT0FBUSxTQUFRLGlCQUFPO0lBb0VsQzs7Ozs7T0FLRztJQUNILFlBQ0UsSUFBbUIsRUFDbkIsT0FBZSxFQUNmLGNBQXNCLEtBQUs7UUFFM0IsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtRQTlFWixnQkFBVyxHQUFXLEtBQUssQ0FBQTtRQUMzQixVQUFLLEdBQUcsQ0FBQyxDQUFBO1FBRW5CLGVBQVUsR0FBRyxDQUNYLE1BQWMsRUFDZCxNQUEwQixFQUMxQixPQUFnQixFQUNoQixPQUFnQixFQUNjLEVBQUU7WUFDaEMsTUFBTSxFQUFFLEdBQVcsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUE7WUFDMUMsTUFBTSxHQUFHLEdBQVEsRUFBRSxDQUFBO1lBQ25CLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQTtZQUNuQixHQUFHLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtZQUVuQiwyQkFBMkI7WUFDM0IsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7YUFDcEI7aUJBQU0sSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtnQkFDckMsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUE7YUFDaEI7WUFFRCxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssS0FBSyxFQUFFO2dCQUM5QixHQUFHLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUE7YUFDL0I7WUFFRCxJQUFJLE1BQU0sR0FBVyxFQUFFLGNBQWMsRUFBRSxnQ0FBZ0MsRUFBRSxDQUFBO1lBQ3pFLElBQUksT0FBTyxFQUFFO2dCQUNYLE1BQU0sbUNBQVEsTUFBTSxHQUFLLE9BQU8sQ0FBRSxDQUFBO2FBQ25DO1lBRUQsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7WUFFNUIsTUFBTSxNQUFNLEdBQXVCO2dCQUNqQyxPQUFPLEVBQUUsT0FBTztnQkFDaEIsWUFBWSxFQUFFLE1BQU07Z0JBQ3BCLG1FQUFtRTtnQkFDbkUsT0FBTyxFQUFFLE9BQU8sS0FBSyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsb0JBQVksQ0FBQyxDQUFDLENBQUMsU0FBUzthQUNqRSxDQUFBO1lBRUQsTUFBTSxJQUFJLEdBQXdCLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ3BELEVBQUUsRUFDRixFQUFFLEVBQ0YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFDbkIsTUFBTSxFQUNOLE1BQU0sQ0FDUCxDQUFBO1lBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUE7Z0JBQ2YsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO29CQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO2lCQUNsQztnQkFDRCxJQUNFLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRO29CQUM3QixDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQzVDO29CQUNBLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7aUJBQ3pDO2FBQ0Y7WUFDRCxPQUFPLElBQUksQ0FBQTtRQUNiLENBQUMsQ0FBQSxDQUFBO1FBRUQ7OztXQUdHO1FBQ0gsYUFBUSxHQUFHLEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUE7UUFjakMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUE7UUFDOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUE7SUFDaEIsQ0FBQztDQUNGO0FBbkZELDBCQW1GQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIENvbW1vbi1KUlBDQVBJXG4gKi9cblxuaW1wb3J0IHsgQXhpb3NSZXF1ZXN0Q29uZmlnIH0gZnJvbSBcImF4aW9zXCJcbmltcG9ydCB7IGZldGNoQWRhcHRlciB9IGZyb20gXCIuLi91dGlsc1wiXG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tIFwiLi4vYXZhbGFuY2hlXCJcbmltcG9ydCB7IEFQSUJhc2UsIFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tIFwiLi9hcGliYXNlXCJcblxuZXhwb3J0IGNsYXNzIEpSUENBUEkgZXh0ZW5kcyBBUElCYXNlIHtcbiAgcHJvdGVjdGVkIGpycGNWZXJzaW9uOiBzdHJpbmcgPSBcIjIuMFwiXG4gIHByb3RlY3RlZCBycGNJRCA9IDFcblxuICBjYWxsTWV0aG9kID0gYXN5bmMgKFxuICAgIG1ldGhvZDogc3RyaW5nLFxuICAgIHBhcmFtcz86IG9iamVjdFtdIHwgb2JqZWN0LFxuICAgIGJhc2VVUkw/OiBzdHJpbmcsXG4gICAgaGVhZGVycz86IG9iamVjdFxuICApOiBQcm9taXNlPFJlcXVlc3RSZXNwb25zZURhdGE+ID0+IHtcbiAgICBjb25zdCBlcDogc3RyaW5nID0gYmFzZVVSTCB8fCB0aGlzLmJhc2VVUkxcbiAgICBjb25zdCBycGM6IGFueSA9IHt9XG4gICAgcnBjLmlkID0gdGhpcy5ycGNJRFxuICAgIHJwYy5tZXRob2QgPSBtZXRob2RcblxuICAgIC8vIFNldCBwYXJhbWV0ZXJzIGlmIGV4aXN0c1xuICAgIGlmIChwYXJhbXMpIHtcbiAgICAgIHJwYy5wYXJhbXMgPSBwYXJhbXNcbiAgICB9IGVsc2UgaWYgKHRoaXMuanJwY1ZlcnNpb24gPT09IFwiMS4wXCIpIHtcbiAgICAgIHJwYy5wYXJhbXMgPSBbXVxuICAgIH1cblxuICAgIGlmICh0aGlzLmpycGNWZXJzaW9uICE9PSBcIjEuMFwiKSB7XG4gICAgICBycGMuanNvbnJwYyA9IHRoaXMuanJwY1ZlcnNpb25cbiAgICB9XG5cbiAgICBsZXQgaGVhZHJzOiBvYmplY3QgPSB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIgfVxuICAgIGlmIChoZWFkZXJzKSB7XG4gICAgICBoZWFkcnMgPSB7IC4uLmhlYWRycywgLi4uaGVhZGVycyB9XG4gICAgfVxuXG4gICAgYmFzZVVSTCA9IHRoaXMuY29yZS5nZXRVUkwoKVxuXG4gICAgY29uc3QgYXhDb25mOiBBeGlvc1JlcXVlc3RDb25maWcgPSB7XG4gICAgICBiYXNlVVJMOiBiYXNlVVJMLFxuICAgICAgcmVzcG9uc2VUeXBlOiBcImpzb25cIixcbiAgICAgIC8vIHVzZSB0aGUgZmV0Y2ggYWRhcHRlciBpZiBmZXRjaCBpcyBhdmFpbGFibGUgZS5nLiBub24gTm9kZTwxNyBlbnZcbiAgICAgIGFkYXB0ZXI6IHR5cGVvZiBmZXRjaCAhPT0gXCJ1bmRlZmluZWRcIiA/IGZldGNoQWRhcHRlciA6IHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGNvbnN0IHJlc3A6IFJlcXVlc3RSZXNwb25zZURhdGEgPSBhd2FpdCB0aGlzLmNvcmUucG9zdChcbiAgICAgIGVwLFxuICAgICAge30sXG4gICAgICBKU09OLnN0cmluZ2lmeShycGMpLFxuICAgICAgaGVhZHJzLFxuICAgICAgYXhDb25mXG4gICAgKVxuICAgIGlmIChyZXNwLnN0YXR1cyA+PSAyMDAgJiYgcmVzcC5zdGF0dXMgPCAzMDApIHtcbiAgICAgIHRoaXMucnBjSUQgKz0gMVxuICAgICAgaWYgKHR5cGVvZiByZXNwLmRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmVzcC5kYXRhID0gSlNPTi5wYXJzZShyZXNwLmRhdGEpXG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiByZXNwLmRhdGEgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgKHJlc3AuZGF0YSA9PT0gbnVsbCB8fCBcImVycm9yXCIgaW4gcmVzcC5kYXRhKVxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwLmRhdGEuZXJyb3IubWVzc2FnZSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3BcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBycGNpZCwgYSBzdHJpY3RseS1pbmNyZWFzaW5nIG51bWJlciwgc3RhcnRpbmcgZnJvbSAxLCBpbmRpY2F0aW5nIHRoZSBuZXh0XG4gICAqIHJlcXVlc3QgSUQgdGhhdCB3aWxsIGJlIHNlbnQuXG4gICAqL1xuICBnZXRSUENJRCA9ICgpOiBudW1iZXIgPT4gdGhpcy5ycGNJRFxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gY29yZSBSZWZlcmVuY2UgdG8gdGhlIEF2YWxhbmNoZSBpbnN0YW5jZSB1c2luZyB0aGlzIGVuZHBvaW50XG4gICAqIEBwYXJhbSBiYXNlVVJMIFBhdGggb2YgdGhlIEFQSXMgYmFzZVVSTCAtIGV4OiBcIi9leHQvYmMvYXZtXCJcbiAgICogQHBhcmFtIGpycGNWZXJzaW9uIFRoZSBqcnBjIHZlcnNpb24gdG8gdXNlLCBkZWZhdWx0IFwiMi4wXCIuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBjb3JlOiBBdmFsYW5jaGVDb3JlLFxuICAgIGJhc2VVUkw6IHN0cmluZyxcbiAgICBqcnBjVmVyc2lvbjogc3RyaW5nID0gXCIyLjBcIlxuICApIHtcbiAgICBzdXBlcihjb3JlLCBiYXNlVVJMKVxuICAgIHRoaXMuanJwY1ZlcnNpb24gPSBqcnBjVmVyc2lvblxuICAgIHRoaXMucnBjSUQgPSAxXG4gIH1cbn1cbiJdfQ==","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InfoAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * Class for interacting with a node's InfoAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass InfoAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/info\" as the path to rpc's baseURL\n     */\n    constructor(core, baseURL = \"/ext/info\") {\n        super(core, baseURL);\n        /**\n         * Fetches the blockchainID from the node for a given alias.\n         *\n         * @param alias The blockchain alias to get the blockchainID\n         *\n         * @returns Returns a Promise string containing the base 58 string representation of the blockchainID.\n         */\n        this.getBlockchainID = (alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                alias\n            };\n            const response = yield this.callMethod(\"info.getBlockchainID\", params);\n            return response.data.result.blockchainID;\n        });\n        /**\n         * Fetches the IP address from the node.\n         *\n         * @returns Returns a Promise string of the node IP address.\n         */\n        this.getNodeIP = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"info.getBlockchainID\");\n            return response.data.result.ip;\n        });\n        /**\n         * Fetches the networkID from the node.\n         *\n         * @returns Returns a Promise number of the networkID.\n         */\n        this.getNetworkID = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"info.getNetworkID\");\n            return response.data.result.networkID;\n        });\n        /**\n         * Fetches the network name this node is running on\n         *\n         * @returns Returns a Promise string containing the network name.\n         */\n        this.getNetworkName = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"info.getNetworkName\");\n            return response.data.result.networkName;\n        });\n        /**\n         * Fetches the nodeID from the node.\n         *\n         * @returns Returns a Promise string of the nodeID.\n         */\n        this.getNodeID = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"info.getNodeID\");\n            return response.data.result.nodeID;\n        });\n        /**\n         * Fetches the version of Gecko this node is running\n         *\n         * @returns Returns a Promise string containing the version of Gecko.\n         */\n        this.getNodeVersion = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"info.getNodeVersion\");\n            return response.data.result.version;\n        });\n        /**\n         * Fetches the transaction fee from the node.\n         *\n         * @returns Returns a Promise object of the transaction fee in nDJTX.\n         */\n        this.getTxFee = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"info.getTxFee\");\n            return {\n                txFee: new bn_js_1.default(response.data.result.txFee, 10),\n                creationTxFee: new bn_js_1.default(response.data.result.creationTxFee, 10)\n            };\n        });\n        /**\n         * Check whether a given chain is done bootstrapping\n         * @param chain The ID or alias of a chain.\n         *\n         * @returns Returns a Promise boolean of whether the chain has completed bootstrapping.\n         */\n        this.isBootstrapped = (chain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                chain\n            };\n            const response = yield this.callMethod(\"info.isBootstrapped\", params);\n            return response.data.result.isBootstrapped;\n        });\n        /**\n         * Returns the peers connected to the node.\n         * @param nodeIDs an optional parameter to specify what nodeID's descriptions should be returned.\n         * If this parameter is left empty, descriptions for all active connections will be returned.\n         * If the node is not connected to a specified nodeID, it will be omitted from the response.\n         *\n         * @returns Promise for the list of connected peers in PeersResponse format.\n         */\n        this.peers = (nodeIDs = []) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                nodeIDs\n            };\n            const response = yield this.callMethod(\"info.peers\", params);\n            return response.data.result.peers;\n        });\n        /**\n         * Returns the network's observed uptime of this node.\n         *\n         * @returns Returns a Promise UptimeResponse which contains rewardingStakePercentage and weightedAveragePercentage.\n         */\n        this.uptime = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"info.uptime\");\n            return response.data.result;\n        });\n    }\n}\nexports.InfoAPI = InfoAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPOwnerOutput = exports.StakeableLockOut = exports.SECPTransferOutput = exports.AmountOutput = exports.ParseableOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Outputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nconst SelectOutputClass = (outputid, ...args) => {\n    if (outputid == constants_1.PlatformVMConstants.SECPXFEROUTPUTID) {\n        return new SECPTransferOutput(...args);\n    }\n    else if (outputid == constants_1.PlatformVMConstants.SECPOWNEROUTPUTID) {\n        return new SECPOwnerOutput(...args);\n    }\n    else if (outputid == constants_1.PlatformVMConstants.STAKEABLELOCKOUTID) {\n        return new StakeableLockOut(...args);\n    }\n    throw new errors_1.OutputIdError(\"Error - SelectOutputClass: unknown outputid \" + outputid);\n};\nexports.SelectOutputClass = SelectOutputClass;\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = (0, exports.SelectOutputClass)(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.PlatformVMConstants.ASSETIDLEN);\n        offset += constants_1.PlatformVMConstants.ASSETIDLEN;\n        const outputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.output = (0, exports.SelectOutputClass)(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass ParseableOutput extends output_1.StandardParseableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"ParseableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = (0, exports.SelectOutputClass)(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        const outputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.output = (0, exports.SelectOutputClass)(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.ParseableOutput = ParseableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return (0, exports.SelectOutputClass)(id, ...args);\n    }\n}\nexports.AmountOutput = AmountOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPTransferOutput extends AmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferOutput\";\n        this._typeID = constants_1.PlatformVMConstants.SECPXFEROUTPUTID;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferOutput = SECPTransferOutput;\n/**\n * An [[Output]] class which specifies an input that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n */\nclass StakeableLockOut extends AmountOutput {\n    /**\n     * A [[Output]] class which specifies a [[ParseableOutput]] that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the output\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     * @param stakeableLocktime A {@link https://github.com/indutny/bn.js/|BN} representing the stakeable locktime\n     * @param transferableOutput A [[ParseableOutput]] which is embedded into this output.\n     */\n    constructor(amount = undefined, addresses = undefined, locktime = undefined, threshold = undefined, stakeableLocktime = undefined, transferableOutput = undefined) {\n        super(amount, addresses, locktime, threshold);\n        this._typeName = \"StakeableLockOut\";\n        this._typeID = constants_1.PlatformVMConstants.STAKEABLELOCKOUTID;\n        if (typeof stakeableLocktime !== \"undefined\") {\n            this.stakeableLocktime = bintools.fromBNToBuffer(stakeableLocktime, 8);\n        }\n        if (typeof transferableOutput !== \"undefined\") {\n            this.transferableOutput = transferableOutput;\n            this.synchronize();\n        }\n    }\n    //serialize and deserialize both are inherited\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        let outobj = Object.assign(Object.assign({}, fields), { stakeableLocktime: serialization.encoder(this.stakeableLocktime, encoding, \"Buffer\", \"decimalString\", 8), transferableOutput: this.transferableOutput.serialize(encoding) });\n        delete outobj[\"addresses\"];\n        delete outobj[\"locktime\"];\n        delete outobj[\"threshold\"];\n        delete outobj[\"amount\"];\n        return outobj;\n    }\n    deserialize(fields, encoding = \"hex\") {\n        fields[\"addresses\"] = [];\n        fields[\"locktime\"] = \"0\";\n        fields[\"threshold\"] = \"1\";\n        fields[\"amount\"] = \"99\";\n        super.deserialize(fields, encoding);\n        this.stakeableLocktime = serialization.decoder(fields[\"stakeableLocktime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.transferableOutput = new ParseableOutput();\n        this.transferableOutput.deserialize(fields[\"transferableOutput\"], encoding);\n        this.synchronize();\n    }\n    //call this every time you load in data\n    synchronize() {\n        let output = this.transferableOutput.getOutput();\n        this.addresses = output.getAddresses().map((a) => {\n            let addr = new output_1.Address();\n            addr.fromBuffer(a);\n            return addr;\n        });\n        this.numaddrs = buffer_1.Buffer.alloc(4);\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        this.locktime = bintools.fromBNToBuffer(output.getLocktime(), 8);\n        this.threshold = buffer_1.Buffer.alloc(4);\n        this.threshold.writeUInt32BE(output.getThreshold(), 0);\n        this.amount = bintools.fromBNToBuffer(output.getAmount(), 8);\n        this.amountValue = output.getAmount();\n    }\n    getStakeableLocktime() {\n        return bintools.fromBufferToBN(this.stakeableLocktime);\n    }\n    getTransferableOutput() {\n        return this.transferableOutput;\n    }\n    /**\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return (0, exports.SelectOutputClass)(id, ...args);\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[StakeableLockOut]] and returns the size of the output.\n     */\n    fromBuffer(outbuff, offset = 0) {\n        this.stakeableLocktime = bintools.copyFrom(outbuff, offset, offset + 8);\n        offset += 8;\n        this.transferableOutput = new ParseableOutput();\n        offset = this.transferableOutput.fromBuffer(outbuff, offset);\n        this.synchronize();\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[StakeableLockOut]] instance.\n     */\n    toBuffer() {\n        let xferoutBuff = this.transferableOutput.toBuffer();\n        const bsize = this.stakeableLocktime.length + xferoutBuff.length;\n        const barr = [this.stakeableLocktime, xferoutBuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new StakeableLockOut(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.StakeableLockOut = StakeableLockOut;\n/**\n * An [[Output]] class which only specifies an Output ownership and uses secp256k1 signature scheme.\n */\nclass SECPOwnerOutput extends output_1.Output {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPOwnerOutput\";\n        this._typeID = constants_1.PlatformVMConstants.SECPOWNEROUTPUTID;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    create(...args) {\n        return new SECPOwnerOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    select(id, ...args) {\n        return (0, exports.SelectOutputClass)(id, ...args);\n    }\n}\nexports.SECPOwnerOutput = SECPOwnerOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Output\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseNFTOutput = exports.StandardAmountOutput = exports.StandardTransferableOutput = exports.StandardParseableOutput = exports.Output = exports.OutputOwners = exports.Address = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst nbytes_1 = require(\"./nbytes\");\nconst helperfunctions_1 = require(\"../utils/helperfunctions\");\nconst serialization_1 = require(\"../utils/serialization\");\nconst errors_1 = require(\"../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class for representing an address used in [[Output]] types\n */\nclass Address extends nbytes_1.NBytes {\n    /**\n     * Class for representing an address used in [[Output]] types\n     */\n    constructor() {\n        super();\n        this._typeName = \"Address\";\n        this._typeID = undefined;\n        //serialize and deserialize both are inherited\n        this.bytes = buffer_1.Buffer.alloc(20);\n        this.bsize = 20;\n    }\n    /**\n     * Returns a base-58 representation of the [[Address]].\n     */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    /**\n     * Takes a base-58 string containing an [[Address]], parses it, populates the class, and returns the length of the Address in bytes.\n     *\n     * @param bytes A base-58 string containing a raw [[Address]]\n     *\n     * @returns The length of the raw [[Address]]\n     */\n    fromString(addr) {\n        const addrbuff = bintools.b58ToBuffer(addr);\n        if (addrbuff.length === 24 && bintools.validateChecksum(addrbuff)) {\n            const newbuff = bintools.copyFrom(addrbuff, 0, addrbuff.length - 4);\n            if (newbuff.length === 20) {\n                this.bytes = newbuff;\n            }\n        }\n        else if (addrbuff.length === 24) {\n            throw new errors_1.ChecksumError(\"Error - Address.fromString: invalid checksum on address\");\n        }\n        else if (addrbuff.length === 20) {\n            this.bytes = addrbuff;\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.AddressError(\"Error - Address.fromString: invalid address\");\n        }\n        return this.getSize();\n    }\n    clone() {\n        let newbase = new Address();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new Address();\n    }\n}\nexports.Address = Address;\n/**\n * Returns a function used to sort an array of [[Address]]es\n */\nAddress.comparator = () => (a, b) => buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n/**\n * Defines the most basic values for output ownership. Mostly inherited from, but can be used in population of NFT Owner data.\n */\nclass OutputOwners extends serialization_1.Serializable {\n    /**\n     * An [[Output]] class which contains addresses, locktimes, and thresholds.\n     *\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing output owner's addresses\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     */\n    constructor(addresses = undefined, locktime = undefined, threshold = undefined) {\n        super();\n        this._typeName = \"OutputOwners\";\n        this._typeID = undefined;\n        this.locktime = buffer_1.Buffer.alloc(8);\n        this.threshold = buffer_1.Buffer.alloc(4);\n        this.numaddrs = buffer_1.Buffer.alloc(4);\n        this.addresses = [];\n        /**\n         * Returns the threshold of signers required to spend this output.\n         */\n        this.getThreshold = () => this.threshold.readUInt32BE(0);\n        /**\n         * Returns the a {@link https://github.com/indutny/bn.js/|BN} repersenting the UNIX Timestamp when the lock is made available.\n         */\n        this.getLocktime = () => bintools.fromBufferToBN(this.locktime);\n        /**\n         * Returns an array of {@link https://github.com/feross/buffer|Buffer}s for the addresses.\n         */\n        this.getAddresses = () => {\n            const result = [];\n            for (let i = 0; i < this.addresses.length; i++) {\n                result.push(this.addresses[`${i}`].toBuffer());\n            }\n            return result;\n        };\n        /**\n         * Returns the index of the address.\n         *\n         * @param address A {@link https://github.com/feross/buffer|Buffer} of the address to look up to return its index.\n         *\n         * @returns The index of the address.\n         */\n        this.getAddressIdx = (address) => {\n            for (let i = 0; i < this.addresses.length; i++) {\n                if (this.addresses[`${i}`].toBuffer().toString(\"hex\") ===\n                    address.toString(\"hex\")) {\n                    return i;\n                }\n            }\n            /* istanbul ignore next */\n            return -1;\n        };\n        /**\n         * Returns the address from the index provided.\n         *\n         * @param idx The index of the address.\n         *\n         * @returns Returns the string representing the address.\n         */\n        this.getAddress = (idx) => {\n            if (idx < this.addresses.length) {\n                return this.addresses[`${idx}`].toBuffer();\n            }\n            throw new errors_1.AddressIndexError(\"Error - Output.getAddress: idx out of range\");\n        };\n        /**\n         * Given an array of address {@link https://github.com/feross/buffer|Buffer}s and an optional timestamp, returns true if the addresses meet the threshold required to spend the output.\n         */\n        this.meetsThreshold = (addresses, asOf = undefined) => {\n            let now;\n            if (typeof asOf === \"undefined\") {\n                now = (0, helperfunctions_1.UnixNow)();\n            }\n            else {\n                now = asOf;\n            }\n            const qualified = this.getSpenders(addresses, now);\n            const threshold = this.threshold.readUInt32BE(0);\n            if (qualified.length >= threshold) {\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Given an array of addresses and an optional timestamp, select an array of address {@link https://github.com/feross/buffer|Buffer}s of qualified spenders for the output.\n         */\n        this.getSpenders = (addresses, asOf = undefined) => {\n            const qualified = [];\n            let now;\n            if (typeof asOf === \"undefined\") {\n                now = (0, helperfunctions_1.UnixNow)();\n            }\n            else {\n                now = asOf;\n            }\n            const locktime = bintools.fromBufferToBN(this.locktime);\n            if (now.lte(locktime)) {\n                // not unlocked, not spendable\n                return qualified;\n            }\n            const threshold = this.threshold.readUInt32BE(0);\n            for (let i = 0; i < this.addresses.length && qualified.length < threshold; i++) {\n                for (let j = 0; j < addresses.length && qualified.length < threshold; j++) {\n                    if (addresses[`${j}`].toString(\"hex\") ===\n                        this.addresses[`${i}`].toBuffer().toString(\"hex\")) {\n                        qualified.push(addresses[`${j}`]);\n                    }\n                }\n            }\n            return qualified;\n        };\n        if (typeof addresses !== \"undefined\" && addresses.length) {\n            const addrs = [];\n            for (let i = 0; i < addresses.length; i++) {\n                addrs[`${i}`] = new Address();\n                addrs[`${i}`].fromBuffer(addresses[`${i}`]);\n            }\n            this.addresses = addrs;\n            this.addresses.sort(Address.comparator());\n            this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        }\n        if (typeof threshold !== undefined) {\n            this.threshold.writeUInt32BE(threshold || 1, 0);\n        }\n        if (typeof locktime !== \"undefined\") {\n            this.locktime = bintools.fromBNToBuffer(locktime, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { locktime: serialization.encoder(this.locktime, encoding, \"Buffer\", \"decimalString\", 8), threshold: serialization.encoder(this.threshold, encoding, \"Buffer\", \"decimalString\", 4), addresses: this.addresses.map((a) => a.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.locktime = serialization.decoder(fields[\"locktime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.threshold = serialization.decoder(fields[\"threshold\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.addresses = fields[\"addresses\"].map((a) => {\n            let addr = new Address();\n            addr.deserialize(a, encoding);\n            return addr;\n        });\n        this.numaddrs = buffer_1.Buffer.alloc(4);\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n    }\n    /**\n     * Returns a base-58 string representing the [[Output]].\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.locktime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.threshold = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.numaddrs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numaddrs = this.numaddrs.readUInt32BE(0);\n        this.addresses = [];\n        for (let i = 0; i < numaddrs; i++) {\n            const addr = new Address();\n            offset = addr.fromBuffer(bytes, offset);\n            this.addresses.push(addr);\n        }\n        this.addresses.sort(Address.comparator());\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[Output]] instance.\n     */\n    toBuffer() {\n        this.addresses.sort(Address.comparator());\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        let bsize = this.locktime.length + this.threshold.length + this.numaddrs.length;\n        const barr = [this.locktime, this.threshold, this.numaddrs];\n        for (let i = 0; i < this.addresses.length; i++) {\n            const b = this.addresses[`${i}`].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[Output]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.OutputOwners = OutputOwners;\nOutputOwners.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getOutputID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getOutputID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\nclass Output extends OutputOwners {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Output\";\n        this._typeID = undefined;\n    }\n}\nexports.Output = Output;\nclass StandardParseableOutput extends serialization_1.Serializable {\n    /**\n     * Class representing an [[ParseableOutput]] for a transaction.\n     *\n     * @param output A number representing the InputID of the [[ParseableOutput]]\n     */\n    constructor(output = undefined) {\n        super();\n        this._typeName = \"StandardParseableOutput\";\n        this._typeID = undefined;\n        this.getOutput = () => this.output;\n        if (output instanceof Output) {\n            this.output = output;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { output: this.output.serialize(encoding) });\n    }\n    toBuffer() {\n        const outbuff = this.output.toBuffer();\n        const outid = buffer_1.Buffer.alloc(4);\n        outid.writeUInt32BE(this.output.getOutputID(), 0);\n        const barr = [outid, outbuff];\n        return buffer_1.Buffer.concat(barr, outid.length + outbuff.length);\n    }\n}\nexports.StandardParseableOutput = StandardParseableOutput;\n/**\n * Returns a function used to sort an array of [[ParseableOutput]]s\n */\nStandardParseableOutput.comparator = () => (a, b) => {\n    const sorta = a.toBuffer();\n    const sortb = b.toBuffer();\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\nclass StandardTransferableOutput extends StandardParseableOutput {\n    /**\n     * Class representing an [[StandardTransferableOutput]] for a transaction.\n     *\n     * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Output]]\n     * @param output A number representing the InputID of the [[StandardTransferableOutput]]\n     */\n    constructor(assetID = undefined, output = undefined) {\n        super(output);\n        this._typeName = \"StandardTransferableOutput\";\n        this._typeID = undefined;\n        this.assetID = undefined;\n        this.getAssetID = () => this.assetID;\n        if (typeof assetID !== \"undefined\") {\n            this.assetID = assetID;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { assetID: serialization.encoder(this.assetID, encoding, \"Buffer\", \"cb58\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.assetID = serialization.decoder(fields[\"assetID\"], encoding, \"cb58\", \"Buffer\", 32);\n    }\n    toBuffer() {\n        const parseableBuff = super.toBuffer();\n        const barr = [this.assetID, parseableBuff];\n        return buffer_1.Buffer.concat(barr, this.assetID.length + parseableBuff.length);\n    }\n}\nexports.StandardTransferableOutput = StandardTransferableOutput;\n/**\n * An [[Output]] class which specifies a token amount .\n */\nclass StandardAmountOutput extends Output {\n    /**\n     * A [[StandardAmountOutput]] class which issues a payment on an assetID.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the output\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n     */\n    constructor(amount = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this._typeName = \"StandardAmountOutput\";\n        this._typeID = undefined;\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        if (typeof amount !== \"undefined\") {\n            this.amountValue = amount.clone();\n            this.amount = bintools.fromBNToBuffer(amount, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { amount: serialization.encoder(this.amount, encoding, \"Buffer\", \"decimalString\", 8) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.amount = serialization.decoder(fields[\"amount\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n    }\n    /**\n     * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n     */\n    getAmount() {\n        return this.amountValue.clone();\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[StandardAmountOutput]] and returns the size of the output.\n     */\n    fromBuffer(outbuff, offset = 0) {\n        this.amount = bintools.copyFrom(outbuff, offset, offset + 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n        offset += 8;\n        return super.fromBuffer(outbuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[StandardAmountOutput]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.amount.length + superbuff.length;\n        this.numaddrs.writeUInt32BE(this.addresses.length, 0);\n        const barr = [this.amount, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.StandardAmountOutput = StandardAmountOutput;\n/**\n * An [[Output]] class which specifies an NFT.\n */\nclass BaseNFTOutput extends Output {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"BaseNFTOutput\";\n        this._typeID = undefined;\n        this.groupID = buffer_1.Buffer.alloc(4);\n        /**\n         * Returns the groupID as a number.\n         */\n        this.getGroupID = () => {\n            return this.groupID.readUInt32BE(0);\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { groupID: serialization.encoder(this.groupID, encoding, \"Buffer\", \"decimalString\", 4) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.groupID = serialization.decoder(fields[\"groupID\"], encoding, \"decimalString\", \"Buffer\", 4);\n    }\n}\nexports.BaseNFTOutput = BaseNFTOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.UTXO = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst constants_1 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst exporttx_1 = require(\"../platformvm/exporttx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst importtx_1 = require(\"../platformvm/importtx\");\nconst basetx_1 = require(\"../platformvm/basetx\");\nconst assetamount_1 = require(\"../../common/assetamount\");\nconst validationtx_1 = require(\"./validationtx\");\nconst createsubnettx_1 = require(\"./createsubnettx\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\nconst _1 = require(\".\");\nconst addsubnetvalidatortx_1 = require(\"../platformvm/addsubnetvalidatortx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXO\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = (0, outputs_1.SelectOutputClass)(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.output = (0, outputs_1.SelectOutputClass)(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.PlatformVMConstants.LATESTCODEC, txid = undefined, outputidx = undefined, assetID = undefined, output = undefined) {\n        return new UTXO(codecID, txid, outputidx, assetID, output);\n    }\n}\nexports.UTXO = UTXO;\nclass AssetAmountDestination extends assetamount_1.StandardAssetAmountDestination {\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXOSet\";\n        this._typeID = undefined;\n        this.getConsumableUXTO = (asOf = (0, helperfunctions_1.UnixNow)(), stakeable = false) => {\n            return this.getAllUTXOs().filter((utxo) => {\n                if (stakeable) {\n                    // stakeable transactions can consume any UTXO.\n                    return true;\n                }\n                const output = utxo.getOutput();\n                if (!(output instanceof outputs_1.StakeableLockOut)) {\n                    // non-stakeable transactions can consume any UTXO that isn't locked.\n                    return true;\n                }\n                const stakeableOutput = output;\n                if (stakeableOutput.getStakeableLocktime().lt(asOf)) {\n                    // If the stakeable outputs locktime has ended, then this UTXO can still\n                    // be consumed by a non-stakeable transaction.\n                    return true;\n                }\n                // This output is locked and can't be consumed by a non-stakeable\n                // transaction.\n                return false;\n            });\n        };\n        this.getMinimumSpendable = (aad, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1, stakeable = false) => {\n            let utxoArray = this.getConsumableUXTO(asOf, stakeable);\n            let tmpUTXOArray = [];\n            if (stakeable) {\n                // If this is a stakeable transaction then have StakeableLockOut come before SECPTransferOutput\n                // so that users first stake locked tokens before staking unlocked tokens\n                utxoArray.forEach((utxo) => {\n                    // StakeableLockOuts\n                    if (utxo.getOutput().getTypeID() === 22) {\n                        tmpUTXOArray.push(utxo);\n                    }\n                });\n                // Sort the StakeableLockOuts by StakeableLocktime so that the greatest StakeableLocktime are spent first\n                tmpUTXOArray.sort((a, b) => {\n                    let stakeableLockOut1 = a.getOutput();\n                    let stakeableLockOut2 = b.getOutput();\n                    return (stakeableLockOut2.getStakeableLocktime().toNumber() -\n                        stakeableLockOut1.getStakeableLocktime().toNumber());\n                });\n                utxoArray.forEach((utxo) => {\n                    // SECPTransferOutputs\n                    if (utxo.getOutput().getTypeID() === 7) {\n                        tmpUTXOArray.push(utxo);\n                    }\n                });\n                utxoArray = tmpUTXOArray;\n            }\n            // outs is a map from assetID to a tuple of (lockedStakeable, unlocked)\n            // which are arrays of outputs.\n            const outs = {};\n            // We only need to iterate over UTXOs until we have spent sufficient funds\n            // to met the requested amounts.\n            utxoArray.forEach((utxo, index) => {\n                const assetID = utxo.getAssetID();\n                const assetKey = assetID.toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                const output = utxo.getOutput();\n                if (!(output instanceof outputs_1.AmountOutput) ||\n                    !aad.assetExists(assetKey) ||\n                    !output.meetsThreshold(fromAddresses, asOf)) {\n                    // We should only try to spend fungible assets.\n                    // We should only spend {{ assetKey }}.\n                    // We need to be able to spend the output.\n                    return;\n                }\n                const assetAmount = aad.getAssetAmount(assetKey);\n                if (assetAmount.isFinished()) {\n                    // We've already spent the needed UTXOs for this assetID.\n                    return;\n                }\n                if (!(assetKey in outs)) {\n                    // If this is the first time spending this assetID, we need to\n                    // initialize the outs object correctly.\n                    outs[`${assetKey}`] = {\n                        lockedStakeable: [],\n                        unlocked: []\n                    };\n                }\n                const amountOutput = output;\n                // amount is the amount of funds available from this UTXO.\n                const amount = amountOutput.getAmount();\n                // Set up the SECP input with the same amount as the output.\n                let input = new inputs_1.SECPTransferInput(amount);\n                let locked = false;\n                if (amountOutput instanceof outputs_1.StakeableLockOut) {\n                    const stakeableOutput = amountOutput;\n                    const stakeableLocktime = stakeableOutput.getStakeableLocktime();\n                    if (stakeableLocktime.gt(asOf)) {\n                        // Add a new input and mark it as being locked.\n                        input = new inputs_1.StakeableLockIn(amount, stakeableLocktime, new inputs_1.ParseableInput(input));\n                        // Mark this UTXO as having been re-locked.\n                        locked = true;\n                    }\n                }\n                assetAmount.spendAmount(amount, locked);\n                if (locked) {\n                    // Track the UTXO as locked.\n                    outs[`${assetKey}`].lockedStakeable.push(amountOutput);\n                }\n                else {\n                    // Track the UTXO as unlocked.\n                    outs[`${assetKey}`].unlocked.push(amountOutput);\n                }\n                // Get the indices of the outputs that should be used to authorize the\n                // spending of this input.\n                // TODO: getSpenders should return an array of indices rather than an\n                // array of addresses.\n                const spenders = amountOutput.getSpenders(fromAddresses, asOf);\n                spenders.forEach((spender) => {\n                    const idx = amountOutput.getAddressIdx(spender);\n                    if (idx === -1) {\n                        // This should never happen, which is why the error is thrown rather\n                        // than being returned. If this were to ever happen this would be an\n                        // error in the internal logic rather having called this function with\n                        // invalid arguments.\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - UTXOSet.getMinimumSpendable: no such \" +\n                            `address in output: ${spender}`);\n                    }\n                    input.addSignatureIdx(idx, spender);\n                });\n                const txID = utxo.getTxID();\n                const outputIdx = utxo.getOutputIdx();\n                const transferInput = new inputs_1.TransferableInput(txID, outputIdx, assetID, input);\n                aad.addInput(transferInput);\n            });\n            if (!aad.canComplete()) {\n                // After running through all the UTXOs, we still weren't able to get all\n                // the necessary funds, so this transaction can't be made.\n                return new errors_1.InsufficientFundsError(\"Error - UTXOSet.getMinimumSpendable: insufficient \" +\n                    \"funds to create the transaction\");\n            }\n            // TODO: We should separate the above functionality into a single function\n            // that just selects the UTXOs to consume.\n            const zero = new bn_js_1.default(0);\n            // assetAmounts is an array of asset descriptions and how much is left to\n            // spend for them.\n            const assetAmounts = aad.getAmounts();\n            assetAmounts.forEach((assetAmount) => {\n                // change is the amount that should be returned back to the source of the\n                // funds.\n                const change = assetAmount.getChange();\n                // isStakeableLockChange is if the change is locked or not.\n                const isStakeableLockChange = assetAmount.getStakeableLockChange();\n                // lockedChange is the amount of locked change that should be returned to\n                // the sender\n                const lockedChange = isStakeableLockChange ? change : zero.clone();\n                const assetID = assetAmount.getAssetID();\n                const assetKey = assetAmount.getAssetIDString();\n                const lockedOutputs = outs[`${assetKey}`].lockedStakeable;\n                lockedOutputs.forEach((lockedOutput, i) => {\n                    const stakeableLocktime = lockedOutput.getStakeableLocktime();\n                    const parseableOutput = lockedOutput.getTransferableOutput();\n                    // We know that parseableOutput contains an AmountOutput because the\n                    // first loop filters for fungible assets.\n                    const output = parseableOutput.getOutput();\n                    let outputAmountRemaining = output.getAmount();\n                    // The only output that could generate change is the last output.\n                    // Otherwise, any further UTXOs wouldn't have needed to be spent.\n                    if (i == lockedOutputs.length - 1 && lockedChange.gt(zero)) {\n                        // update outputAmountRemaining to no longer hold the change that we\n                        // are returning.\n                        outputAmountRemaining = outputAmountRemaining.sub(lockedChange);\n                        // Create the inner output.\n                        const newChangeOutput = (0, outputs_1.SelectOutputClass)(output.getOutputID(), lockedChange, output.getAddresses(), output.getLocktime(), output.getThreshold());\n                        // Wrap the inner output in the StakeableLockOut wrapper.\n                        let newLockedChangeOutput = (0, outputs_1.SelectOutputClass)(lockedOutput.getOutputID(), lockedChange, output.getAddresses(), output.getLocktime(), output.getThreshold(), stakeableLocktime, new outputs_1.ParseableOutput(newChangeOutput));\n                        const transferOutput = new outputs_1.TransferableOutput(assetID, newLockedChangeOutput);\n                        aad.addChange(transferOutput);\n                    }\n                    // We know that outputAmountRemaining > 0. Otherwise, we would never\n                    // have consumed this UTXO, as it would be only change.\n                    // Create the inner output.\n                    const newOutput = (0, outputs_1.SelectOutputClass)(output.getOutputID(), outputAmountRemaining, output.getAddresses(), output.getLocktime(), output.getThreshold());\n                    // Wrap the inner output in the StakeableLockOut wrapper.\n                    const newLockedOutput = (0, outputs_1.SelectOutputClass)(lockedOutput.getOutputID(), outputAmountRemaining, output.getAddresses(), output.getLocktime(), output.getThreshold(), stakeableLocktime, new outputs_1.ParseableOutput(newOutput));\n                    const transferOutput = new outputs_1.TransferableOutput(assetID, newLockedOutput);\n                    aad.addOutput(transferOutput);\n                });\n                // unlockedChange is the amount of unlocked change that should be returned\n                // to the sender\n                const unlockedChange = isStakeableLockChange ? zero.clone() : change;\n                if (unlockedChange.gt(zero)) {\n                    const newChangeOutput = new outputs_1.SECPTransferOutput(unlockedChange, aad.getChangeAddresses(), zero.clone(), // make sure that we don't lock the change output.\n                    1 // only require one of the changes addresses to spend this output.\n                    );\n                    const transferOutput = new outputs_1.TransferableOutput(assetID, newChangeOutput);\n                    aad.addChange(transferOutput);\n                }\n                // totalAmountSpent is the total amount of tokens consumed.\n                const totalAmountSpent = assetAmount.getSpent();\n                // stakeableLockedAmount is the total amount of locked tokens consumed.\n                const stakeableLockedAmount = assetAmount.getStakeableLockSpent();\n                // totalUnlockedSpent is the total amount of unlocked tokens consumed.\n                const totalUnlockedSpent = totalAmountSpent.sub(stakeableLockedAmount);\n                // amountBurnt is the amount of unlocked tokens that must be burn.\n                const amountBurnt = assetAmount.getBurn();\n                // totalUnlockedAvailable is the total amount of unlocked tokens available\n                // to be produced.\n                const totalUnlockedAvailable = totalUnlockedSpent.sub(amountBurnt);\n                // unlockedAmount is the amount of unlocked tokens that should be sent.\n                const unlockedAmount = totalUnlockedAvailable.sub(unlockedChange);\n                if (unlockedAmount.gt(zero)) {\n                    const newOutput = new outputs_1.SECPTransferOutput(unlockedAmount, aad.getDestinations(), locktime, threshold);\n                    const transferOutput = new outputs_1.TransferableOutput(assetID, newOutput);\n                    aad.addOutput(transferOutput);\n                }\n            });\n            return undefined;\n        };\n        /**\n         * Creates an [[UnsignedTx]] wrapping a [[BaseTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] wrapping a [[BaseTx]] manually (with their corresponding [[TransferableInput]]s and [[TransferableOutput]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount of the asset to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned. Default: assetID\n         * @param memo Optional. Contains arbitrary data, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildBaseTx = (networkID, blockchainID, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            if (threshold > toAddresses.length) {\n                /* istanbul ignore next */\n                throw new errors_1.ThresholdError(\"Error - UTXOSet.buildBaseTx: threshold is greater than number of addresses\");\n            }\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            let ins = [];\n            let outs = [];\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getAllOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const baseTx = new basetx_1.BaseTx(networkID, blockchainID, outs, ins, memo);\n            return new tx_1.UnsignedTx(baseTx);\n        };\n        /**\n         * Creates an unsigned ImportTx transaction.\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n         * @param importIns An array of [[TransferableInput]]s being imported\n         * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}. Fee will come from the inputs first, if they can.\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildImportTx = (networkID, blockchainID, toAddresses, fromAddresses, changeAddresses, atomics, sourceChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (typeof fee === \"undefined\") {\n                fee = zero.clone();\n            }\n            const importIns = [];\n            let feepaid = new bn_js_1.default(0);\n            let feeAssetStr = feeAssetID.toString(\"hex\");\n            for (let i = 0; i < atomics.length; i++) {\n                const utxo = atomics[`${i}`];\n                const assetID = utxo.getAssetID();\n                const output = utxo.getOutput();\n                let amt = output.getAmount().clone();\n                let infeeamount = amt.clone();\n                let assetStr = assetID.toString(\"hex\");\n                if (typeof feeAssetID !== \"undefined\" &&\n                    fee.gt(zero) &&\n                    feepaid.lt(fee) &&\n                    assetStr === feeAssetStr) {\n                    feepaid = feepaid.add(infeeamount);\n                    if (feepaid.gte(fee)) {\n                        infeeamount = feepaid.sub(fee);\n                        feepaid = fee.clone();\n                    }\n                    else {\n                        infeeamount = zero.clone();\n                    }\n                }\n                const txid = utxo.getTxID();\n                const outputidx = utxo.getOutputIdx();\n                const input = new inputs_1.SECPTransferInput(amt);\n                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);\n                const from = output.getAddresses();\n                const spenders = output.getSpenders(from, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = output.getAddressIdx(spenders[`${j}`]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - UTXOSet.buildImportTx: no such \" +\n                            `address in output: ${spenders[`${j}`]}`);\n                    }\n                    xferin.getInput().addSignatureIdx(idx, spenders[`${j}`]);\n                }\n                importIns.push(xferin);\n                //add extra outputs for each amount (calculated from the imported inputs), minus fees\n                if (infeeamount.gt(zero)) {\n                    const spendout = (0, outputs_1.SelectOutputClass)(output.getOutputID(), infeeamount, toAddresses, locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(assetID, spendout);\n                    outs.push(xferout);\n                }\n            }\n            // get remaining fees from the provided addresses\n            let feeRemaining = fee.sub(feepaid);\n            if (feeRemaining.gt(zero) && this._feeCheck(feeRemaining, feeAssetID)) {\n                const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, feeRemaining);\n                const minSpendableErr = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n                if (typeof minSpendableErr === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw minSpendableErr;\n                }\n            }\n            const importTx = new importtx_1.ImportTx(networkID, blockchainID, outs, ins, memo, sourceChain, importIns);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n         * Creates an unsigned ExportTx transaction.\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param djtxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for DJTX\n         * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the DJTX\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the DJTX\n         * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover of the DJTX\n         * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildExportTx = (networkID, blockchainID, amount, djtxAssetID, // TODO: rename this to amountAssetID\n        toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let outs = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = djtxAssetID;\n            }\n            else if (feeAssetID.toString(\"hex\") !== djtxAssetID.toString(\"hex\")) {\n                /* istanbul ignore next */\n                throw new errors_1.FeeAssetError(\"Error - UTXOSet.buildExportTx: \" + `feeAssetID must match djtxAssetID`);\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.Defaults.network[`${networkID}`].X[\"blockchainID\"]);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (djtxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(djtxAssetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(djtxAssetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkID, blockchainID, outs, ins, memo, destinationChain, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n        /**\n         * Class representing an unsigned [[AddSubnetValidatorTx]] transaction.\n         *\n         * @param networkID Networkid, [[DefaultNetworkID]]\n         * @param blockchainID Blockchainid, default undefined\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees in DJTX\n         * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n         * @param nodeID The node ID of the validator being added.\n         * @param startTime The Unix time when the validator starts validating the Primary Network.\n         * @param endTime The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n         * @param weight The amount of weight for this subnet validator.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param subnetAuthCredentials Optional. An array of index and address to sign for each SubnetAuth.\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildAddSubnetValidatorTx = (networkID = constants_2.DefaultNetworkID, blockchainID, fromAddresses, changeAddresses, nodeID, startTime, endTime, weight, subnetID, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), subnetAuthCredentials = []) => {\n            let ins = [];\n            let outs = [];\n            const zero = new bn_js_1.default(0);\n            const now = (0, helperfunctions_1.UnixNow)();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new Error(\"UTXOSet.buildAddSubnetValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            const addSubnetValidatorTx = new addsubnetvalidatortx_1.AddSubnetValidatorTx(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, weight, subnetID);\n            subnetAuthCredentials.forEach((subnetAuthCredential) => {\n                addSubnetValidatorTx.addSignatureIdx(subnetAuthCredential[0], subnetAuthCredential[1]);\n            });\n            return new tx_1.UnsignedTx(addSubnetValidatorTx);\n        };\n        /**\n         * Class representing an unsigned [[AddDelegatorTx]] transaction.\n         *\n         * @param networkID Networkid, [[DefaultNetworkID]]\n         * @param blockchainID Blockchainid, default undefined\n         * @param djtxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for DJTX\n         * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} recieves the stake at the end of the staking period\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees and the stake\n         * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the staking payment\n         * @param nodeID The node ID of the validator being added.\n         * @param startTime The Unix time when the validator starts validating the Primary Network.\n         * @param endTime The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n         * @param stakeAmount A {@link https://github.com/indutny/bn.js/|BN} for the amount of stake to be delegated in nDJTX.\n         * @param rewardLocktime The locktime field created in the resulting reward outputs\n         * @param rewardThreshold The number of signatures required to spend the funds in the resultant reward UTXO\n         * @param rewardAddresses The addresses the validator reward goes.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildAddDelegatorTx = (networkID = constants_2.DefaultNetworkID, blockchainID, djtxAssetID, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewardAddresses, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => {\n            let ins = [];\n            let outs = [];\n            let stakeOuts = [];\n            const zero = new bn_js_1.default(0);\n            const now = (0, helperfunctions_1.UnixNow)();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new errors_1.TimeError(\"UTXOSet.buildAddDelegatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (djtxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(djtxAssetID, stakeAmount, fee);\n            }\n            else {\n                aad.addAssetAmount(djtxAssetID, stakeAmount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, undefined, undefined, true);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                stakeOuts = aad.getOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const rewardOutputOwners = new outputs_1.SECPOwnerOutput(rewardAddresses, rewardLocktime, rewardThreshold);\n            const UTx = new validationtx_1.AddDelegatorTx(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, new outputs_1.ParseableOutput(rewardOutputOwners));\n            return new tx_1.UnsignedTx(UTx);\n        };\n        /**\n         * Class representing an unsigned [[AddValidatorTx]] transaction.\n         *\n         * @param networkID NetworkID, [[DefaultNetworkID]]\n         * @param blockchainID BlockchainID, default undefined\n         * @param djtxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for DJTX\n         * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} recieves the stake at the end of the staking period\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees and the stake\n         * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the staking payment\n         * @param nodeID The node ID of the validator being added.\n         * @param startTime The Unix time when the validator starts validating the Primary Network.\n         * @param endTime The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n         * @param stakeAmount A {@link https://github.com/indutny/bn.js/|BN} for the amount of stake to be delegated in nDJTX.\n         * @param rewardLocktime The locktime field created in the resulting reward outputs\n         * @param rewardThreshold The number of signatures required to spend the funds in the resultant reward UTXO\n         * @param rewardAddresses The addresses the validator reward goes.\n         * @param delegationFee A number for the percentage of reward to be given to the validator when someone delegates to them. Must be between 0 and 100.\n         * @param minStake A {@link https://github.com/indutny/bn.js/|BN} representing the minimum stake required to validate on this network.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildAddValidatorTx = (networkID = constants_2.DefaultNetworkID, blockchainID, djtxAssetID, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewardAddresses, delegationFee, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => {\n            let ins = [];\n            let outs = [];\n            let stakeOuts = [];\n            const zero = new bn_js_1.default(0);\n            const now = (0, helperfunctions_1.UnixNow)();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new errors_1.TimeError(\"UTXOSet.buildAddValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            if (delegationFee > 100 || delegationFee < 0) {\n                throw new errors_1.TimeError(\"UTXOSet.buildAddValidatorTx -- startTime must be in the range of 0 to 100, inclusively\");\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (djtxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(djtxAssetID, stakeAmount, fee);\n            }\n            else {\n                aad.addAssetAmount(djtxAssetID, stakeAmount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const minSpendableErr = this.getMinimumSpendable(aad, asOf, undefined, undefined, true);\n            if (typeof minSpendableErr === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                stakeOuts = aad.getOutputs();\n            }\n            else {\n                throw minSpendableErr;\n            }\n            const rewardOutputOwners = new outputs_1.SECPOwnerOutput(rewardAddresses, rewardLocktime, rewardThreshold);\n            const UTx = new validationtx_1.AddValidatorTx(networkID, blockchainID, outs, ins, memo, nodeID, startTime, endTime, stakeAmount, stakeOuts, new outputs_1.ParseableOutput(rewardOutputOwners), delegationFee);\n            return new tx_1.UnsignedTx(UTx);\n        };\n        /**\n         * Class representing an unsigned [[CreateSubnetTx]] transaction.\n         *\n         * @param networkID Networkid, [[DefaultNetworkID]]\n         * @param blockchainID Blockchainid, default undefined\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs.\n         * @param subnetOwnerAddresses An array of {@link https://github.com/feross/buffer|Buffer} for the addresses to add to a subnet\n         * @param subnetOwnerThreshold The number of owners's signatures required to add a validator to the network\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildCreateSubnetTx = (networkID = constants_2.DefaultNetworkID, blockchainID, fromAddresses, changeAddresses, subnetOwnerAddresses, subnetOwnerThreshold, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const minSpendableErr = this.getMinimumSpendable(aad, asOf, undefined, undefined);\n                if (typeof minSpendableErr === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw minSpendableErr;\n                }\n            }\n            const locktime = new bn_js_1.default(0);\n            const subnetOwners = new outputs_1.SECPOwnerOutput(subnetOwnerAddresses, locktime, subnetOwnerThreshold);\n            const createSubnetTx = new createsubnettx_1.CreateSubnetTx(networkID, blockchainID, outs, ins, memo, subnetOwners);\n            return new tx_1.UnsignedTx(createSubnetTx);\n        };\n        /**\n         * Build an unsigned [[CreateChainTx]].\n         *\n         * @param networkID Networkid, [[DefaultNetworkID]]\n         * @param blockchainID Blockchainid, default undefined\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs.\n         * @param subnetID Optional ID of the Subnet that validates this blockchain\n         * @param chainName Optional A human readable name for the chain; need not be unique\n         * @param vmID Optional ID of the VM running on the new chain\n         * @param fxIDs Optional IDs of the feature extensions running on the new chain\n         * @param genesisData Optional Byte representation of genesis state of the new chain\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param subnetAuthCredentials Optional. An array of index and address to sign for each SubnetAuth.\n         *\n         * @returns An unsigned CreateChainTx created from the passed in parameters.\n         */\n        this.buildCreateChainTx = (networkID = constants_2.DefaultNetworkID, blockchainID, fromAddresses, changeAddresses, subnetID = undefined, chainName = undefined, vmID = undefined, fxIDs = undefined, genesisData = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), subnetAuthCredentials = []) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const minSpendableErr = this.getMinimumSpendable(aad, asOf, undefined, undefined);\n                if (typeof minSpendableErr === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw minSpendableErr;\n                }\n            }\n            const createChainTx = new _1.CreateChainTx(networkID, blockchainID, outs, ins, memo, subnetID, chainName, vmID, fxIDs, genesisData);\n            subnetAuthCredentials.forEach((subnetAuthCredential) => {\n                createChainTx.addSignatureIdx(subnetAuthCredential[0], subnetAuthCredential[1]);\n            });\n            return new tx_1.UnsignedTx(createChainTx);\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let utxos = {};\n        for (let utxoid in fields[\"utxos\"]) {\n            let utxoidCleaned = serialization.decoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[`${utxoidCleaned}`] = new UTXO();\n            utxos[`${utxoidCleaned}`].deserialize(fields[\"utxos\"][`${utxoid}`], encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in fields[\"addressUTXOs\"]) {\n            let addressCleaned = serialization.decoder(address, encoding, \"cb58\", \"hex\");\n            let utxobalance = {};\n            for (let utxoid in fields[\"addressUTXOs\"][`${address}`]) {\n                let utxoidCleaned = serialization.decoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[`${utxoidCleaned}`] = serialization.decoder(fields[\"addressUTXOs\"][`${address}`][`${utxoid}`], encoding, \"decimalString\", \"BN\");\n            }\n            addressUTXOs[`${addressCleaned}`] = utxobalance;\n        }\n        this.utxos = utxos;\n        this.addressUTXOs = addressUTXOs;\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === \"string\") {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof utxos_1.StandardUTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.UTXOError(\"Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string\");\n        }\n        return utxovar;\n    }\n    create(...args) {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) &&\n            feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-NBytes\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NBytes = void 0;\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst serialization_1 = require(\"../utils/serialization\");\nconst errors_1 = require(\"../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Abstract class that implements basic functionality for managing a\n * {@link https://github.com/feross/buffer|Buffer} of an exact length.\n *\n * Create a class that extends this one and override bsize to make it validate for exactly\n * the correct length.\n */\nclass NBytes extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"NBytes\";\n        this._typeID = undefined;\n        /**\n         * Returns the length of the {@link https://github.com/feross/buffer|Buffer}.\n         *\n         * @returns The exact length requirement of this class\n         */\n        this.getSize = () => this.bsize;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { bsize: serialization.encoder(this.bsize, encoding, \"number\", \"decimalString\", 4), bytes: serialization.encoder(this.bytes, encoding, \"Buffer\", \"hex\", this.bsize) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.bsize = serialization.decoder(fields[\"bsize\"], encoding, \"decimalString\", \"number\", 4);\n        this.bytes = serialization.decoder(fields[\"bytes\"], encoding, \"hex\", \"Buffer\", this.bsize);\n    }\n    /**\n     * Takes a base-58 encoded string, verifies its length, and stores it.\n     *\n     * @returns The size of the {@link https://github.com/feross/buffer|Buffer}\n     */\n    fromString(b58str) {\n        try {\n            this.fromBuffer(bintools.b58ToBuffer(b58str));\n        }\n        catch (e) {\n            /* istanbul ignore next */\n            const emsg = `Error - NBytes.fromString: ${e}`;\n            /* istanbul ignore next */\n            throw new Error(emsg);\n        }\n        return this.bsize;\n    }\n    /**\n     * Takes a [[Buffer]], verifies its length, and stores it.\n     *\n     * @returns The size of the {@link https://github.com/feross/buffer|Buffer}\n     */\n    fromBuffer(buff, offset = 0) {\n        try {\n            if (buff.length - offset < this.bsize) {\n                /* istanbul ignore next */\n                throw new errors_1.BufferSizeError(\"Error - NBytes.fromBuffer: not enough space available in buffer.\");\n            }\n            this.bytes = bintools.copyFrom(buff, offset, offset + this.bsize);\n        }\n        catch (e) {\n            /* istanbul ignore next */\n            const emsg = `Error - NBytes.fromBuffer: ${e}`;\n            /* istanbul ignore next */\n            throw new Error(emsg);\n        }\n        return offset + this.bsize;\n    }\n    /**\n     * @returns A reference to the stored {@link https://github.com/feross/buffer|Buffer}\n     */\n    toBuffer() {\n        return this.bytes;\n    }\n    /**\n     * @returns A base-58 string of the stored {@link https://github.com/feross/buffer|Buffer}\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NBytes = NBytes;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmJ5dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9uYnl0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7O0FBR0gsaUVBQXdDO0FBQ3hDLDBEQUkrQjtBQUMvQiw0Q0FBaUQ7QUFFakQ7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBYSxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBQ2pELE1BQU0sYUFBYSxHQUFrQiw2QkFBYSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBRWhFOzs7Ozs7R0FNRztBQUNILE1BQXNCLE1BQU8sU0FBUSw0QkFBWTtJQUFqRDs7UUFDWSxjQUFTLEdBQUcsUUFBUSxDQUFBO1FBQ3BCLFlBQU8sR0FBRyxTQUFTLENBQUE7UUEyQzdCOzs7O1dBSUc7UUFDSCxZQUFPLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtJQTJENUIsQ0FBQztJQXpHQyxTQUFTLENBQUMsV0FBK0IsS0FBSztRQUM1QyxJQUFJLE1BQU0sR0FBVyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzlDLHVDQUNLLE1BQU0sS0FDVCxLQUFLLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FDMUIsSUFBSSxDQUFDLEtBQUssRUFDVixRQUFRLEVBQ1IsUUFBUSxFQUNSLGVBQWUsRUFDZixDQUFDLENBQ0YsRUFDRCxLQUFLLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FDMUIsSUFBSSxDQUFDLEtBQUssRUFDVixRQUFRLEVBQ1IsUUFBUSxFQUNSLEtBQUssRUFDTCxJQUFJLENBQUMsS0FBSyxDQUNYLElBQ0Y7SUFDSCxDQUFDO0lBQ0QsV0FBVyxDQUFDLE1BQWMsRUFBRSxXQUErQixLQUFLO1FBQzlELEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ25DLElBQUksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FDaEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUNmLFFBQVEsRUFDUixlQUFlLEVBQ2YsUUFBUSxFQUNSLENBQUMsQ0FDRixDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsT0FBTyxDQUNoQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ2YsUUFBUSxFQUNSLEtBQUssRUFDTCxRQUFRLEVBQ1IsSUFBSSxDQUFDLEtBQUssQ0FDWCxDQUFBO0lBQ0gsQ0FBQztJQVlEOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsTUFBYztRQUN2QixJQUFJO1lBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7U0FDOUM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLDBCQUEwQjtZQUMxQixNQUFNLElBQUksR0FBVyw4QkFBOEIsQ0FBQyxFQUFFLENBQUE7WUFDdEQsMEJBQTBCO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7UUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDbkIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsSUFBWSxFQUFFLFNBQWlCLENBQUM7UUFDekMsSUFBSTtZQUNGLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDckMsMEJBQTBCO2dCQUMxQixNQUFNLElBQUksd0JBQWUsQ0FDdkIsa0VBQWtFLENBQ25FLENBQUE7YUFDRjtZQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDbEU7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLDBCQUEwQjtZQUMxQixNQUFNLElBQUksR0FBVyw4QkFBOEIsQ0FBQyxFQUFFLENBQUE7WUFDdEQsMEJBQTBCO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDdEI7UUFDRCxPQUFPLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFBO0lBQzVCLENBQUM7SUFFRDs7T0FFRztJQUNILFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDbkIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNOLE9BQU8sUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0NBSUY7QUE3R0Qsd0JBNkdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQ29tbW9uLU5CeXRlc1xuICovXG5cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXIvXCJcbmltcG9ydCBCaW5Ub29scyBmcm9tIFwiLi4vdXRpbHMvYmludG9vbHNcIlxuaW1wb3J0IHtcbiAgU2VyaWFsaXphYmxlLFxuICBTZXJpYWxpemF0aW9uLFxuICBTZXJpYWxpemVkRW5jb2Rpbmdcbn0gZnJvbSBcIi4uL3V0aWxzL3NlcmlhbGl6YXRpb25cIlxuaW1wb3J0IHsgQnVmZmVyU2l6ZUVycm9yIH0gZnJvbSBcIi4uL3V0aWxzL2Vycm9yc1wiXG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29sczogQmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpXG5jb25zdCBzZXJpYWxpemF0aW9uOiBTZXJpYWxpemF0aW9uID0gU2VyaWFsaXphdGlvbi5nZXRJbnN0YW5jZSgpXG5cbi8qKlxuICogQWJzdHJhY3QgY2xhc3MgdGhhdCBpbXBsZW1lbnRzIGJhc2ljIGZ1bmN0aW9uYWxpdHkgZm9yIG1hbmFnaW5nIGFcbiAqIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IG9mIGFuIGV4YWN0IGxlbmd0aC5cbiAqXG4gKiBDcmVhdGUgYSBjbGFzcyB0aGF0IGV4dGVuZHMgdGhpcyBvbmUgYW5kIG92ZXJyaWRlIGJzaXplIHRvIG1ha2UgaXQgdmFsaWRhdGUgZm9yIGV4YWN0bHlcbiAqIHRoZSBjb3JyZWN0IGxlbmd0aC5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5CeXRlcyBleHRlbmRzIFNlcmlhbGl6YWJsZSB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIk5CeXRlc1wiXG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkXG5cbiAgc2VyaWFsaXplKGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKTogb2JqZWN0IHtcbiAgICBsZXQgZmllbGRzOiBvYmplY3QgPSBzdXBlci5zZXJpYWxpemUoZW5jb2RpbmcpXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpZWxkcyxcbiAgICAgIGJzaXplOiBzZXJpYWxpemF0aW9uLmVuY29kZXIoXG4gICAgICAgIHRoaXMuYnNpemUsXG4gICAgICAgIGVuY29kaW5nLFxuICAgICAgICBcIm51bWJlclwiLFxuICAgICAgICBcImRlY2ltYWxTdHJpbmdcIixcbiAgICAgICAgNFxuICAgICAgKSxcbiAgICAgIGJ5dGVzOiBzZXJpYWxpemF0aW9uLmVuY29kZXIoXG4gICAgICAgIHRoaXMuYnl0ZXMsXG4gICAgICAgIGVuY29kaW5nLFxuICAgICAgICBcIkJ1ZmZlclwiLFxuICAgICAgICBcImhleFwiLFxuICAgICAgICB0aGlzLmJzaXplXG4gICAgICApXG4gICAgfVxuICB9XG4gIGRlc2VyaWFsaXplKGZpZWxkczogb2JqZWN0LCBlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIikge1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGZpZWxkcywgZW5jb2RpbmcpXG4gICAgdGhpcy5ic2l6ZSA9IHNlcmlhbGl6YXRpb24uZGVjb2RlcihcbiAgICAgIGZpZWxkc1tcImJzaXplXCJdLFxuICAgICAgZW5jb2RpbmcsXG4gICAgICBcImRlY2ltYWxTdHJpbmdcIixcbiAgICAgIFwibnVtYmVyXCIsXG4gICAgICA0XG4gICAgKVxuICAgIHRoaXMuYnl0ZXMgPSBzZXJpYWxpemF0aW9uLmRlY29kZXIoXG4gICAgICBmaWVsZHNbXCJieXRlc1wiXSxcbiAgICAgIGVuY29kaW5nLFxuICAgICAgXCJoZXhcIixcbiAgICAgIFwiQnVmZmVyXCIsXG4gICAgICB0aGlzLmJzaXplXG4gICAgKVxuICB9XG5cbiAgcHJvdGVjdGVkIGJ5dGVzOiBCdWZmZXJcbiAgcHJvdGVjdGVkIGJzaXplOiBudW1iZXJcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfS5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIGV4YWN0IGxlbmd0aCByZXF1aXJlbWVudCBvZiB0aGlzIGNsYXNzXG4gICAqL1xuICBnZXRTaXplID0gKCkgPT4gdGhpcy5ic2l6ZVxuXG4gIC8qKlxuICAgKiBUYWtlcyBhIGJhc2UtNTggZW5jb2RlZCBzdHJpbmcsIHZlcmlmaWVzIGl0cyBsZW5ndGgsIGFuZCBzdG9yZXMgaXQuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBzaXplIG9mIHRoZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfVxuICAgKi9cbiAgZnJvbVN0cmluZyhiNThzdHI6IHN0cmluZyk6IG51bWJlciB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZnJvbUJ1ZmZlcihiaW50b29scy5iNThUb0J1ZmZlcihiNThzdHIpKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBjb25zdCBlbXNnOiBzdHJpbmcgPSBgRXJyb3IgLSBOQnl0ZXMuZnJvbVN0cmluZzogJHtlfWBcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZW1zZylcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYnNpemVcbiAgfVxuXG4gIC8qKlxuICAgKiBUYWtlcyBhIFtbQnVmZmVyXV0sIHZlcmlmaWVzIGl0cyBsZW5ndGgsIGFuZCBzdG9yZXMgaXQuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBzaXplIG9mIHRoZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfVxuICAgKi9cbiAgZnJvbUJ1ZmZlcihidWZmOiBCdWZmZXIsIG9mZnNldDogbnVtYmVyID0gMCk6IG51bWJlciB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChidWZmLmxlbmd0aCAtIG9mZnNldCA8IHRoaXMuYnNpemUpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgdGhyb3cgbmV3IEJ1ZmZlclNpemVFcnJvcihcbiAgICAgICAgICBcIkVycm9yIC0gTkJ5dGVzLmZyb21CdWZmZXI6IG5vdCBlbm91Z2ggc3BhY2UgYXZhaWxhYmxlIGluIGJ1ZmZlci5cIlxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnl0ZXMgPSBiaW50b29scy5jb3B5RnJvbShidWZmLCBvZmZzZXQsIG9mZnNldCArIHRoaXMuYnNpemUpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGNvbnN0IGVtc2c6IHN0cmluZyA9IGBFcnJvciAtIE5CeXRlcy5mcm9tQnVmZmVyOiAke2V9YFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHRocm93IG5ldyBFcnJvcihlbXNnKVxuICAgIH1cbiAgICByZXR1cm4gb2Zmc2V0ICsgdGhpcy5ic2l6ZVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIEEgcmVmZXJlbmNlIHRvIHRoZSBzdG9yZWQge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn1cbiAgICovXG4gIHRvQnVmZmVyKCk6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuYnl0ZXNcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyBBIGJhc2UtNTggc3RyaW5nIG9mIHRoZSBzdG9yZWQge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn1cbiAgICovXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGJpbnRvb2xzLmJ1ZmZlclRvQjU4KHRoaXMudG9CdWZmZXIoKSlcbiAgfVxuXG4gIGFic3RyYWN0IGNsb25lKCk6IHRoaXNcbiAgYWJzdHJhY3QgY3JlYXRlKC4uLmFyZ3M6IGFueVtdKTogdGhpc1xufVxuIl19","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9pbmRleC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vYXBpXCJcbiJdfQ==","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECP256k1KeyChain = exports.SECP256k1KeyPair = void 0;\n/**\n * @packageDocumentation\n * @module Common-SECP256k1KeyChain\n */\nconst buffer_1 = require(\"buffer/\");\nconst elliptic = __importStar(require(\"elliptic\"));\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst keychain_1 = require(\"./keychain\");\nconst errors_1 = require(\"../utils/errors\");\nconst utils_1 = require(\"../utils\");\n/**\n * @ignore\n */\nconst EC = elliptic.ec;\n/**\n * @ignore\n */\nconst ec = new EC(\"secp256k1\");\n/**\n * @ignore\n */\nconst ecparams = ec.curve;\n/**\n * @ignore\n */\nconst BN = ecparams.n.constructor;\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for representing a private and public keypair on the Platform Chain.\n */\nclass SECP256k1KeyPair extends keychain_1.StandardKeyPair {\n    constructor(hrp, chainID) {\n        super();\n        this.chainID = \"\";\n        this.hrp = \"\";\n        this.chainID = chainID;\n        this.hrp = hrp;\n        this.generateKey();\n    }\n    /**\n     * @ignore\n     */\n    _sigFromSigBuffer(sig) {\n        const r = new BN(bintools.copyFrom(sig, 0, 32));\n        const s = new BN(bintools.copyFrom(sig, 32, 64));\n        const recoveryParam = bintools\n            .copyFrom(sig, 64, 65)\n            .readUIntBE(0, 1);\n        const sigOpt = {\n            r: r,\n            s: s,\n            recoveryParam: recoveryParam\n        };\n        return sigOpt;\n    }\n    /**\n     * Generates a new keypair.\n     */\n    generateKey() {\n        this.keypair = ec.genKeyPair();\n        // doing hex translation to get Buffer class\n        this.privk = buffer_1.Buffer.from(this.keypair.getPrivate(\"hex\").padStart(64, \"0\"), \"hex\");\n        this.pubk = buffer_1.Buffer.from(this.keypair.getPublic(true, \"hex\").padStart(66, \"0\"), \"hex\");\n    }\n    /**\n     * Imports a private key and generates the appropriate public key.\n     *\n     * @param privk A {@link https://github.com/feross/buffer|Buffer} representing the private key\n     *\n     * @returns true on success, false on failure\n     */\n    importKey(privk) {\n        this.keypair = ec.keyFromPrivate(privk.toString(\"hex\"), \"hex\");\n        // doing hex translation to get Buffer class\n        try {\n            this.privk = buffer_1.Buffer.from(this.keypair.getPrivate(\"hex\").padStart(64, \"0\"), \"hex\");\n            this.pubk = buffer_1.Buffer.from(this.keypair.getPublic(true, \"hex\").padStart(66, \"0\"), \"hex\");\n            return true; // silly I know, but the interface requires so it returns true on success, so if Buffer fails validation...\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    /**\n     * Returns the address as a {@link https://github.com/feross/buffer|Buffer}.\n     *\n     * @returns A {@link https://github.com/feross/buffer|Buffer} representation of the address\n     */\n    getAddress() {\n        return SECP256k1KeyPair.addressFromPublicKey(this.pubk);\n    }\n    /**\n     * Returns the address's string representation.\n     *\n     * @returns A string representation of the address\n     */\n    getAddressString() {\n        const addr = SECP256k1KeyPair.addressFromPublicKey(this.pubk);\n        const type = \"bech32\";\n        return serialization.bufferToType(addr, type, this.hrp, this.chainID);\n    }\n    /**\n     * Returns an address given a public key.\n     *\n     * @param pubk A {@link https://github.com/feross/buffer|Buffer} representing the public key\n     *\n     * @returns A {@link https://github.com/feross/buffer|Buffer} for the address of the public key.\n     */\n    static addressFromPublicKey(pubk) {\n        if (pubk.length === 65) {\n            /* istanbul ignore next */\n            pubk = buffer_1.Buffer.from(ec.keyFromPublic(pubk).getPublic(true, \"hex\").padStart(66, \"0\"), \"hex\"); // make compact, stick back into buffer\n        }\n        if (pubk.length === 33) {\n            const sha256 = buffer_1.Buffer.from((0, create_hash_1.default)(\"sha256\").update(pubk).digest());\n            const ripesha = buffer_1.Buffer.from((0, create_hash_1.default)(\"ripemd160\").update(sha256).digest());\n            return ripesha;\n        }\n        /* istanbul ignore next */\n        throw new errors_1.PublicKeyError(\"Unable to make address.\");\n    }\n    /**\n     * Returns a string representation of the private key.\n     *\n     * @returns A cb58 serialized string representation of the private key\n     */\n    getPrivateKeyString() {\n        return `PrivateKey-${bintools.cb58Encode(this.privk)}`;\n    }\n    /**\n     * Returns the public key.\n     *\n     * @returns A cb58 serialized string representation of the public key\n     */\n    getPublicKeyString() {\n        return bintools.cb58Encode(this.pubk);\n    }\n    /**\n     * Takes a message, signs it, and returns the signature.\n     *\n     * @param msg The message to sign, be sure to hash first if expected\n     *\n     * @returns A {@link https://github.com/feross/buffer|Buffer} containing the signature\n     */\n    sign(msg) {\n        const sigObj = this.keypair.sign(msg, undefined, {\n            canonical: true\n        });\n        const recovery = buffer_1.Buffer.alloc(1);\n        recovery.writeUInt8(sigObj.recoveryParam, 0);\n        const r = buffer_1.Buffer.from(sigObj.r.toArray(\"be\", 32)); //we have to skip native Buffer class, so this is the way\n        const s = buffer_1.Buffer.from(sigObj.s.toArray(\"be\", 32)); //we have to skip native Buffer class, so this is the way\n        const result = buffer_1.Buffer.concat([r, s, recovery], 65);\n        return result;\n    }\n    /**\n     * Verifies that the private key associated with the provided public key produces the signature associated with the given message.\n     *\n     * @param msg The message associated with the signature\n     * @param sig The signature of the signed message\n     *\n     * @returns True on success, false on failure\n     */\n    verify(msg, sig) {\n        const sigObj = this._sigFromSigBuffer(sig);\n        return ec.verify(msg, sigObj, this.keypair);\n    }\n    /**\n     * Recovers the public key of a message signer from a message and its associated signature.\n     *\n     * @param msg The message that's signed\n     * @param sig The signature that's signed on the message\n     *\n     * @returns A {@link https://github.com/feross/buffer|Buffer} containing the public key of the signer\n     */\n    recover(msg, sig) {\n        const sigObj = this._sigFromSigBuffer(sig);\n        const pubk = ec.recoverPubKey(msg, sigObj, sigObj.recoveryParam);\n        return buffer_1.Buffer.from(pubk.encodeCompressed());\n    }\n    /**\n     * Returns the chainID associated with this key.\n     *\n     * @returns The [[KeyPair]]'s chainID\n     */\n    getChainID() {\n        return this.chainID;\n    }\n    /**\n     * Sets the the chainID associated with this key.\n     *\n     * @param chainID String for the chainID\n     */\n    setChainID(chainID) {\n        this.chainID = chainID;\n    }\n    /**\n     * Returns the Human-Readable-Part of the network associated with this key.\n     *\n     * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n     */\n    getHRP() {\n        return this.hrp;\n    }\n    /**\n     * Sets the the Human-Readable-Part of the network associated with this key.\n     *\n     * @param hrp String for the Human-Readable-Part of Bech32 addresses\n     */\n    setHRP(hrp) {\n        this.hrp = hrp;\n    }\n}\nexports.SECP256k1KeyPair = SECP256k1KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam SECP256k1KeyPair Class extending [[StandardKeyPair]] which is used as the key in [[SECP256k1KeyChain]]\n */\nclass SECP256k1KeyChain extends keychain_1.StandardKeyChain {\n    addKey(newKey) {\n        super.addKey(newKey);\n    }\n}\nexports.SECP256k1KeyChain = SECP256k1KeyChain;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @packageDocumentation\n * @module AvalancheCore\n */\nconst axios_1 = __importDefault(require(\"axios\"));\nconst apibase_1 = require(\"./common/apibase\");\nconst errors_1 = require(\"./utils/errors\");\nconst fetchadapter_1 = require(\"./utils/fetchadapter\");\nconst helperfunctions_1 = require(\"./utils/helperfunctions\");\n/**\n * AvalancheCore is middleware for interacting with Avalanche node RPC APIs.\n *\n * Example usage:\n * ```js\n * let avalanche = new AvalancheCore(\"127.0.0.1\", 9650, \"https\")\n * ```\n *\n *\n */\nclass AvalancheCore {\n    /**\n     * Creates a new Avalanche instance. Sets the address and port of the main Avalanche Client.\n     *\n     * @param host The hostname to resolve to reach the Avalanche Client APIs\n     * @param port The port to resolve to reach the Avalanche Client APIs\n     * @param protocol The protocol string to use before a \"://\" in a request, ex: \"http\", \"https\", \"git\", \"ws\", etc ...\n     */\n    constructor(host, port, protocol = \"http\") {\n        this.networkID = 0;\n        this.hrp = \"\";\n        this.auth = undefined;\n        this.headers = {};\n        this.requestConfig = {};\n        this.apis = {};\n        /**\n         * Sets the address and port of the main Avalanche Client.\n         *\n         * @param host The hostname to resolve to reach the Avalanche Client RPC APIs.\n         * @param port The port to resolve to reach the Avalanche Client RPC APIs.\n         * @param protocol The protocol string to use before a \"://\" in a request,\n         * ex: \"http\", \"https\", etc. Defaults to http\n         * @param baseEndpoint the base endpoint to reach the Avalanche Client RPC APIs,\n         * ex: \"/rpc\". Defaults to \"/\"\n         * The following special characters are removed from host and protocol\n         * &#,@+()$~%'\":*?{} also less than and greater than signs\n         */\n        this.setAddress = (host, port, protocol = \"http\", baseEndpoint = \"\") => {\n            host = host.replace(/[&#,@+()$~%'\":*?<>{}]/g, \"\");\n            protocol = protocol.replace(/[&#,@+()$~%'\":*?<>{}]/g, \"\");\n            const protocols = [\"http\", \"https\"];\n            if (!protocols.includes(protocol)) {\n                /* istanbul ignore next */\n                throw new errors_1.ProtocolError(\"Error - AvalancheCore.setAddress: Invalid protocol\");\n            }\n            this.host = host;\n            this.port = port;\n            this.protocol = protocol;\n            this.baseEndpoint = baseEndpoint;\n            let url = `${protocol}://${host}`;\n            if (port != undefined && typeof port === \"number\" && port >= 0) {\n                url = `${url}:${port}`;\n            }\n            if (baseEndpoint != undefined &&\n                typeof baseEndpoint == \"string\" &&\n                baseEndpoint.length > 0) {\n                if (baseEndpoint[0] != \"/\") {\n                    baseEndpoint = `/${baseEndpoint}`;\n                }\n                url = `${url}${baseEndpoint}`;\n            }\n            this.url = url;\n        };\n        /**\n         * Returns the protocol such as \"http\", \"https\", \"git\", \"ws\", etc.\n         */\n        this.getProtocol = () => this.protocol;\n        /**\n         * Returns the host for the Avalanche node.\n         */\n        this.getHost = () => this.host;\n        /**\n         * Returns the IP for the Avalanche node.\n         */\n        this.getIP = () => this.host;\n        /**\n         * Returns the port for the Avalanche node.\n         */\n        this.getPort = () => this.port;\n        /**\n         * Returns the base endpoint for the Avalanche node.\n         */\n        this.getBaseEndpoint = () => this.baseEndpoint;\n        /**\n         * Returns the URL of the Avalanche node (ip + port)\n         */\n        this.getURL = () => this.url;\n        /**\n         * Returns the custom headers\n         */\n        this.getHeaders = () => this.headers;\n        /**\n         * Returns the custom request config\n         */\n        this.getRequestConfig = () => this.requestConfig;\n        /**\n         * Returns the networkID\n         */\n        this.getNetworkID = () => this.networkID;\n        /**\n         * Sets the networkID\n         */\n        this.setNetworkID = (netID) => {\n            this.networkID = netID;\n            this.hrp = (0, helperfunctions_1.getPreferredHRP)(this.networkID);\n        };\n        /**\n         * Returns the Human-Readable-Part of the network associated with this key.\n         *\n         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme\n         */\n        this.getHRP = () => this.hrp;\n        /**\n         * Sets the the Human-Readable-Part of the network associated with this key.\n         *\n         * @param hrp String for the Human-Readable-Part of Bech32 addresses\n         */\n        this.setHRP = (hrp) => {\n            this.hrp = hrp;\n        };\n        /**\n         * Adds a new custom header to be included with all requests.\n         *\n         * @param key Header name\n         * @param value Header value\n         */\n        this.setHeader = (key, value) => {\n            this.headers[`${key}`] = value;\n        };\n        /**\n         * Removes a previously added custom header.\n         *\n         * @param key Header name\n         */\n        this.removeHeader = (key) => {\n            delete this.headers[`${key}`];\n        };\n        /**\n         * Removes all headers.\n         */\n        this.removeAllHeaders = () => {\n            for (const prop in this.headers) {\n                if (Object.prototype.hasOwnProperty.call(this.headers, prop)) {\n                    delete this.headers[`${prop}`];\n                }\n            }\n        };\n        /**\n         * Adds a new custom config value to be included with all requests.\n         *\n         * @param key Config name\n         * @param value Config value\n         */\n        this.setRequestConfig = (key, value) => {\n            this.requestConfig[`${key}`] = value;\n        };\n        /**\n         * Removes a previously added request config.\n         *\n         * @param key Header name\n         */\n        this.removeRequestConfig = (key) => {\n            delete this.requestConfig[`${key}`];\n        };\n        /**\n         * Removes all request configs.\n         */\n        this.removeAllRequestConfigs = () => {\n            for (const prop in this.requestConfig) {\n                if (Object.prototype.hasOwnProperty.call(this.requestConfig, prop)) {\n                    delete this.requestConfig[`${prop}`];\n                }\n            }\n        };\n        /**\n         * Sets the temporary auth token used for communicating with the node.\n         *\n         * @param auth A temporary token provided by the node enabling access to the endpoints on the node.\n         */\n        this.setAuthToken = (auth) => {\n            this.auth = auth;\n        };\n        this._setHeaders = (headers) => {\n            if (typeof this.headers === \"object\") {\n                for (const [key, value] of Object.entries(this.headers)) {\n                    headers[`${key}`] = value;\n                }\n            }\n            if (typeof this.auth === \"string\") {\n                headers.Authorization = `Bearer ${this.auth}`;\n            }\n            return headers;\n        };\n        /**\n         * Adds an API to the middleware. The API resolves to a registered blockchain's RPC.\n         *\n         * In TypeScript:\n         * ```js\n         * avalanche.addAPI<MyVMClass>(\"mychain\", MyVMClass, \"/ext/bc/mychain\")\n         * ```\n         *\n         * In Javascript:\n         * ```js\n         * avalanche.addAPI(\"mychain\", MyVMClass, \"/ext/bc/mychain\")\n         * ```\n         *\n         * @typeparam GA Class of the API being added\n         * @param apiName A label for referencing the API in the future\n         * @param ConstructorFN A reference to the class which instantiates the API\n         * @param baseurl Path to resolve to reach the API\n         *\n         */\n        this.addAPI = (apiName, ConstructorFN, baseurl = undefined, ...args) => {\n            if (typeof baseurl === \"undefined\") {\n                this.apis[`${apiName}`] = new ConstructorFN(this, undefined, ...args);\n            }\n            else {\n                this.apis[`${apiName}`] = new ConstructorFN(this, baseurl, ...args);\n            }\n        };\n        /**\n         * Retrieves a reference to an API by its apiName label.\n         *\n         * @param apiName Name of the API to return\n         */\n        this.api = (apiName) => this.apis[`${apiName}`];\n        /**\n         * @ignore\n         */\n        this._request = (xhrmethod, baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let config;\n            if (axiosConfig) {\n                config = Object.assign(Object.assign({}, axiosConfig), this.requestConfig);\n            }\n            else {\n                config = Object.assign({ baseURL: this.url, responseType: \"text\" }, this.requestConfig);\n            }\n            config.url = baseurl;\n            config.method = xhrmethod;\n            config.headers = headers;\n            config.data = postdata;\n            config.params = getdata;\n            // use the fetch adapter if fetch is available e.g. non Node<17 env\n            if (typeof fetch !== \"undefined\") {\n                config.adapter = fetchadapter_1.fetchAdapter;\n            }\n            const resp = yield axios_1.default.request(config);\n            // purging all that is axios\n            const xhrdata = new apibase_1.RequestResponseData(resp.data, resp.headers, resp.status, resp.statusText, resp.request);\n            return xhrdata;\n        });\n        /**\n         * Makes a GET call to an API.\n         *\n         * @param baseurl Path to the api\n         * @param getdata Object containing the key value pairs sent in GET\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.get = (baseurl, getdata, headers = {}, axiosConfig = undefined) => this._request(\"GET\", baseurl, getdata, {}, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a DELETE call to an API.\n         *\n         * @param baseurl Path to the API\n         * @param getdata Object containing the key value pairs sent in DELETE\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.delete = (baseurl, getdata, headers = {}, axiosConfig = undefined) => this._request(\"DELETE\", baseurl, getdata, {}, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a POST call to an API.\n         *\n         * @param baseurl Path to the API\n         * @param getdata Object containing the key value pairs sent in POST\n         * @param postdata Object containing the key value pairs sent in POST\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.post = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request(\"POST\", baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a PUT call to an API.\n         *\n         * @param baseurl Path to the baseurl\n         * @param getdata Object containing the key value pairs sent in PUT\n         * @param postdata Object containing the key value pairs sent in PUT\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.put = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request(\"PUT\", baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        /**\n         * Makes a PATCH call to an API.\n         *\n         * @param baseurl Path to the baseurl\n         * @param getdata Object containing the key value pairs sent in PATCH\n         * @param postdata Object containing the key value pairs sent in PATCH\n         * @param parameters Object containing the parameters of the API call\n         * @param headers An array HTTP Request Headers\n         * @param axiosConfig Configuration for the axios javascript library that will be the\n         * foundation for the rest of the parameters\n         *\n         * @returns A promise for [[RequestResponseData]]\n         */\n        this.patch = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request(\"PATCH\", baseurl, getdata, postdata, this._setHeaders(headers), axiosConfig);\n        if (host != undefined) {\n            this.setAddress(host, port, protocol);\n        }\n    }\n}\nexports.default = AvalancheCore;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhbGFuY2hlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2F2YWxhbmNoZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBOzs7R0FHRztBQUNILGtEQUtjO0FBQ2QsOENBQStEO0FBQy9ELDJDQUE4QztBQUM5Qyx1REFBbUQ7QUFDbkQsNkRBQXlEO0FBRXpEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQXFCLGFBQWE7SUF3YmhDOzs7Ozs7T0FNRztJQUNILFlBQVksSUFBYSxFQUFFLElBQWEsRUFBRSxXQUFtQixNQUFNO1FBOWJ6RCxjQUFTLEdBQVcsQ0FBQyxDQUFBO1FBQ3JCLFFBQUcsR0FBVyxFQUFFLENBQUE7UUFPaEIsU0FBSSxHQUFXLFNBQVMsQ0FBQTtRQUN4QixZQUFPLEdBQTRCLEVBQUUsQ0FBQTtRQUNyQyxrQkFBYSxHQUF1QixFQUFFLENBQUE7UUFDdEMsU0FBSSxHQUE2QixFQUFFLENBQUE7UUFFN0M7Ozs7Ozs7Ozs7O1dBV0c7UUFDSCxlQUFVLEdBQUcsQ0FDWCxJQUFZLEVBQ1osSUFBWSxFQUNaLFdBQW1CLE1BQU0sRUFDekIsZUFBdUIsRUFBRSxFQUNuQixFQUFFO1lBQ1IsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsd0JBQXdCLEVBQUUsRUFBRSxDQUFDLENBQUE7WUFDakQsUUFBUSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLEVBQUUsRUFBRSxDQUFDLENBQUE7WUFDekQsTUFBTSxTQUFTLEdBQWEsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUE7WUFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ2pDLDBCQUEwQjtnQkFDMUIsTUFBTSxJQUFJLHNCQUFhLENBQ3JCLG9EQUFvRCxDQUNyRCxDQUFBO2FBQ0Y7WUFFRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtZQUNoQixJQUFJLENBQUMsSUFB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Q1osQ0FBQTtRQVVELElBQUksSUFBSSxJQUFJLFNBQVMsRUFBRTtZQUNyQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUE7U0FDdEM7SUFDSCxDQUFDO0NBQ0Y7QUFwY0QsZ0NBb2NDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQXZhbGFuY2hlQ29yZVxuICovXG5pbXBvcnQgYXhpb3MsIHtcbiAgQXhpb3NSZXF1ZXN0Q29uZmlnLFxuICBBeGlvc1JlcXVlc3RIZWFkZXJzLFxuICBBeGlvc1Jlc3BvbnNlLFxuICBNZXRob2Rcbn0gZnJvbSBcImF4aW9zXCJcbmltcG9ydCB7IEFQSUJhc2UsIFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tIFwiLi9jb21tb24vYXBpYmFzZVwiXG5pbXBvcnQgeyBQcm90b2NvbEVycm9yIH0gZnJvbSBcIi4vdXRpbHMvZXJyb3JzXCJcbmltcG9ydCB7IGZldGNoQWRhcHRlciB9IGZyb20gXCIuL3V0aWxzL2ZldGNoYWRhcHRlclwiXG5pbXBvcnQgeyBnZXRQcmVmZXJyZWRIUlAgfSBmcm9tIFwiLi91dGlscy9oZWxwZXJmdW5jdGlvbnNcIlxuXG4vKipcbiAqIEF2YWxhbmNoZUNvcmUgaXMgbWlkZGxld2FyZSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBBdmFsYW5jaGUgbm9kZSBSUEMgQVBJcy5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICogYGBganNcbiAqIGxldCBhdmFsYW5jaGUgPSBuZXcgQXZhbGFuY2hlQ29yZShcIjEyNy4wLjAuMVwiLCA5NjUwLCBcImh0dHBzXCIpXG4gKiBgYGBcbiAqXG4gKlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdmFsYW5jaGVDb3JlIHtcbiAgcHJvdGVjdGVkIG5ldHdvcmtJRDogbnVtYmVyID0gMFxuICBwcm90ZWN0ZWQgaHJwOiBzdHJpbmcgPSBcIlwiXG4gIHByb3RlY3RlZCBwcm90b2NvbDogc3RyaW5nXG4gIHByb3RlY3RlZCBpcDogc3RyaW5nXG4gIHByb3RlY3RlZCBob3N0OiBzdHJpbmdcbiAgcHJvdGVjdGVkIHBvcnQ6IG51bWJlclxuICBwcm90ZWN0ZWQgYmFzZUVuZHBvaW50OiBzdHJpbmdcbiAgcHJvdGVjdGVkIHVybDogc3RyaW5nXG4gIHByb3RlY3RlZCBhdXRoOiBzdHJpbmcgPSB1bmRlZmluZWRcbiAgcHJvdGVjdGVkIGhlYWRlcnM6IHsgW2s6IHN0cmluZ106IHN0cmluZyB9ID0ge31cbiAgcHJvdGVjdGVkIHJlcXVlc3RDb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHt9XG4gIHByb3RlY3RlZCBhcGlzOiB7IFtrOiBzdHJpbmddOiBBUElCYXNlIH0gPSB7fVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhZGRyZXNzIGFuZCBwb3J0IG9mIHRoZSBtYWluIEF2YWxhbmNoZSBDbGllbnQuXG4gICAqXG4gICAqIEBwYXJhbSBob3N0IFRoZSBob3N0bmFtZSB0byByZXNvbHZlIHRvIHJlYWNoIHRoZSBBdmFsYW5jaGUgQ2xpZW50IFJQQyBBUElzLlxuICAgKiBAcGFyYW0gcG9ydCBUaGUgcG9ydCB0byByZXNvbHZlIHRvIHJlYWNoIHRoZSBBdmFsYW5jaGUgQ2xpZW50IFJQQyBBUElzLlxuICAgKiBAcGFyYW0gcHJvdG9jb2wgVGhlIHByb3RvY29sIHN0cmluZyB0byB1c2UgYmVmb3JlIGEgXCI6Ly9cIiBpbiBhIHJlcXVlc3QsXG4gICAqIGV4OiBcImh0dHBcIiwgXCJodHRwc1wiLCBldGMuIERlZmF1bHRzIHRvIGh0dHBcbiAgICogQHBhcmFtIGJhc2VFbmRwb2ludCB0aGUgYmFzZSBlbmRwb2ludCB0byByZWFjaCB0aGUgQXZhbGFuY2hlIENsaWVudCBSUEMgQVBJcyxcbiAgICogZXg6IFwiL3JwY1wiLiBEZWZhdWx0cyB0byBcIi9cIlxuICAgKiBUaGUgZm9sbG93aW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhcmUgcmVtb3ZlZCBmcm9tIGhvc3QgYW5kIHByb3RvY29sXG4gICAqICYjLEArKCkkfiUnXCI6Kj97fSBhbHNvIGxlc3MgdGhhbiBhbmQgZ3JlYXRlciB0aGFuIHNpZ25zXG4gICAqL1xuICBzZXRBZGRyZXNzID0gKFxuICAgIGhvc3Q6IHN0cmluZyxcbiAgICBwb3J0OiBudW1iZXIsXG4gICAgcHJvdG9jb2w6IHN0cmluZyA9IFwiaHR0cFwiLFxuICAgIGJhc2VFbmRwb2ludDogc3RyaW5nID0gXCJcIlxuICApOiB2b2lkID0+IHtcbiAgICBob3N0ID0gaG9zdC5yZXBsYWNlKC9bJiMsQCsoKSR+JSdcIjoqPzw+e31dL2csIFwiXCIpXG4gICAgcHJvdG9jb2wgPSBwcm90b2NvbC5yZXBsYWNlKC9bJiMsQCsoKSR+JSdcIjoqPzw+e31dL2csIFwiXCIpXG4gICAgY29uc3QgcHJvdG9jb2xzOiBzdHJpbmdbXSA9IFtcImh0dHBcIiwgXCJodHRwc1wiXVxuICAgIGlmICghcHJvdG9jb2xzLmluY2x1ZGVzKHByb3RvY29sKSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHRocm93IG5ldyBQcm90b2NvbEVycm9yKFxuICAgICAgICBcIkVycm9yIC0gQXZhbGFuY2hlQ29yZS5zZXRBZGRyZXNzOiBJbnZhbGlkIHByb3RvY29sXCJcbiAgICAgIClcbiAgICB9XG5cbiAgICB0aGlzLmhvc3QgPSBob3N0XG4gICAgdGhpcy5wb3J0ID0gcG9ydFxuICAgIHRoaXMucHJvdG9jb2wgPSBwcm90b2NvbFxuICAgIHRoaXMuYmFzZUVuZHBvaW50ID0gYmFzZUVuZHBvaW50XG4gICAgbGV0IHVybDogc3RyaW5nID0gYCR7cHJvdG9jb2x9Oi8vJHtob3N0fWBcbiAgICBpZiAocG9ydCAhPSB1bmRlZmluZWQgJiYgdHlwZW9mIHBvcnQgPT09IFwibnVtYmVyXCIgJiYgcG9ydCA+PSAwKSB7XG4gICAgICB1cmwgPSBgJHt1cmx9OiR7cG9ydH1gXG4gICAgfVxuICAgIGlmIChcbiAgICAgIGJhc2VFbmRwb2ludCAhPSB1bmRlZmluZWQgJiZcbiAgICAgIHR5cGVvZiBiYXNlRW5kcG9pbnQgPT0gXCJzdHJpbmdcIiAmJlxuICAgICAgYmFzZUVuZHBvaW50Lmxlbmd0aCA+IDBcbiAgICApIHtcbiAgICAgIGlmIChiYXNlRW5kcG9pbnRbMF0gIT0gXCIvXCIpIHtcbiAgICAgICAgYmFzZUVuZHBvaW50ID0gYC8ke2Jhc2VFbmRwb2ludH1gXG4gICAgICB9XG4gICAgICB1cmwgPSBgJHt1cmx9JHtiYXNlRW5kcG9pbnR9YFxuICAgIH1cbiAgICB0aGlzLnVybCA9IHVybFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByb3RvY29sIHN1Y2ggYXMgXCJodHRwXCIsIFwiaHR0cHNcIiwgXCJnaXRcIiwgXCJ3c1wiLCBldGMuXG4gICAqL1xuICBnZXRQcm90b2NvbCA9ICgpOiBzdHJpbmcgPT4gdGhpcy5wcm90b2NvbFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBob3N0IGZvciB0aGUgQXZhbGFuY2hlIG5vZGUuXG4gICAqL1xuICBnZXRIb3N0ID0gKCk6IHN0cmluZyA9PiB0aGlzLmhvc3RcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgSVAgZm9yIHRoZSBBdmFsYW5jaGUgbm9kZS5cbiAgICovXG4gIGdldElQID0gKCk6IHN0cmluZyA9PiB0aGlzLmhvc3RcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcG9ydCBmb3IgdGhlIEF2YWxhbmNoZSBub2RlLlxuICAgKi9cbiAgZ2V0UG9ydCA9ICgpOiBudW1iZXIgPT4gdGhpcy5wb3J0XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGJhc2UgZW5kcG9pbnQgZm9yIHRoZSBBdmFsYW5jaGUgbm9kZS5cbiAgICovXG4gIGdldEJhc2VFbmRwb2ludCA9ICgpOiBzdHJpbmcgPT4gdGhpcy5iYXNlRW5kcG9pbnRcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgVVJMIG9mIHRoZSBBdmFsYW5jaGUgbm9kZSAoaXAgKyBwb3J0KVxuICAgKi9cbiAgZ2V0VVJMID0gKCk6IHN0cmluZyA9PiB0aGlzLnVybFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXN0b20gaGVhZGVyc1xuICAgKi9cbiAgZ2V0SGVhZGVycyA9ICgpOiBvYmplY3QgPT4gdGhpcy5oZWFkZXJzXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1c3RvbSByZXF1ZXN0IGNvbmZpZ1xuICAgKi9cbiAgZ2V0UmVxdWVzdENvbmZpZyA9ICgpOiBBeGlvc1JlcXVlc3RDb25maWcgPT4gdGhpcy5yZXF1ZXN0Q29uZmlnXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG5ldHdvcmtJRFxuICAgKi9cbiAgZ2V0TmV0d29ya0lEID0gKCk6IG51bWJlciA9PiB0aGlzLm5ldHdvcmtJRFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBuZXR3b3JrSURcbiAgICovXG4gIHNldE5ldHdvcmtJRCA9IChuZXRJRDogbnVtYmVyKTogdm9pZCA9PiB7XG4gICAgdGhpcy5uZXR3b3JrSUQgPSBuZXRJRFxuICAgIHRoaXMuaHJwID0gZ2V0UHJlZmVycmVkSFJQKHRoaXMubmV0d29ya0lEKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIEh1bWFuLVJlYWRhYmxlLVBhcnQgb2YgdGhlIG5ldHdvcmsgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgW1tLZXlQYWlyXV0ncyBIdW1hbi1SZWFkYWJsZS1QYXJ0IG9mIHRoZSBuZXR3b3JrJ3MgQmVjaDMyIGFkZHJlc3Npbmcgc2NoZW1lXG4gICAqL1xuICBnZXRIUlAgPSAoKTogc3RyaW5nID0+IHRoaXMuaHJwXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHRoZSBIdW1hbi1SZWFkYWJsZS1QYXJ0IG9mIHRoZSBuZXR3b3JrIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleS5cbiAgICpcbiAgICogQHBhcmFtIGhycCBTdHJpbmcgZm9yIHRoZSBIdW1hbi1SZWFkYWJsZS1QYXJ0IG9mIEJlY2gzMiBhZGRyZXNzZXNcbiAgICovXG4gIHNldEhSUCA9IChocnA6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgIHRoaXMuaHJwID0gaHJwXG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIG5ldyBjdXN0b20gaGVhZGVyIHRvIGJlIGluY2x1ZGVkIHdpdGggYWxsIHJlcXVlc3RzLlxuICAgKlxuICAgKiBAcGFyYW0ga2V5IEhlYWRlciBuYW1lXG4gICAqIEBwYXJhbSB2YWx1ZSBIZWFkZXIgdmFsdWVcbiAgICovXG4gIHNldEhlYWRlciA9IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgIHRoaXMuaGVhZGVyc1tgJHtrZXl9YF0gPSB2YWx1ZVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBwcmV2aW91c2x5IGFkZGVkIGN1c3RvbSBoZWFkZXIuXG4gICAqXG4gICAqIEBwYXJhbSBrZXkgSGVhZGVyIG5hbWVcbiAgICovXG4gIHJlbW92ZUhlYWRlciA9IChrZXk6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgIGRlbGV0ZSB0aGlzLmhlYWRlcnNbYCR7a2V5fWBdXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgaGVhZGVycy5cbiAgICovXG4gIHJlbW92ZUFsbEhlYWRlcnMgPSAoKTogdm9pZCA9PiB7XG4gICAgZm9yIChjb25zdCBwcm9wIGluIHRoaXMuaGVhZGVycykge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmhlYWRlcnMsIHByb3ApKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmhlYWRlcnNbYCR7cHJvcH1gXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgbmV3IGN1c3RvbSBjb25maWcgdmFsdWUgdG8gYmUgaW5jbHVkZWQgd2l0aCBhbGwgcmVxdWVzdHMuXG4gICAqXG4gICAqIEBwYXJhbSBrZXkgQ29uZmlnIG5hbWVcbiAgICogQHBhcmFtIHZhbHVlIENvbmZpZyB2YWx1ZVxuICAgKi9cbiAgc2V0UmVxdWVzdENvbmZpZyA9IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IGJvb2xlYW4pOiB2b2lkID0+IHtcbiAgICB0aGlzLnJlcXVlc3RDb25maWdbYCR7a2V5fWBdID0gdmFsdWVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgcHJldmlvdXNseSBhZGRlZCByZXF1ZXN0IGNvbmZpZy5cbiAgICpcbiAgICogQHBhcmFtIGtleSBIZWFkZXIgbmFtZVxuICAgKi9cbiAgcmVtb3ZlUmVxdWVzdENvbmZpZyA9IChrZXk6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgIGRlbGV0ZSB0aGlzLnJlcXVlc3RDb25maWdbYCR7a2V5fWBdXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgcmVxdWVzdCBjb25maWdzLlxuICAgKi9cbiAgcmVtb3ZlQWxsUmVxdWVzdENvbmZpZ3MgPSAoKTogdm9pZCA9PiB7XG4gICAgZm9yIChjb25zdCBwcm9wIGluIHRoaXMucmVxdWVzdENvbmZpZykge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnJlcXVlc3RDb25maWcsIHByb3ApKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnJlcXVlc3RDb25maWdbYCR7cHJvcH1gXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0ZW1wb3JhcnkgYXV0aCB0b2tlbiB1c2VkIGZvciBjb21tdW5pY2F0aW5nIHdpdGggdGhlIG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSBhdXRoIEEgdGVtcG9yYXJ5IHRva2VuIHByb3ZpZGVkIGJ5IHRoZSBub2RlIGVuYWJsaW5nIGFjY2VzcyB0byB0aGUgZW5kcG9pbnRzIG9uIHRoZSBub2RlLlxuICAgKi9cbiAgc2V0QXV0aFRva2VuID0gKGF1dGg6IHN0cmluZyk6IHZvaWQgPT4ge1xuICAgIHRoaXMuYXV0aCA9IGF1dGhcbiAgfVxuXG4gIHByb3RlY3RlZCBfc2V0SGVhZGVycyA9IChoZWFkZXJzOiBhbnkpOiBBeGlvc1JlcXVlc3RIZWFkZXJzID0+IHtcbiAgICBpZiAodHlwZW9mIHRoaXMuaGVhZGVycyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5oZWFkZXJzKSkge1xuICAgICAgICBoZWFkZXJzW2Ake2tleX1gXSA9IHZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0aGlzLmF1dGggPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IGBCZWFyZXIgJHt0aGlzLmF1dGh9YFxuICAgIH1cbiAgICByZXR1cm4gaGVhZGVyc1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYW4gQVBJIHRvIHRoZSBtaWRkbGV3YXJlLiBUaGUgQVBJIHJlc29sdmVzIHRvIGEgcmVnaXN0ZXJlZCBibG9ja2NoYWluJ3MgUlBDLlxuICAgKlxuICAgKiBJbiBUeXBlU2NyaXB0OlxuICAgKiBgYGBqc1xuICAgKiBhdmFsYW5jaGUuYWRkQVBJPE15Vk1DbGFzcz4oXCJteWNoYWluXCIsIE15Vk1DbGFzcywgXCIvZXh0L2JjL215Y2hhaW5cIilcbiAgICogYGBgXG4gICAqXG4gICAqIEluIEphdmFzY3JpcHQ6XG4gICAqIGBgYGpzXG4gICAqIGF2YWxhbmNoZS5hZGRBUEkoXCJteWNoYWluXCIsIE15Vk1DbGFzcywgXCIvZXh0L2JjL215Y2hhaW5cIilcbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlcGFyYW0gR0EgQ2xhc3Mgb2YgdGhlIEFQSSBiZWluZyBhZGRlZFxuICAgKiBAcGFyYW0gYXBpTmFtZSBBIGxhYmVsIGZvciByZWZlcmVuY2luZyB0aGUgQVBJIGluIHRoZSBmdXR1cmVcbiAgICogQHBhcmFtIENvbnN0cnVjdG9yRk4gQSByZWZlcmVuY2UgdG8gdGhlIGNsYXNzIHdoaWNoIGluc3RhbnRpYXRlcyB0aGUgQVBJXG4gICAqIEBwYXJhbSBiYXNldXJsIFBhdGggdG8gcmVzb2x2ZSB0byByZWFjaCB0aGUgQVBJXG4gICAqXG4gICAqL1xuICBhZGRBUEkgPSA8R0EgZXh0ZW5kcyBBUElCYXNlPihcbiAgICBhcGlOYW1lOiBzdHJpbmcsXG4gICAgQ29uc3RydWN0b3JGTjogbmV3IChcbiAgICAgIGF2YXg6IEF2YWxhbmNoZUNvcmUsXG4gICAgICBiYXNldXJsPzogc3RyaW5nLFxuICAgICAgLi4uYXJnczogYW55W11cbiAgICApID0+IEdBLFxuICAgIGJhc2V1cmw6IHN0cmluZyA9IHVuZGVmaW5lZCxcbiAgICAuLi5hcmdzOiBhbnlbXVxuICApID0+IHtcbiAgICBpZiAodHlwZW9mIGJhc2V1cmwgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMuYXBpc1tgJHthcGlOYW1lfWBdID0gbmV3IENvbnN0cnVjdG9yRk4odGhpcywgdW5kZWZpbmVkLCAuLi5hcmdzKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFwaXNbYCR7YXBpTmFtZX1gXSA9IG5ldyBDb25zdHJ1Y3RvckZOKHRoaXMsIGJhc2V1cmwsIC4uLmFyZ3MpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhIHJlZmVyZW5jZSB0byBhbiBBUEkgYnkgaXRzIGFwaU5hbWUgbGFiZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhcGlOYW1lIE5hbWUgb2YgdGhlIEFQSSB0byByZXR1cm5cbiAgICovXG4gIGFwaSA9IDxHQSBleHRlbmRzIEFQSUJhc2U+KGFwaU5hbWU6IHN0cmluZyk6IEdBID0+XG4gICAgdGhpcy5hcGlzW2Ake2FwaU5hbWV9YF0gYXMgR0FcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcHJvdGVjdGVkIF9yZXF1ZXN0ID0gYXN5bmMgKFxuICAgIHhocm1ldGhvZDogTWV0aG9kLFxuICAgIGJhc2V1cmw6IHN0cmluZyxcbiAgICBnZXRkYXRhOiBvYmplY3QsXG4gICAgcG9zdGRhdGE6IHN0cmluZyB8IG9iamVjdCB8IEFycmF5QnVmZmVyIHwgQXJyYXlCdWZmZXJWaWV3LFxuICAgIGhlYWRlcnM6IEF4aW9zUmVxdWVzdEhlYWRlcnMgPSB7fSxcbiAgICBheGlvc0NvbmZpZzogQXhpb3NSZXF1ZXN0Q29uZmlnID0gdW5kZWZpbmVkXG4gICk6IFByb21pc2U8UmVxdWVzdFJlc3BvbnNlRGF0YT4gPT4ge1xuICAgIGxldCBjb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZ1xuICAgIGlmIChheGlvc0NvbmZpZykge1xuICAgICAgY29uZmlnID0ge1xuICAgICAgICAuLi5heGlvc0NvbmZpZyxcbiAgICAgICAgLi4udGhpcy5yZXF1ZXN0Q29uZmlnXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZyA9IHtcbiAgICAgICAgYmFzZVVSTDogdGhpcy51cmwsXG4gICAgICAgIHJlc3BvbnNlVHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgIC4uLnRoaXMucmVxdWVzdENvbmZpZ1xuICAgICAgfVxuICAgIH1cbiAgICBjb25maWcudXJsID0gYmFzZXVybFxuICAgIGNvbmZpZy5tZXRob2QgPSB4aHJtZXRob2RcbiAgICBjb25maWcuaGVhZGVycyA9IGhlYWRlcnNcbiAgICBjb25maWcuZGF0YSA9IHBvc3RkYXRhXG4gICAgY29uZmlnLnBhcmFtcyA9IGdldGRhdGFcbiAgICAvLyB1c2UgdGhlIGZldGNoIGFkYXB0ZXIgaWYgZmV0Y2ggaXMgYXZhaWxhYmxlIGUuZy4gbm9uIE5vZGU8MTcgZW52XG4gICAgaWYgKHR5cGVvZiBmZXRjaCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY29uZmlnLmFkYXB0ZXIgPSBmZXRjaEFkYXB0ZXJcbiAgICB9XG4gICAgY29uc3QgcmVzcDogQXhpb3NSZXNwb25zZTxhbnk+ID0gYXdhaXQgYXhpb3MucmVxdWVzdChjb25maWcpXG4gICAgLy8gcHVyZ2luZyBhbGwgdGhhdCBpcyBheGlvc1xuICAgIGNvbnN0IHhocmRhdGE6IFJlcXVlc3RSZXNwb25zZURhdGEgPSBuZXcgUmVxdWVzdFJlc3BvbnNlRGF0YShcbiAgICAgIHJlc3AuZGF0YSxcbiAgICAgIHJlc3AuaGVhZGVycyxcbiAgICAgIHJlc3Auc3RhdHVzLFxuICAgICAgcmVzcC5zdGF0dXNUZXh0LFxuICAgICAgcmVzcC5yZXF1ZXN0XG4gICAgKVxuICAgIHJldHVybiB4aHJkYXRhXG4gIH1cblxuICAvKipcbiAgICogTWFrZXMgYSBHRVQgY2FsbCB0byBhbiBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSBiYXNldXJsIFBhdGggdG8gdGhlIGFwaVxuICAgKiBAcGFyYW0gZ2V0ZGF0YSBPYmplY3QgY29udGFpbmluZyB0aGUga2V5IHZhbHVlIHBhaXJzIHNlbnQgaW4gR0VUXG4gICAqIEBwYXJhbSBoZWFkZXJzIEFuIGFycmF5IEhUVFAgUmVxdWVzdCBIZWFkZXJzXG4gICAqIEBwYXJhbSBheGlvc0NvbmZpZyBDb25maWd1cmF0aW9uIGZvciB0aGUgYXhpb3MgamF2YXNjcmlwdCBsaWJyYXJ5IHRoYXQgd2lsbCBiZSB0aGVcbiAgICogZm91bmRhdGlvbiBmb3IgdGhlIHJlc3Qgb2YgdGhlIHBhcmFtZXRlcnNcbiAgICpcbiAgICogQHJldHVybnMgQSBwcm9taXNlIGZvciBbW1JlcXVlc3RSZXNwb25zZURhdGFdXVxuICAgKi9cbiAgZ2V0ID0gKFxuICAgIGJhc2V1cmw6IHN0cmluZyxcbiAgICBnZXRkYXRhOiBvYmplY3QsXG4gICAgaGVhZGVyczogb2JqZWN0ID0ge30sXG4gICAgYXhpb3NDb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHVuZGVmaW5lZFxuICApOiBQcm9taXNlPFJlcXVlc3RSZXNwb25zZURhdGE+ID0+XG4gICAgdGhpcy5fcmVxdWVzdChcbiAgICAgIFwiR0VUXCIsXG4gICAgICBiYXNldXJsLFxuICAgICAgZ2V0ZGF0YSxcbiAgICAgIHt9LFxuICAgICAgdGhpcy5fc2V0SGVhZGVycyhoZWFkZXJzKSxcbiAgICAgIGF4aW9zQ29uZmlnXG4gICAgKVxuXG4gIC8qKlxuICAgKiBNYWtlcyBhIERFTEVURSBjYWxsIHRvIGFuIEFQSS5cbiAgICpcbiAgICogQHBhcmFtIGJhc2V1cmwgUGF0aCB0byB0aGUgQVBJXG4gICAqIEBwYXJhbSBnZXRkYXRhIE9iamVjdCBjb250YWluaW5nIHRoZSBrZXkgdmFsdWUgcGFpcnMgc2VudCBpbiBERUxFVEVcbiAgICogQHBhcmFtIGhlYWRlcnMgQW4gYXJyYXkgSFRUUCBSZXF1ZXN0IEhlYWRlcnNcbiAgICogQHBhcmFtIGF4aW9zQ29uZmlnIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBheGlvcyBqYXZhc2NyaXB0IGxpYnJhcnkgdGhhdCB3aWxsIGJlIHRoZVxuICAgKiBmb3VuZGF0aW9uIGZvciB0aGUgcmVzdCBvZiB0aGUgcGFyYW1ldGVyc1xuICAgKlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgZm9yIFtbUmVxdWVzdFJlc3BvbnNlRGF0YV1dXG4gICAqL1xuICBkZWxldGUgPSAoXG4gICAgYmFzZXVybDogc3RyaW5nLFxuICAgIGdldGRhdGE6IG9iamVjdCxcbiAgICBoZWFkZXJzOiBvYmplY3QgPSB7fSxcbiAgICBheGlvc0NvbmZpZzogQXhpb3NSZXF1ZXN0Q29uZmlnID0gdW5kZWZpbmVkXG4gICk6IFByb21pc2U8UmVxdWVzdFJlc3BvbnNlRGF0YT4gPT5cbiAgICB0aGlzLl9yZXF1ZXN0KFxuICAgICAgXCJERUxFVEVcIixcbiAgICAgIGJhc2V1cmwsXG4gICAgICBnZXRkYXRhLFxuICAgICAge30sXG4gICAgICB0aGlzLl9zZXRIZWFkZXJzKGhlYWRlcnMpLFxuICAgICAgYXhpb3NDb25maWdcbiAgICApXG5cbiAgLyoqXG4gICAqIE1ha2VzIGEgUE9TVCBjYWxsIHRvIGFuIEFQSS5cbiAgICpcbiAgICogQHBhcmFtIGJhc2V1cmwgUGF0aCB0byB0aGUgQVBJXG4gICAqIEBwYXJhbSBnZXRkYXRhIE9iamVjdCBjb250YWluaW5nIHRoZSBrZXkgdmFsdWUgcGFpcnMgc2VudCBpbiBQT1NUXG4gICAqIEBwYXJhbSBwb3N0ZGF0YSBPYmplY3QgY29udGFpbmluZyB0aGUga2V5IHZhbHVlIHBhaXJzIHNlbnQgaW4gUE9TVFxuICAgKiBAcGFyYW0gaGVhZGVycyBBbiBhcnJheSBIVFRQIFJlcXVlc3QgSGVhZGVyc1xuICAgKiBAcGFyYW0gYXhpb3NDb25maWcgQ29uZmlndXJhdGlvbiBmb3IgdGhlIGF4aW9zIGphdmFzY3JpcHQgbGlicmFyeSB0aGF0IHdpbGwgYmUgdGhlXG4gICAqIGZvdW5kYXRpb24gZm9yIHRoZSByZXN0IG9mIHRoZSBwYXJhbWV0ZXJzXG4gICAqXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSBmb3IgW1tSZXF1ZXN0UmVzcG9uc2VEYXRhXV1cbiAgICovXG4gIHBvc3QgPSAoXG4gICAgYmFzZXVybDogc3RyaW5nLFxuICAgIGdldGRhdGE6IG9iamVjdCxcbiAgICBwb3N0ZGF0YTogc3RyaW5nIHwgb2JqZWN0IHwgQXJyYXlCdWZmZXIgfCBBcnJheUJ1ZmZlclZpZXcsXG4gICAgaGVhZGVyczogb2JqZWN0ID0ge30sXG4gICAgYXhpb3NDb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHVuZGVmaW5lZFxuICApOiBQcm9taXNlPFJlcXVlc3RSZXNwb25zZURhdGE+ID0+XG4gICAgdGhpcy5fcmVxdWVzdChcbiAgICAgIFwiUE9TVFwiLFxuICAgICAgYmFzZXVybCxcbiAgICAgIGdldGRhdGEsXG4gICAgICBwb3N0ZGF0YSxcbiAgICAgIHRoaXMuX3NldEhlYWRlcnMoaGVhZGVycyksXG4gICAgICBheGlvc0NvbmZpZ1xuICAgIClcblxuICAvKipcbiAgICogTWFrZXMgYSBQVVQgY2FsbCB0byBhbiBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSBiYXNldXJsIFBhdGggdG8gdGhlIGJhc2V1cmxcbiAgICogQHBhcmFtIGdldGRhdGEgT2JqZWN0IGNvbnRhaW5pbmcgdGhlIGtleSB2YWx1ZSBwYWlycyBzZW50IGluIFBVVFxuICAgKiBAcGFyYW0gcG9zdGRhdGEgT2JqZWN0IGNvbnRhaW5pbmcgdGhlIGtleSB2YWx1ZSBwYWlycyBzZW50IGluIFBVVFxuICAgKiBAcGFyYW0gaGVhZGVycyBBbiBhcnJheSBIVFRQIFJlcXVlc3QgSGVhZGVyc1xuICAgKiBAcGFyYW0gYXhpb3NDb25maWcgQ29uZmlndXJhdGlvbiBmb3IgdGhlIGF4aW9zIGphdmFzY3JpcHQgbGlicmFyeSB0aGF0IHdpbGwgYmUgdGhlXG4gICAqIGZvdW5kYXRpb24gZm9yIHRoZSByZXN0IG9mIHRoZSBwYXJhbWV0ZXJzXG4gICAqXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSBmb3IgW1tSZXF1ZXN0UmVzcG9uc2VEYXRhXV1cbiAgICovXG4gIHB1dCA9IChcbiAgICBiYXNldXJsOiBzdHJpbmcsXG4gICAgZ2V0ZGF0YTogb2JqZWN0LFxuICAgIHBvc3RkYXRhOiBzdHJpbmcgfCBvYmplY3QgfCBBcnJheUJ1ZmZlciB8IEFycmF5QnVmZmVyVmlldyxcbiAgICBoZWFkZXJzOiBvYmplY3QgPSB7fSxcbiAgICBheGlvc0NvbmZpZzogQXhpb3NSZXF1ZXN0Q29uZmlnID0gdW5kZWZpbmVkXG4gICk6IFByb21pc2U8UmVxdWVzdFJlc3BvbnNlRGF0YT4gPT5cbiAgICB0aGlzLl9yZXF1ZXN0KFxuICAgICAgXCJQVVRcIixcbiAgICAgIGJhc2V1cmwsXG4gICAgICBnZXRkYXRhLFxuICAgICAgcG9zdGRhdGEsXG4gICAgICB0aGlzLl9zZXRIZWFkZXJzKGhlYWRlcnMpLFxuICAgICAgYXhpb3NDb25maWdcbiAgICApXG5cbiAgLyoqXG4gICAqIE1ha2VzIGEgUEFUQ0ggY2FsbCB0byBhbiBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSBiYXNldXJsIFBhdGggdG8gdGhlIGJhc2V1cmxcbiAgICogQHBhcmFtIGdldGRhdGEgT2JqZWN0IGNvbnRhaW5pbmcgdGhlIGtleSB2YWx1ZSBwYWlycyBzZW50IGluIFBBVENIXG4gICAqIEBwYXJhbSBwb3N0ZGF0YSBPYmplY3QgY29udGFpbmluZyB0aGUga2V5IHZhbHVlIHBhaXJzIHNlbnQgaW4gUEFUQ0hcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgT2JqZWN0IGNvbnRhaW5pbmcgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIEFQSSBjYWxsXG4gICAqIEBwYXJhbSBoZWFkZXJzIEFuIGFycmF5IEhUVFAgUmVxdWVzdCBIZWFkZXJzXG4gICAqIEBwYXJhbSBheGlvc0NvbmZpZyBDb25maWd1cmF0aW9uIGZvciB0aGUgYXhpb3MgamF2YXNjcmlwdCBsaWJyYXJ5IHRoYXQgd2lsbCBiZSB0aGVcbiAgICogZm91bmRhdGlvbiBmb3IgdGhlIHJlc3Qgb2YgdGhlIHBhcmFtZXRlcnNcbiAgICpcbiAgICogQHJldHVybnMgQSBwcm9taXNlIGZvciBbW1JlcXVlc3RSZXNwb25zZURhdGFdXVxuICAgKi9cbiAgcGF0Y2ggPSAoXG4gICAgYmFzZXVybDogc3RyaW5nLFxuICAgIGdldGRhdGE6IG9iamVjdCxcbiAgICBwb3N0ZGF0YTogc3RyaW5nIHwgb2JqZWN0IHwgQXJyYXlCdWZmZXIgfCBBcnJheUJ1ZmZlclZpZXcsXG4gICAgaGVhZGVyczogb2JqZWN0ID0ge30sXG4gICAgYXhpb3NDb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHVuZGVmaW5lZFxuICApOiBQcm9taXNlPFJlcXVlc3RSZXNwb25zZURhdGE+ID0+XG4gICAgdGhpcy5fcmVxdWVzdChcbiAgICAgIFwiUEFUQ0hcIixcbiAgICAgIGJhc2V1cmwsXG4gICAgICBnZXRkYXRhLFxuICAgICAgcG9zdGRhdGEsXG4gICAgICB0aGlzLl9zZXRIZWFkZXJzKGhlYWRlcnMpLFxuICAgICAgYXhpb3NDb25maWdcbiAgICApXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgQXZhbGFuY2hlIGluc3RhbmNlLiBTZXRzIHRoZSBhZGRyZXNzIGFuZCBwb3J0IG9mIHRoZSBtYWluIEF2YWxhbmNoZSBDbGllbnQuXG4gICAqXG4gICAqIEBwYXJhbSBob3N0IFRoZSBob3N0bmFtZSB0byByZXNvbHZlIHRvIHJlYWNoIHRoZSBBdmFsYW5jaGUgQ2xpZW50IEFQSXNcbiAgICogQHBhcmFtIHBvcnQgVGhlIHBvcnQgdG8gcmVzb2x2ZSB0byByZWFjaCB0aGUgQXZhbGFuY2hlIENsaWVudCBBUElzXG4gICAqIEBwYXJhbSBwcm90b2NvbCBUaGUgcHJvdG9jb2wgc3RyaW5nIHRvIHVzZSBiZWZvcmUgYSBcIjovL1wiIGluIGEgcmVxdWVzdCwgZXg6IFwiaHR0cFwiLCBcImh0dHBzXCIsIFwiZ2l0XCIsIFwid3NcIiwgZXRjIC4uLlxuICAgKi9cbiAgY29uc3RydWN0b3IoaG9zdD86IHN0cmluZywgcG9ydD86IG51bWJlciwgcHJvdG9jb2w6IHN0cmluZyA9IFwiaHR0cFwiKSB7XG4gICAgaWYgKGhvc3QgIT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnNldEFkZHJlc3MoaG9zdCwgcG9ydCwgcHJvdG9jb2wpXG4gICAgfVxuICB9XG59XG4iXX0=","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HealthAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node API that is using the node's HealthApi.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass HealthAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/health\" as the path to rpc's baseURL\n     */\n    constructor(core, baseURL = \"/ext/health\") {\n        super(core, baseURL);\n        /**\n         *\n         * @returns Promise for a [[HealthResponse]]\n         */\n        this.health = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"health.health\");\n            return response.data.result;\n        });\n    }\n}\nexports.HealthAPI = HealthAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvaGVhbHRoL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFLQSxrREFBOEM7QUFJOUM7Ozs7OztHQU1HO0FBQ0gsTUFBYSxTQUFVLFNBQVEsaUJBQU87SUFVcEM7Ozs7O09BS0c7SUFDSCxZQUFZLElBQW1CLEVBQUUsVUFBa0IsYUFBYTtRQUM5RCxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBaEJ0Qjs7O1dBR0c7UUFDSCxXQUFNLEdBQUcsR0FBa0MsRUFBRTtZQUMzQyxNQUFNLFFBQVEsR0FBd0IsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFBO1lBQzVFLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUE7UUFDN0IsQ0FBQyxDQUFBLENBQUE7SUFVRCxDQUFDO0NBQ0Y7QUFuQkQsOEJBbUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUhlYWx0aFxuICovXG5pbXBvcnQgQXZhbGFuY2hlQ29yZSBmcm9tIFwiLi4vLi4vYXZhbGFuY2hlXCJcbmltcG9ydCB7IEpSUENBUEkgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2pycGNhcGlcIlxuaW1wb3J0IHsgUmVxdWVzdFJlc3BvbnNlRGF0YSB9IGZyb20gXCIuLi8uLi9jb21tb24vYXBpYmFzZVwiXG5pbXBvcnQgeyBIZWFsdGhSZXNwb25zZSB9IGZyb20gXCIuL2ludGVyZmFjZXNcIlxuXG4vKipcbiAqIENsYXNzIGZvciBpbnRlcmFjdGluZyB3aXRoIGEgbm9kZSBBUEkgdGhhdCBpcyB1c2luZyB0aGUgbm9kZSdzIEhlYWx0aEFwaS5cbiAqXG4gKiBAY2F0ZWdvcnkgUlBDQVBJc1xuICpcbiAqIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tKUlBDQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuIEluc3RlYWQsIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV0gZnVuY3Rpb24gdG8gcmVnaXN0ZXIgdGhpcyBpbnRlcmZhY2Ugd2l0aCBBdmFsYW5jaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBIZWFsdGhBUEkgZXh0ZW5kcyBKUlBDQVBJIHtcbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIFByb21pc2UgZm9yIGEgW1tIZWFsdGhSZXNwb25zZV1dXG4gICAqL1xuICBoZWFsdGggPSBhc3luYyAoKTogUHJvbWlzZTxIZWFsdGhSZXNwb25zZT4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFwiaGVhbHRoLmhlYWx0aFwiKVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhLnJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuIEluc3RlYWQgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSBjb3JlIEEgcmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgY2xhc3NcbiAgICogQHBhcmFtIGJhc2VVUkwgRGVmYXVsdHMgdG8gdGhlIHN0cmluZyBcIi9leHQvaGVhbHRoXCIgYXMgdGhlIHBhdGggdG8gcnBjJ3MgYmFzZVVSTFxuICAgKi9cbiAgY29uc3RydWN0b3IoY29yZTogQXZhbGFuY2hlQ29yZSwgYmFzZVVSTDogc3RyaW5nID0gXCIvZXh0L2hlYWx0aFwiKSB7XG4gICAgc3VwZXIoY29yZSwgYmFzZVVSTClcbiAgfVxufVxuIl19","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateSubnetTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-CreateSubnetTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_1 = require(\"./constants\");\nconst constants_2 = require(\"../../utils/constants\");\nconst outputs_1 = require(\"./outputs\");\nconst errors_1 = require(\"../../utils/errors\");\nclass CreateSubnetTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Create Subnet transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param subnetOwners Optional [[SECPOwnerOutput]] class for specifying who owns the subnet.\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, subnetOwners = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"CreateSubnetTx\";\n        this._typeID = constants_1.PlatformVMConstants.CREATESUBNETTX;\n        this.subnetOwners = undefined;\n        this.subnetOwners = subnetOwners;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { subnetOwners: this.subnetOwners.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.subnetOwners = new outputs_1.SECPOwnerOutput();\n        this.subnetOwners.deserialize(fields[\"subnetOwners\"], encoding);\n    }\n    /**\n     * Returns the id of the [[CreateSubnetTx]]\n     */\n    getTxType() {\n        return this._typeID;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the reward address.\n     */\n    getSubnetOwners() {\n        return this.subnetOwners;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[CreateSubnetTx]], parses it, populates the class, and returns the length of the [[CreateSubnetTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[CreateSubnetTx]]\n     * @param offset A number for the starting position in the bytes.\n     *\n     * @returns The length of the raw [[CreateSubnetTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        offset += 4;\n        this.subnetOwners = new outputs_1.SECPOwnerOutput();\n        offset = this.subnetOwners.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateSubnetTx]].\n     */\n    toBuffer() {\n        if (typeof this.subnetOwners === \"undefined\" ||\n            !(this.subnetOwners instanceof outputs_1.SECPOwnerOutput)) {\n            throw new errors_1.SubnetOwnerError(\"CreateSubnetTx.toBuffer -- this.subnetOwners is not a SECPOwnerOutput\");\n        }\n        let typeID = buffer_1.Buffer.alloc(4);\n        typeID.writeUInt32BE(this.subnetOwners.getOutputID(), 0);\n        let barr = [\n            super.toBuffer(),\n            typeID,\n            this.subnetOwners.toBuffer()\n        ];\n        return buffer_1.Buffer.concat(barr);\n    }\n}\nexports.CreateSubnetTx = CreateSubnetTx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlc3VibmV0dHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2NyZWF0ZXN1Ym5ldHR4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7R0FHRztBQUNILG9DQUFnQztBQUNoQyxxQ0FBaUM7QUFDakMsMkNBQWlEO0FBQ2pELHFEQUF3RDtBQUN4RCx1Q0FBK0Q7QUFHL0QsK0NBQXFEO0FBRXJELE1BQWEsY0FBZSxTQUFRLGVBQU07SUF5RXhDOzs7Ozs7Ozs7T0FTRztJQUNILFlBQ0UsWUFBb0IsNEJBQWdCLEVBQ3BDLGVBQXVCLGVBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUMzQyxPQUE2QixTQUFTLEVBQ3RDLE1BQTJCLFNBQVMsRUFDcEMsT0FBZSxTQUFTLEVBQ3hCLGVBQWdDLFNBQVM7UUFFekMsS0FBSyxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQTFGdkMsY0FBUyxHQUFHLGdCQUFnQixDQUFBO1FBQzVCLFlBQU8sR0FBRywrQkFBbUIsQ0FBQyxjQUFjLENBQUE7UUFlNUMsaUJBQVksR0FBb0IsU0FBUyxDQUFBO1FBMkVqRCxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQTtJQUNsQyxDQUFDO0lBekZELFNBQVMsQ0FBQyxXQUErQixLQUFLO1FBQzVDLElBQUksTUFBTSxHQUFXLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDOUMsdUNBQ0ssTUFBTSxLQUNULFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFDcEQ7SUFDSCxDQUFDO0lBQ0QsV0FBVyxDQUFDLE1BQWMsRUFBRSxXQUErQixLQUFLO1FBQzlELEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ25DLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSx5QkFBZSxFQUFFLENBQUE7UUFDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ2pFLENBQUM7SUFJRDs7T0FFRztJQUNILFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDckIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQTtJQUMxQixDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0gsVUFBVSxDQUFDLEtBQWEsRUFBRSxTQUFpQixDQUFDO1FBQzFDLE1BQU0sR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUN4QyxNQUFNLElBQUksQ0FBQyxDQUFBO1FBQ1gsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLHlCQUFlLEVBQUUsQ0FBQTtRQUN6QyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQ3BELE9BQU8sTUFBTSxDQUFBO0lBQ2YsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNOLElBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxLQUFLLFdBQVc7WUFDeEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLFlBQVkseUJBQWUsQ0FBQyxFQUMvQztZQUNBLE1BQU0sSUFBSSx5QkFBZ0IsQ0FDeEIsdUVBQXVFLENBQ3hFLENBQUE7U0FDRjtRQUNELElBQUksTUFBTSxHQUFXLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDcEMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3hELElBQUksSUFBSSxHQUFhO1lBQ25CLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDaEIsTUFBTTtZQUNOLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFO1NBQzdCLENBQUE7UUFDRCxPQUFPLGVBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDNUIsQ0FBQztDQXVCRjtBQTlGRCx3Q0E4RkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktUGxhdGZvcm1WTS1DcmVhdGVTdWJuZXRUeFxuICovXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5pbXBvcnQgeyBCYXNlVHggfSBmcm9tIFwiLi9iYXNldHhcIlxuaW1wb3J0IHsgUGxhdGZvcm1WTUNvbnN0YW50cyB9IGZyb20gXCIuL2NvbnN0YW50c1wiXG5pbXBvcnQgeyBEZWZhdWx0TmV0d29ya0lEIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2NvbnN0YW50c1wiXG5pbXBvcnQgeyBUcmFuc2ZlcmFibGVPdXRwdXQsIFNFQ1BPd25lck91dHB1dCB9IGZyb20gXCIuL291dHB1dHNcIlxuaW1wb3J0IHsgVHJhbnNmZXJhYmxlSW5wdXQgfSBmcm9tIFwiLi9pbnB1dHNcIlxuaW1wb3J0IHsgU2VyaWFsaXplZEVuY29kaW5nIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3NlcmlhbGl6YXRpb25cIlxuaW1wb3J0IHsgU3VibmV0T3duZXJFcnJvciB9IGZyb20gXCIuLi8uLi91dGlscy9lcnJvcnNcIlxuXG5leHBvcnQgY2xhc3MgQ3JlYXRlU3VibmV0VHggZXh0ZW5kcyBCYXNlVHgge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJDcmVhdGVTdWJuZXRUeFwiXG4gIHByb3RlY3RlZCBfdHlwZUlEID0gUGxhdGZvcm1WTUNvbnN0YW50cy5DUkVBVEVTVUJORVRUWFxuXG4gIHNlcmlhbGl6ZShlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIik6IG9iamVjdCB7XG4gICAgbGV0IGZpZWxkczogb2JqZWN0ID0gc3VwZXIuc2VyaWFsaXplKGVuY29kaW5nKVxuICAgIHJldHVybiB7XG4gICAgICAuLi5maWVsZHMsXG4gICAgICBzdWJuZXRPd25lcnM6IHRoaXMuc3VibmV0T3duZXJzLnNlcmlhbGl6ZShlbmNvZGluZylcbiAgICB9XG4gIH1cbiAgZGVzZXJpYWxpemUoZmllbGRzOiBvYmplY3QsIGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKSB7XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZmllbGRzLCBlbmNvZGluZylcbiAgICB0aGlzLnN1Ym5ldE93bmVycyA9IG5ldyBTRUNQT3duZXJPdXRwdXQoKVxuICAgIHRoaXMuc3VibmV0T3duZXJzLmRlc2VyaWFsaXplKGZpZWxkc1tcInN1Ym5ldE93bmVyc1wiXSwgZW5jb2RpbmcpXG4gIH1cblxuICBwcm90ZWN0ZWQgc3VibmV0T3duZXJzOiBTRUNQT3duZXJPdXRwdXQgPSB1bmRlZmluZWRcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaWQgb2YgdGhlIFtbQ3JlYXRlU3VibmV0VHhdXVxuICAgKi9cbiAgZ2V0VHhUeXBlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJRFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBmb3IgdGhlIHJld2FyZCBhZGRyZXNzLlxuICAgKi9cbiAgZ2V0U3VibmV0T3duZXJzKCk6IFNFQ1BPd25lck91dHB1dCB7XG4gICAgcmV0dXJuIHRoaXMuc3VibmV0T3duZXJzXG4gIH1cblxuICAvKipcbiAgICogVGFrZXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBjb250YWluaW5nIGFuIFtbQ3JlYXRlU3VibmV0VHhdXSwgcGFyc2VzIGl0LCBwb3B1bGF0ZXMgdGhlIGNsYXNzLCBhbmQgcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBbW0NyZWF0ZVN1Ym5ldFR4XV0gaW4gYnl0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBieXRlcyBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYSByYXcgW1tDcmVhdGVTdWJuZXRUeF1dXG4gICAqIEBwYXJhbSBvZmZzZXQgQSBudW1iZXIgZm9yIHRoZSBzdGFydGluZyBwb3NpdGlvbiBpbiB0aGUgYnl0ZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBsZW5ndGggb2YgdGhlIHJhdyBbW0NyZWF0ZVN1Ym5ldFR4XV1cbiAgICpcbiAgICogQHJlbWFya3MgYXNzdW1lIG5vdC1jaGVja3N1bW1lZFxuICAgKi9cbiAgZnJvbUJ1ZmZlcihieXRlczogQnVmZmVyLCBvZmZzZXQ6IG51bWJlciA9IDApOiBudW1iZXIge1xuICAgIG9mZnNldCA9IHN1cGVyLmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldClcbiAgICBvZmZzZXQgKz0gNFxuICAgIHRoaXMuc3VibmV0T3duZXJzID0gbmV3IFNFQ1BPd25lck91dHB1dCgpXG4gICAgb2Zmc2V0ID0gdGhpcy5zdWJuZXRPd25lcnMuZnJvbUJ1ZmZlcihieXRlcywgb2Zmc2V0KVxuICAgIHJldHVybiBvZmZzZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50YXRpb24gb2YgdGhlIFtbQ3JlYXRlU3VibmV0VHhdXS5cbiAgICovXG4gIHRvQnVmZmVyKCk6IEJ1ZmZlciB7XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIHRoaXMuc3VibmV0T3duZXJzID09PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgICAhKHRoaXMuc3VibmV0T3duZXJzIGluc3RhbmNlb2YgU0VDUE93bmVyT3V0cHV0KVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IFN1Ym5ldE93bmVyRXJyb3IoXG4gICAgICAgIFwiQ3JlYXRlU3VibmV0VHgudG9CdWZmZXIgLS0gdGhpcy5zdWJuZXRPd25lcnMgaXMgbm90IGEgU0VDUE93bmVyT3V0cHV0XCJcbiAgICAgIClcbiAgICB9XG4gICAgbGV0IHR5cGVJRDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpXG4gICAgdHlwZUlELndyaXRlVUludDMyQkUodGhpcy5zdWJuZXRPd25lcnMuZ2V0T3V0cHV0SUQoKSwgMClcbiAgICBsZXQgYmFycjogQnVmZmVyW10gPSBbXG4gICAgICBzdXBlci50b0J1ZmZlcigpLFxuICAgICAgdHlwZUlELFxuICAgICAgdGhpcy5zdWJuZXRPd25lcnMudG9CdWZmZXIoKVxuICAgIF1cbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChiYXJyKVxuICB9XG5cbiAgLyoqXG4gICAqIENsYXNzIHJlcHJlc2VudGluZyBhbiB1bnNpZ25lZCBDcmVhdGUgU3VibmV0IHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gbmV0d29ya0lEIE9wdGlvbmFsIG5ldHdvcmtJRCwgW1tEZWZhdWx0TmV0d29ya0lEXV1cbiAgICogQHBhcmFtIGJsb2NrY2hhaW5JRCBPcHRpb25hbCBibG9ja2NoYWluSUQsIGRlZmF1bHQgQnVmZmVyLmFsbG9jKDMyLCAxNilcbiAgICogQHBhcmFtIG91dHMgT3B0aW9uYWwgYXJyYXkgb2YgdGhlIFtbVHJhbnNmZXJhYmxlT3V0cHV0XV1zXG4gICAqIEBwYXJhbSBpbnMgT3B0aW9uYWwgYXJyYXkgb2YgdGhlIFtbVHJhbnNmZXJhYmxlSW5wdXRdXXNcbiAgICogQHBhcmFtIG1lbW8gT3B0aW9uYWwge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gZm9yIHRoZSBtZW1vIGZpZWxkXG4gICAqIEBwYXJhbSBzdWJuZXRPd25lcnMgT3B0aW9uYWwgW1tTRUNQT3duZXJPdXRwdXRdXSBjbGFzcyBmb3Igc3BlY2lmeWluZyB3aG8gb3ducyB0aGUgc3VibmV0LlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgbmV0d29ya0lEOiBudW1iZXIgPSBEZWZhdWx0TmV0d29ya0lELFxuICAgIGJsb2NrY2hhaW5JRDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDMyLCAxNiksXG4gICAgb3V0czogVHJhbnNmZXJhYmxlT3V0cHV0W10gPSB1bmRlZmluZWQsXG4gICAgaW5zOiBUcmFuc2ZlcmFibGVJbnB1dFtdID0gdW5kZWZpbmVkLFxuICAgIG1lbW86IEJ1ZmZlciA9IHVuZGVmaW5lZCxcbiAgICBzdWJuZXRPd25lcnM6IFNFQ1BPd25lck91dHB1dCA9IHVuZGVmaW5lZFxuICApIHtcbiAgICBzdXBlcihuZXR3b3JrSUQsIGJsb2NrY2hhaW5JRCwgb3V0cywgaW5zLCBtZW1vKVxuICAgIHRoaXMuc3VibmV0T3duZXJzID0gc3VibmV0T3duZXJzXG4gIH1cbn1cbiJdfQ==","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-APIBase\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.APIBase = exports.RequestResponseData = void 0;\nconst db_1 = __importDefault(require(\"../utils/db\"));\n/**\n * Response data for HTTP requests.\n */\nclass RequestResponseData {\n    constructor(data, headers, status, statusText, request) {\n        this.data = data;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n        this.request = request;\n    }\n}\nexports.RequestResponseData = RequestResponseData;\n/**\n * Abstract class defining a generic endpoint that all endpoints must implement (extend).\n */\nclass APIBase {\n    /**\n     *\n     * @param core Reference to the Avalanche instance using this baseURL\n     * @param baseURL Path to the baseURL\n     */\n    constructor(core, baseURL) {\n        /**\n         * Sets the path of the APIs baseURL.\n         *\n         * @param baseURL Path of the APIs baseURL - ex: \"/ext/bc/X\"\n         */\n        this.setBaseURL = (baseURL) => {\n            if (this.db && this.baseURL !== baseURL) {\n                const backup = this.db.getAll();\n                this.db.clearAll();\n                this.baseURL = baseURL;\n                this.db = db_1.default.getNamespace(baseURL);\n                this.db.setAll(backup, true);\n            }\n            else {\n                this.baseURL = baseURL;\n                this.db = db_1.default.getNamespace(baseURL);\n            }\n        };\n        /**\n         * Returns the baseURL's path.\n         */\n        this.getBaseURL = () => this.baseURL;\n        /**\n         * Returns the baseURL's database.\n         */\n        this.getDB = () => this.db;\n        this.core = core;\n        this.setBaseURL(baseURL);\n    }\n}\nexports.APIBase = APIBase;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vYXBpYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFJSCxxREFBNEI7QUFHNUI7O0dBRUc7QUFDSCxNQUFhLG1CQUFtQjtJQUM5QixZQUNTLElBQVMsRUFDVCxPQUFZLEVBQ1osTUFBYyxFQUNkLFVBQWtCLEVBQ2xCLE9BQXVDO1FBSnZDLFNBQUksR0FBSixJQUFJLENBQUs7UUFDVCxZQUFPLEdBQVAsT0FBTyxDQUFLO1FBQ1osV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0M7SUFDN0MsQ0FBQztDQUNMO0FBUkQsa0RBUUM7QUFFRDs7R0FFRztBQUNILE1BQXNCLE9BQU87SUFpQzNCOzs7O09BSUc7SUFDSCxZQUFZLElBQW1CLEVBQUUsT0FBZTtRQWpDaEQ7Ozs7V0FJRztRQUNILGVBQVUsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO1lBQy9CLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTtnQkFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtnQkFDL0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtnQkFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7Z0JBQ3RCLElBQUksQ0FBQyxFQUFFLEdBQUcsWUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQTtnQkFDbEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO2FBQzdCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO2dCQUN0QixJQUFJLENBQUMsRUFBRSxHQUFHLFlBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUE7YUFDbkM7UUFDSCxDQUFDLENBQUE7UUFFRDs7V0FFRztRQUNILGVBQVUsR0FBRyxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFBO1FBRXZDOztXQUVHO1FBQ0gsVUFBSyxHQUFHLEdBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUE7UUFRN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7UUFDaEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMxQixDQUFDO0NBQ0Y7QUExQ0QsMEJBMENDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQ29tbW9uLUFQSUJhc2VcbiAqL1xuXG5pbXBvcnQgeyBTdG9yZUFQSSB9IGZyb20gXCJzdG9yZTJcIlxuaW1wb3J0IHsgQ2xpZW50UmVxdWVzdCB9IGZyb20gXCJodHRwXCJcbmltcG9ydCBEQiBmcm9tIFwiLi4vdXRpbHMvZGJcIlxuaW1wb3J0IEF2YWxhbmNoZUNvcmUgZnJvbSBcIi4uL2F2YWxhbmNoZVwiXG5cbi8qKlxuICogUmVzcG9uc2UgZGF0YSBmb3IgSFRUUCByZXF1ZXN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlcXVlc3RSZXNwb25zZURhdGEge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZGF0YTogYW55LFxuICAgIHB1YmxpYyBoZWFkZXJzOiBhbnksXG4gICAgcHVibGljIHN0YXR1czogbnVtYmVyLFxuICAgIHB1YmxpYyBzdGF0dXNUZXh0OiBzdHJpbmcsXG4gICAgcHVibGljIHJlcXVlc3Q6IENsaWVudFJlcXVlc3QgfCBYTUxIdHRwUmVxdWVzdFxuICApIHt9XG59XG5cbi8qKlxuICogQWJzdHJhY3QgY2xhc3MgZGVmaW5pbmcgYSBnZW5lcmljIGVuZHBvaW50IHRoYXQgYWxsIGVuZHBvaW50cyBtdXN0IGltcGxlbWVudCAoZXh0ZW5kKS5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFQSUJhc2Uge1xuICBwcm90ZWN0ZWQgY29yZTogQXZhbGFuY2hlQ29yZVxuICBwcm90ZWN0ZWQgYmFzZVVSTDogc3RyaW5nXG4gIHByb3RlY3RlZCBkYjogU3RvcmVBUElcblxuICAvKipcbiAgICogU2V0cyB0aGUgcGF0aCBvZiB0aGUgQVBJcyBiYXNlVVJMLlxuICAgKlxuICAgKiBAcGFyYW0gYmFzZVVSTCBQYXRoIG9mIHRoZSBBUElzIGJhc2VVUkwgLSBleDogXCIvZXh0L2JjL1hcIlxuICAgKi9cbiAgc2V0QmFzZVVSTCA9IChiYXNlVVJMOiBzdHJpbmcpID0+IHtcbiAgICBpZiAodGhpcy5kYiAmJiB0aGlzLmJhc2VVUkwgIT09IGJhc2VVUkwpIHtcbiAgICAgIGNvbnN0IGJhY2t1cCA9IHRoaXMuZGIuZ2V0QWxsKClcbiAgICAgIHRoaXMuZGIuY2xlYXJBbGwoKVxuICAgICAgdGhpcy5iYXNlVVJMID0gYmFzZVVSTFxuICAgICAgdGhpcy5kYiA9IERCLmdldE5hbWVzcGFjZShiYXNlVVJMKVxuICAgICAgdGhpcy5kYi5zZXRBbGwoYmFja3VwLCB0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJhc2VVUkwgPSBiYXNlVVJMXG4gICAgICB0aGlzLmRiID0gREIuZ2V0TmFtZXNwYWNlKGJhc2VVUkwpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGJhc2VVUkwncyBwYXRoLlxuICAgKi9cbiAgZ2V0QmFzZVVSTCA9ICgpOiBzdHJpbmcgPT4gdGhpcy5iYXNlVVJMXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGJhc2VVUkwncyBkYXRhYmFzZS5cbiAgICovXG4gIGdldERCID0gKCk6IFN0b3JlQVBJID0+IHRoaXMuZGJcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGNvcmUgUmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgaW5zdGFuY2UgdXNpbmcgdGhpcyBiYXNlVVJMXG4gICAqIEBwYXJhbSBiYXNlVVJMIFBhdGggdG8gdGhlIGJhc2VVUkxcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6IEF2YWxhbmNoZUNvcmUsIGJhc2VVUkw6IHN0cmluZykge1xuICAgIHRoaXMuY29yZSA9IGNvcmVcbiAgICB0aGlzLnNldEJhc2VVUkwoYmFzZVVSTClcbiAgfVxufVxuIl19","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-KeyChain\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardKeyChain = exports.StandardKeyPair = void 0;\nconst buffer_1 = require(\"buffer/\");\n/**\n * Class for representing a private and public keypair in Avalanche.\n * All APIs that need key pairs should extend on this class.\n */\nclass StandardKeyPair {\n    /**\n     * Returns a reference to the private key.\n     *\n     * @returns A {@link https://github.com/feross/buffer|Buffer} containing the private key\n     */\n    getPrivateKey() {\n        return this.privk;\n    }\n    /**\n     * Returns a reference to the public key.\n     *\n     * @returns A {@link https://github.com/feross/buffer|Buffer} containing the public key\n     */\n    getPublicKey() {\n        return this.pubk;\n    }\n}\nexports.StandardKeyPair = StandardKeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n * All endpoints that need key chains should extend on this class.\n *\n * @typeparam KPClass extending [[StandardKeyPair]] which is used as the key in [[StandardKeyChain]]\n */\nclass StandardKeyChain {\n    constructor() {\n        this.keys = {};\n        /**\n         * Gets an array of addresses stored in the [[StandardKeyChain]].\n         *\n         * @returns An array of {@link https://github.com/feross/buffer|Buffer}  representations\n         * of the addresses\n         */\n        this.getAddresses = () => Object.values(this.keys).map((kp) => kp.getAddress());\n        /**\n         * Gets an array of addresses stored in the [[StandardKeyChain]].\n         *\n         * @returns An array of string representations of the addresses\n         */\n        this.getAddressStrings = () => Object.values(this.keys).map((kp) => kp.getAddressString());\n        /**\n         * Removes the key pair from the list of they keys managed in the [[StandardKeyChain]].\n         *\n         * @param key A {@link https://github.com/feross/buffer|Buffer} for the address or\n         * KPClass to remove\n         *\n         * @returns The boolean true if a key was removed.\n         */\n        this.removeKey = (key) => {\n            let kaddr;\n            if (key instanceof buffer_1.Buffer) {\n                kaddr = key.toString(\"hex\");\n            }\n            else {\n                kaddr = key.getAddress().toString(\"hex\");\n            }\n            if (kaddr in this.keys) {\n                delete this.keys[`${kaddr}`];\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Checks if there is a key associated with the provided address.\n         *\n         * @param address The address to check for existence in the keys database\n         *\n         * @returns True on success, false if not found\n         */\n        this.hasKey = (address) => address.toString(\"hex\") in this.keys;\n        /**\n         * Returns the [[StandardKeyPair]] listed under the provided address\n         *\n         * @param address The {@link https://github.com/feross/buffer|Buffer} of the address to\n         * retrieve from the keys database\n         *\n         * @returns A reference to the [[StandardKeyPair]] in the keys database\n         */\n        this.getKey = (address) => this.keys[address.toString(\"hex\")];\n    }\n    /**\n     * Adds the key pair to the list of the keys managed in the [[StandardKeyChain]].\n     *\n     * @param newKey A key pair of the appropriate class to be added to the [[StandardKeyChain]]\n     */\n    addKey(newKey) {\n        this.keys[newKey.getAddress().toString(\"hex\")] = newKey;\n    }\n}\nexports.StandardKeyChain = StandardKeyChain;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9pbmZvL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9hcGlcIlxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardAmountInput = exports.StandardTransferableInput = exports.StandardParseableInput = exports.Input = void 0;\n/**\n * @packageDocumentation\n * @module Common-Inputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst credentials_1 = require(\"./credentials\");\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nclass Input extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Input\";\n        this._typeID = undefined;\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n         * Returns the array of [[SigIdx]] for this [[Input]]\n         */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n         * Creates and adds a [[SigIdx]] to the [[Input]].\n         *\n         * @param addressIdx The index of the address to reference in the signatures\n         * @param address The address of the source of the signature\n         */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sigIdxs: this.sigIdxs.map((s) => s.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sigIdxs = fields[\"sigIdxs\"].map((s) => {\n            let sidx = new credentials_1.SigIdx();\n            sidx.deserialize(s, encoding);\n            return sidx;\n        });\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.sigCount = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const sigCount = this.sigCount.readUInt32BE(0);\n        this.sigIdxs = [];\n        for (let i = 0; i < sigCount; i++) {\n            const sigidx = new credentials_1.SigIdx();\n            const sigbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            sigidx.fromBuffer(sigbuff);\n            offset += 4;\n            this.sigIdxs.push(sigidx);\n        }\n        return offset;\n    }\n    toBuffer() {\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        let bsize = this.sigCount.length;\n        const barr = [this.sigCount];\n        for (let i = 0; i < this.sigIdxs.length; i++) {\n            const b = this.sigIdxs[`${i}`].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 representation of the [[Input]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.Input = Input;\nInput.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getInputID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getInputID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\nclass StandardParseableInput extends serialization_1.Serializable {\n    /**\n     * Class representing an [[StandardParseableInput]] for a transaction.\n     *\n     * @param input A number representing the InputID of the [[StandardParseableInput]]\n     */\n    constructor(input = undefined) {\n        super();\n        this._typeName = \"StandardParseableInput\";\n        this._typeID = undefined;\n        this.getInput = () => this.input;\n        if (input instanceof Input) {\n            this.input = input;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { input: this.input.serialize(encoding) });\n    }\n    toBuffer() {\n        const inbuff = this.input.toBuffer();\n        const inid = buffer_1.Buffer.alloc(4);\n        inid.writeUInt32BE(this.input.getInputID(), 0);\n        const barr = [inid, inbuff];\n        return buffer_1.Buffer.concat(barr, inid.length + inbuff.length);\n    }\n}\nexports.StandardParseableInput = StandardParseableInput;\n/**\n * Returns a function used to sort an array of [[StandardParseableInput]]s\n */\nStandardParseableInput.comparator = () => (a, b) => {\n    const sorta = a.toBuffer();\n    const sortb = b.toBuffer();\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\nclass StandardTransferableInput extends StandardParseableInput {\n    /**\n     * Class representing an [[StandardTransferableInput]] for a transaction.\n     *\n     * @param txid A {@link https://github.com/feross/buffer|Buffer} containing the transaction ID of the referenced UTXO\n     * @param outputidx A {@link https://github.com/feross/buffer|Buffer} containing the index of the output in the transaction consumed in the [[StandardTransferableInput]]\n     * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Input]]\n     * @param input An [[Input]] to be made transferable\n     */\n    constructor(txid = undefined, outputidx = undefined, assetID = undefined, input = undefined) {\n        super();\n        this._typeName = \"StandardTransferableInput\";\n        this._typeID = undefined;\n        this.txid = buffer_1.Buffer.alloc(32);\n        this.outputidx = buffer_1.Buffer.alloc(4);\n        this.assetID = buffer_1.Buffer.alloc(32);\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.\n         */\n        this.getTxID = () => this.txid;\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.\n         */\n        this.getOutputIdx = () => this.outputidx;\n        /**\n         * Returns a base-58 string representation of the UTXOID this [[StandardTransferableInput]] references.\n         */\n        this.getUTXOID = () => bintools.bufferToB58(buffer_1.Buffer.concat([this.txid, this.outputidx]));\n        /**\n         * Returns the input.\n         */\n        this.getInput = () => this.input;\n        /**\n         * Returns the assetID of the input.\n         */\n        this.getAssetID = () => this.assetID;\n        if (typeof txid !== \"undefined\" &&\n            typeof outputidx !== \"undefined\" &&\n            typeof assetID !== \"undefined\" &&\n            input instanceof Input) {\n            this.input = input;\n            this.txid = txid;\n            this.outputidx = outputidx;\n            this.assetID = assetID;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { txid: serialization.encoder(this.txid, encoding, \"Buffer\", \"cb58\"), outputidx: serialization.encoder(this.outputidx, encoding, \"Buffer\", \"decimalString\"), assetID: serialization.encoder(this.assetID, encoding, \"Buffer\", \"cb58\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.txid = serialization.decoder(fields[\"txid\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.outputidx = serialization.decoder(fields[\"outputidx\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.assetID = serialization.decoder(fields[\"assetID\"], encoding, \"cb58\", \"Buffer\", 32);\n        //input deserialization must be implmented in child classes\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTransferableInput]].\n     */\n    toBuffer() {\n        const parseableBuff = super.toBuffer();\n        const bsize = this.txid.length +\n            this.outputidx.length +\n            this.assetID.length +\n            parseableBuff.length;\n        const barr = [\n            this.txid,\n            this.outputidx,\n            this.assetID,\n            parseableBuff\n        ];\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Returns a base-58 representation of the [[StandardTransferableInput]].\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.StandardTransferableInput = StandardTransferableInput;\n/**\n * An [[Input]] class which specifies a token amount .\n */\nclass StandardAmountInput extends Input {\n    /**\n     * An [[AmountInput]] class which issues a payment on an assetID.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the input\n     */\n    constructor(amount = undefined) {\n        super();\n        this._typeName = \"StandardAmountInput\";\n        this._typeID = undefined;\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        /**\n         * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getAmount = () => this.amountValue.clone();\n        if (amount) {\n            this.amountValue = amount.clone();\n            this.amount = bintools.fromBNToBuffer(amount, 8);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { amount: serialization.encoder(this.amount, encoding, \"Buffer\", \"decimalString\", 8) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.amount = serialization.decoder(fields[\"amount\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[AmountInput]] and returns the size of the input.\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.amount = bintools.copyFrom(bytes, offset, offset + 8);\n        this.amountValue = bintools.fromBufferToBN(this.amount);\n        offset += 8;\n        return super.fromBuffer(bytes, offset);\n    }\n    /**\n     * Returns the buffer representing the [[AmountInput]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.amount.length + superbuff.length;\n        const barr = [this.amount, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.StandardAmountInput = StandardAmountInput;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2lucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7R0FHRztBQUNILG9DQUFnQztBQUNoQyxpRUFBd0M7QUFDeEMsa0RBQXNCO0FBQ3RCLCtDQUFzQztBQUN0QywwREFJK0I7QUFFL0I7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBYSxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBQ2pELE1BQU0sYUFBYSxHQUFrQiw2QkFBYSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBRWhFLE1BQXNCLEtBQU0sU0FBUSw0QkFBWTtJQUFoRDs7UUFDWSxjQUFTLEdBQUcsT0FBTyxDQUFBO1FBQ25CLFlBQU8sR0FBRyxTQUFTLENBQUE7UUFtQm5CLGFBQVEsR0FBVyxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2xDLFlBQU8sR0FBYSxFQUFFLENBQUEsQ0FBQyw0QkFBNEI7UUEwQjdEOztXQUVHO1FBQ0gsZUFBVSxHQUFHLEdBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUE7UUFJekM7Ozs7O1dBS0c7UUFDSCxvQkFBZSxHQUFHLENBQUMsVUFBa0IsRUFBRSxPQUFlLEVBQUUsRUFBRTtZQUN4RCxNQUFNLE1BQU0sR0FBVyxJQUFJLG9CQUFNLEVBQUUsQ0FBQTtZQUNuQyxNQUFNLENBQUMsR0FBVyxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ2pDLENBQUMsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFBO1lBQzlCLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDcEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUN6QixJQUFJLENBQUMs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UUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDdkQsTUFBTSxJQUFJLENBQUMsQ0FBQTtRQUNYLE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDeEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNOLE1BQU0sU0FBUyxHQUFXLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUMxQyxNQUFNLEtBQUssR0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFBO1FBQzNELE1BQU0sSUFBSSxHQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUMvQyxPQUFPLGVBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ25DLENBQUM7Q0FjRjtBQXJFRCxrREFxRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBDb21tb24tSW5wdXRzXG4gKi9cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXIvXCJcbmltcG9ydCBCaW5Ub29scyBmcm9tIFwiLi4vdXRpbHMvYmludG9vbHNcIlxuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXG5pbXBvcnQgeyBTaWdJZHggfSBmcm9tIFwiLi9jcmVkZW50aWFsc1wiXG5pbXBvcnQge1xuICBTZXJpYWxpemFibGUsXG4gIFNlcmlhbGl6YXRpb24sXG4gIFNlcmlhbGl6ZWRFbmNvZGluZ1xufSBmcm9tIFwiLi4vdXRpbHMvc2VyaWFsaXphdGlvblwiXG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29sczogQmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpXG5jb25zdCBzZXJpYWxpemF0aW9uOiBTZXJpYWxpemF0aW9uID0gU2VyaWFsaXphdGlvbi5nZXRJbnN0YW5jZSgpXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJbnB1dCBleHRlbmRzIFNlcmlhbGl6YWJsZSB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIklucHV0XCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWRcblxuICBzZXJpYWxpemUoZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpOiBvYmplY3Qge1xuICAgIGxldCBmaWVsZHM6IG9iamVjdCA9IHN1cGVyLnNlcmlhbGl6ZShlbmNvZGluZylcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZmllbGRzLFxuICAgICAgc2lnSWR4czogdGhpcy5zaWdJZHhzLm1hcCgocykgPT4gcy5zZXJpYWxpemUoZW5jb2RpbmcpKVxuICAgIH1cbiAgfVxuICBkZXNlcmlhbGl6ZShmaWVsZHM6IG9iamVjdCwgZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKVxuICAgIHRoaXMuc2lnSWR4cyA9IGZpZWxkc1tcInNpZ0lkeHNcIl0ubWFwKChzOiBvYmplY3QpID0+IHtcbiAgICAgIGxldCBzaWR4OiBTaWdJZHggPSBuZXcgU2lnSWR4KClcbiAgICAgIHNpZHguZGVzZXJpYWxpemUocywgZW5jb2RpbmcpXG4gICAgICByZXR1cm4gc2lkeFxuICAgIH0pXG4gICAgdGhpcy5zaWdDb3VudC53cml0ZVVJbnQzMkJFKHRoaXMuc2lnSWR4cy5sZW5ndGgsIDApXG4gIH1cblxuICBwcm90ZWN0ZWQgc2lnQ291bnQ6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KVxuICBwcm90ZWN0ZWQgc2lnSWR4czogU2lnSWR4W10gPSBbXSAvLyBpZHhzIG9mIHNpZ25lcnMgZnJvbSB1dHhvXG5cbiAgc3RhdGljIGNvbXBhcmF0b3IgPVxuICAgICgpOiAoKGE6IElucHV0LCBiOiBJbnB1dCkgPT4gMSB8IC0xIHwgMCkgPT5cbiAgICAoYTogSW5wdXQsIGI6IElucHV0KTogMSB8IC0xIHwgMCA9PiB7XG4gICAgICBjb25zdCBhb3V0aWQ6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KVxuICAgICAgYW91dGlkLndyaXRlVUludDMyQkUoYS5nZXRJbnB1dElEKCksIDApXG4gICAgICBjb25zdCBhYnVmZjogQnVmZmVyID0gYS50b0J1ZmZlcigpXG5cbiAgICAgIGNvbnN0IGJvdXRpZDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpXG4gICAgICBib3V0aWQud3JpdGVVSW50MzJCRShiLmdldElucHV0SUQoKSwgMClcbiAgICAgIGNvbnN0IGJidWZmOiBCdWZmZXIgPSBiLnRvQnVmZmVyKClcblxuICAgICAgY29uc3QgYXNvcnQ6IEJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoXG4gICAgICAgIFthb3V0aWQsIGFidWZmXSxcbiAgICAgICAgYW91dGlkLmxlbmd0aCArIGFidWZmLmxlbmd0aFxuICAgICAgKVxuICAgICAgY29uc3QgYnNvcnQ6IEJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoXG4gICAgICAgIFtib3V0aWQsIGJidWZmXSxcbiAgICAgICAgYm91dGlkLmxlbmd0aCArIGJidWZmLmxlbmd0aFxuICAgICAgKVxuICAgICAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKGFzb3J0LCBic29ydCkgYXMgMSB8IC0xIHwgMFxuICAgIH1cblxuICBhYnN0cmFjdCBnZXRJbnB1dElEKCk6IG51bWJlclxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSBvZiBbW1NpZ0lkeF1dIGZvciB0aGlzIFtbSW5wdXRdXVxuICAgKi9cbiAgZ2V0U2lnSWR4cyA9ICgpOiBTaWdJZHhbXSA9PiB0aGlzLnNpZ0lkeHNcblxuICBhYnN0cmFjdCBnZXRDcmVkZW50aWFsSUQoKTogbnVtYmVyXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5kIGFkZHMgYSBbW1NpZ0lkeF1dIHRvIHRoZSBbW0lucHV0XV0uXG4gICAqXG4gICAqIEBwYXJhbSBhZGRyZXNzSWR4IFRoZSBpbmRleCBvZiB0aGUgYWRkcmVzcyB0byByZWZlcmVuY2UgaW4gdGhlIHNpZ25hdHVyZXNcbiAgICogQHBhcmFtIGFkZHJlc3MgVGhlIGFkZHJlc3Mgb2YgdGhlIHNvdXJjZSBvZiB0aGUgc2lnbmF0dXJlXG4gICAqL1xuICBhZGRTaWduYXR1cmVJZHggPSAoYWRkcmVzc0lkeDogbnVtYmVyLCBhZGRyZXNzOiBCdWZmZXIpID0+IHtcbiAgICBjb25zdCBzaWdpZHg6IFNpZ0lkeCA9IG5ldyBTaWdJZHgoKVxuICAgIGNvbnN0IGI6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KVxuICAgIGIud3JpdGVVSW50MzJCRShhZGRyZXNzSWR4LCAwKVxuICAgIHNpZ2lkeC5mcm9tQnVmZmVyKGIpXG4gICAgc2lnaWR4LnNldFNvdXJjZShhZGRyZXNzKVxuICAgIHRoaXMuc2lnSWR4cy5wdXNoKHNpZ2lkeClcbiAgICB0aGlzLnNpZ0NvdW50LndyaXRlVUludDMyQkUodGhpcy5zaWdJZHhzLmxlbmd0aCwgMClcbiAgfVxuXG4gIGZyb21CdWZmZXIoYnl0ZXM6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICB0aGlzLnNpZ0NvdW50ID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNClcbiAgICBvZmZzZXQgKz0gNFxuICAgIGNvbnN0IHNpZ0NvdW50OiBudW1iZXIgPSB0aGlzLnNpZ0NvdW50LnJlYWRVSW50MzJCRSgwKVxuICAgIHRoaXMuc2lnSWR4cyA9IFtdXG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IHNpZ0NvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHNpZ2lkeCA9IG5ldyBTaWdJZHgoKVxuICAgICAgY29uc3Qgc2lnYnVmZjogQnVmZmVyID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNClcbiAgICAgIHNpZ2lkeC5mcm9tQnVmZmVyKHNpZ2J1ZmYpXG4gICAgICBvZmZzZXQgKz0gNFxuICAgICAgdGhpcy5zaWdJZHhzLnB1c2goc2lnaWR4KVxuICAgIH1cbiAgICByZXR1cm4gb2Zmc2V0XG4gIH1cblxuICB0b0J1ZmZlcigpOiBCdWZmZXIge1xuICAgIHRoaXMuc2lnQ291bnQud3JpdGVVSW50MzJCRSh0aGlzLnNpZ0lkeHMubGVuZ3RoLCAwKVxuICAgIGxldCBic2l6ZTogbnVtYmVyID0gdGhpcy5zaWdDb3VudC5sZW5ndGhcbiAgICBjb25zdCBiYXJyOiBCdWZmZXJbXSA9IFt0aGlzLnNpZ0NvdW50XVxuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCB0aGlzLnNpZ0lkeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGI6IEJ1ZmZlciA9IHRoaXMuc2lnSWR4c1tgJHtpfWBdLnRvQnVmZmVyKClcbiAgICAgIGJhcnIucHVzaChiKVxuICAgICAgYnNpemUgKz0gYi5sZW5ndGhcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoYmFyciwgYnNpemUpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGJhc2UtNTggcmVwcmVzZW50YXRpb24gb2YgdGhlIFtbSW5wdXRdXS5cbiAgICovXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGJpbnRvb2xzLmJ1ZmZlclRvQjU4KHRoaXMudG9CdWZmZXIoKSlcbiAgfVxuXG4gIGFic3RyYWN0IGNsb25lKCk6IHRoaXNcblxuICBhYnN0cmFjdCBjcmVhdGUoLi4uYXJnczogYW55W10pOiB0aGlzXG5cbiAgYWJzdHJhY3Qgc2VsZWN0KGlkOiBudW1iZXIsIC4uLmFyZ3M6IGFueVtdKTogSW5wdXRcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0YW5kYXJkUGFyc2VhYmxlSW5wdXQgZXh0ZW5kcyBTZXJpYWxpemFibGUge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJTdGFuZGFyZFBhcnNlYWJsZUlucHV0XCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWRcblxuICBzZXJpYWxpemUoZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpOiBvYmplY3Qge1xuICAgIGxldCBmaWVsZHM6IG9iamVjdCA9IHN1cGVyLnNlcmlhbGl6ZShlbmNvZGluZylcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZmllbGRzLFxuICAgICAgaW5wdXQ6IHRoaXMuaW5wdXQuc2VyaWFsaXplKGVuY29kaW5nKVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBpbnB1dDogSW5wdXRcblxuICAvKipcbiAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHVzZWQgdG8gc29ydCBhbiBhcnJheSBvZiBbW1N0YW5kYXJkUGFyc2VhYmxlSW5wdXRdXXNcbiAgICovXG4gIHN0YXRpYyBjb21wYXJhdG9yID1cbiAgICAoKTogKChcbiAgICAgIGE6IFN0YW5kYXJkUGFyc2VhYmxlSW5wdXQsXG4gICAgICBiOiBTdGFuZGFyZFBhcnNlYWJsZUlucHV0XG4gICAgKSA9PiAxIHwgLTEgfCAwKSA9PlxuICAgIChhOiBTdGFuZGFyZFBhcnNlYWJsZUlucHV0LCBiOiBTdGFuZGFyZFBhcnNlYWJsZUlucHV0KTogMSB8IC0xIHwgMCA9PiB7XG4gICAgICBjb25zdCBzb3J0YSA9IGEudG9CdWZmZXIoKVxuICAgICAgY29uc3Qgc29ydGIgPSBiLnRvQnVmZmVyKClcbiAgICAgIHJldHVybiBCdWZmZXIuY29tcGFyZShzb3J0YSwgc29ydGIpIGFzIDEgfCAtMSB8IDBcbiAgICB9XG5cbiAgZ2V0SW5wdXQgPSAoKTogSW5wdXQgPT4gdGhpcy5pbnB1dFxuXG4gIC8vIG11c3QgYmUgaW1wbGVtZW50ZWQgdG8gc2VsZWN0IGlucHV0IHR5cGVzIGZvciB0aGUgVk0gaW4gcXVlc3Rpb25cbiAgYWJzdHJhY3QgZnJvbUJ1ZmZlcihieXRlczogQnVmZmVyLCBvZmZzZXQ/OiBudW1iZXIpOiBudW1iZXJcblxuICB0b0J1ZmZlcigpOiBCdWZmZXIge1xuICAgIGNvbnN0IGluYnVmZjogQnVmZmVyID0gdGhpcy5pbnB1dC50b0J1ZmZlcigpXG4gICAgY29uc3QgaW5pZDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpXG4gICAgaW5pZC53cml0ZVVJbnQzMkJFKHRoaXMuaW5wdXQuZ2V0SW5wdXRJRCgpLCAwKVxuICAgIGNvbnN0IGJhcnI6IEJ1ZmZlcltdID0gW2luaWQsIGluYnVmZl1cbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChiYXJyLCBpbmlkLmxlbmd0aCArIGluYnVmZi5sZW5ndGgpXG4gIH1cblxuICAvKipcbiAgICogQ2xhc3MgcmVwcmVzZW50aW5nIGFuIFtbU3RhbmRhcmRQYXJzZWFibGVJbnB1dF1dIGZvciBhIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gaW5wdXQgQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBJbnB1dElEIG9mIHRoZSBbW1N0YW5kYXJkUGFyc2VhYmxlSW5wdXRdXVxuICAgKi9cbiAgY29uc3RydWN0b3IoaW5wdXQ6IElucHV0ID0gdW5kZWZpbmVkKSB7XG4gICAgc3VwZXIoKVxuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIElucHV0KSB7XG4gICAgICB0aGlzLmlucHV0ID0gaW5wdXRcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0YW5kYXJkVHJhbnNmZXJhYmxlSW5wdXQgZXh0ZW5kcyBTdGFuZGFyZFBhcnNlYWJsZUlucHV0IHtcbiAgcHJvdGVjdGVkIF90eXBlTmFtZSA9IFwiU3RhbmRhcmRUcmFuc2ZlcmFibGVJbnB1dFwiXG4gIHByb3RlY3RlZCBfdHlwZUlEID0gdW5kZWZpbmVkXG5cbiAgc2VyaWFsaXplKGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKTogb2JqZWN0IHtcbiAgICBsZXQgZmllbGRzOiBvYmplY3QgPSBzdXBlci5zZXJpYWxpemUoZW5jb2RpbmcpXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpZWxkcyxcbiAgICAgIHR4aWQ6IHNlcmlhbGl6YXRpb24uZW5jb2Rlcih0aGlzLnR4aWQsIGVuY29kaW5nLCBcIkJ1ZmZlclwiLCBcImNiNThcIiksXG4gICAgICBvdXRwdXRpZHg6IHNlcmlhbGl6YXRpb24uZW5jb2RlcihcbiAgICAgICAgdGhpcy5vdXRwdXRpZHgsXG4gICAgICAgIGVuY29kaW5nLFxuICAgICAgICBcIkJ1ZmZlclwiLFxuICAgICAgICBcImRlY2ltYWxTdHJpbmdcIlxuICAgICAgKSxcbiAgICAgIGFzc2V0SUQ6IHNlcmlhbGl6YXRpb24uZW5jb2Rlcih0aGlzLmFzc2V0SUQsIGVuY29kaW5nLCBcIkJ1ZmZlclwiLCBcImNiNThcIilcbiAgICB9XG4gIH1cbiAgZGVzZXJpYWxpemUoZmllbGRzOiBvYmplY3QsIGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKSB7XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZmllbGRzLCBlbmNvZGluZylcbiAgICB0aGlzLnR4aWQgPSBzZXJpYWxpemF0aW9uLmRlY29kZXIoXG4gICAgICBmaWVsZHNbXCJ0eGlkXCJdLFxuICAgICAgZW5jb2RpbmcsXG4gICAgICBcImNiNThcIixcbiAgICAgIFwiQnVmZmVyXCIsXG4gICAgICAzMlxuICAgIClcbiAgICB0aGlzLm91dHB1dGlkeCA9IHNlcmlhbGl6YXRpb24uZGVjb2RlcihcbiAgICAgIGZpZWxkc1tcIm91dHB1dGlkeFwiXSxcbiAgICAgIGVuY29kaW5nLFxuICAgICAgXCJkZWNpbWFsU3RyaW5nXCIsXG4gICAgICBcIkJ1ZmZlclwiLFxuICAgICAgNFxuICAgIClcbiAgICB0aGlzLmFzc2V0SUQgPSBzZXJpYWxpemF0aW9uLmRlY29kZXIoXG4gICAgICBmaWVsZHNbXCJhc3NldElEXCJdLFxuICAgICAgZW5jb2RpbmcsXG4gICAgICBcImNiNThcIixcbiAgICAgIFwiQnVmZmVyXCIsXG4gICAgICAzMlxuICAgIClcbiAgICAvL2lucHV0IGRlc2VyaWFsaXphdGlvbiBtdXN0IGJlIGltcGxtZW50ZWQgaW4gY2hpbGQgY2xhc3Nlc1xuICB9XG5cbiAgcHJvdGVjdGVkIHR4aWQ6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygzMilcbiAgcHJvdGVjdGVkIG91dHB1dGlkeDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDQpXG4gIHByb3RlY3RlZCBhc3NldElEOiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoMzIpXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBvZiB0aGUgVHhJRC5cbiAgICovXG4gIGdldFR4SUQgPSAoKTogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gQnVmZmVyID0+IHRoaXMudHhpZFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gIG9mIHRoZSBPdXRwdXRJZHguXG4gICAqL1xuICBnZXRPdXRwdXRJZHggPSAoKTogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gQnVmZmVyID0+IHRoaXMub3V0cHV0aWR4XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBiYXNlLTU4IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgVVRYT0lEIHRoaXMgW1tTdGFuZGFyZFRyYW5zZmVyYWJsZUlucHV0XV0gcmVmZXJlbmNlcy5cbiAgICovXG4gIGdldFVUWE9JRCA9ICgpOiBzdHJpbmcgPT5cbiAgICBiaW50b29scy5idWZmZXJUb0I1OChCdWZmZXIuY29uY2F0KFt0aGlzLnR4aWQsIHRoaXMub3V0cHV0aWR4XSkpXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGlucHV0LlxuICAgKi9cbiAgZ2V0SW5wdXQgPSAoKTogSW5wdXQgPT4gdGhpcy5pbnB1dFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhc3NldElEIG9mIHRoZSBpbnB1dC5cbiAgICovXG4gIGdldEFzc2V0SUQgPSAoKTogQnVmZmVyID0+IHRoaXMuYXNzZXRJRFxuXG4gIGFic3RyYWN0IGZyb21CdWZmZXIoYnl0ZXM6IEJ1ZmZlciwgb2Zmc2V0PzogbnVtYmVyKTogbnVtYmVyXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSByZXByZXNlbnRhdGlvbiBvZiB0aGUgW1tTdGFuZGFyZFRyYW5zZmVyYWJsZUlucHV0XV0uXG4gICAqL1xuICB0b0J1ZmZlcigpOiBCdWZmZXIge1xuICAgIGNvbnN0IHBhcnNlYWJsZUJ1ZmY6IEJ1ZmZlciA9IHN1cGVyLnRvQnVmZmVyKClcbiAgICBjb25zdCBic2l6ZTogbnVtYmVyID1cbiAgICAgIHRoaXMudHhpZC5sZW5ndGggK1xuICAgICAgdGhpcy5vdXRwdXRpZHgubGVuZ3RoICtcbiAgICAgIHRoaXMuYXNzZXRJRC5sZW5ndGggK1xuICAgICAgcGFyc2VhYmxlQnVmZi5sZW5ndGhcbiAgICBjb25zdCBiYXJyOiBCdWZmZXJbXSA9IFtcbiAgICAgIHRoaXMudHhpZCxcbiAgICAgIHRoaXMub3V0cHV0aWR4LFxuICAgICAgdGhpcy5hc3NldElELFxuICAgICAgcGFyc2VhYmxlQnVmZlxuICAgIF1cbiAgICBjb25zdCBidWZmOiBCdWZmZXIgPSBCdWZmZXIuY29uY2F0KGJhcnIsIGJzaXplKVxuICAgIHJldHVybiBidWZmXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGJhc2UtNTggcmVwcmVzZW50YXRpb24gb2YgdGhlIFtbU3RhbmRhcmRUcmFuc2ZlcmFibGVJbnB1dF1dLlxuICAgKi9cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiBiaW50b29scy5idWZmZXJUb0I1OCh0aGlzLnRvQnVmZmVyKCkpXG4gIH1cblxuICAvKipcbiAgICogQ2xhc3MgcmVwcmVzZW50aW5nIGFuIFtbU3RhbmRhcmRUcmFuc2ZlcmFibGVJbnB1dF1dIGZvciBhIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gdHhpZCBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgdGhlIHRyYW5zYWN0aW9uIElEIG9mIHRoZSByZWZlcmVuY2VkIFVUWE9cbiAgICogQHBhcmFtIG91dHB1dGlkeCBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgdGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaW4gdGhlIHRyYW5zYWN0aW9uIGNvbnN1bWVkIGluIHRoZSBbW1N0YW5kYXJkVHJhbnNmZXJhYmxlSW5wdXRdXVxuICAgKiBAcGFyYW0gYXNzZXRJRCBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHJlcHJlc2VudGluZyB0aGUgYXNzZXRJRCBvZiB0aGUgW1tJbnB1dF1dXG4gICAqIEBwYXJhbSBpbnB1dCBBbiBbW0lucHV0XV0gdG8gYmUgbWFkZSB0cmFuc2ZlcmFibGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHR4aWQ6IEJ1ZmZlciA9IHVuZGVmaW5lZCxcbiAgICBvdXRwdXRpZHg6IEJ1ZmZlciA9IHVuZGVmaW5lZCxcbiAgICBhc3NldElEOiBCdWZmZXIgPSB1bmRlZmluZWQsXG4gICAgaW5wdXQ6IElucHV0ID0gdW5kZWZpbmVkXG4gICkge1xuICAgIHN1cGVyKClcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgdHhpZCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgdHlwZW9mIG91dHB1dGlkeCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgdHlwZW9mIGFzc2V0SUQgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgIGlucHV0IGluc3RhbmNlb2YgSW5wdXRcbiAgICApIHtcbiAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dFxuICAgICAgdGhpcy50eGlkID0gdHhpZFxuICAgICAgdGhpcy5vdXRwdXRpZHggPSBvdXRwdXRpZHhcbiAgICAgIHRoaXMuYXNzZXRJRCA9IGFzc2V0SURcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBbW0lucHV0XV0gY2xhc3Mgd2hpY2ggc3BlY2lmaWVzIGEgdG9rZW4gYW1vdW50IC5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0YW5kYXJkQW1vdW50SW5wdXQgZXh0ZW5kcyBJbnB1dCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIlN0YW5kYXJkQW1vdW50SW5wdXRcIlxuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHVuZGVmaW5lZFxuXG4gIHNlcmlhbGl6ZShlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIik6IG9iamVjdCB7XG4gICAgbGV0IGZpZWxkczogb2JqZWN0ID0gc3VwZXIuc2VyaWFsaXplKGVuY29kaW5nKVxuICAgIHJldHVybiB7XG4gICAgICAuLi5maWVsZHMsXG4gICAgICBhbW91bnQ6IHNlcmlhbGl6YXRpb24uZW5jb2RlcihcbiAgICAgICAgdGhpcy5hbW91bnQsXG4gICAgICAgIGVuY29kaW5nLFxuICAgICAgICBcIkJ1ZmZlclwiLFxuICAgICAgICBcImRlY2ltYWxTdHJpbmdcIixcbiAgICAgICAgOFxuICAgICAgKVxuICAgIH1cbiAgfVxuICBkZXNlcmlhbGl6ZShmaWVsZHM6IG9iamVjdCwgZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKVxuICAgIHRoaXMuYW1vdW50ID0gc2VyaWFsaXphdGlvbi5kZWNvZGVyKFxuICAgICAgZmllbGRzW1wiYW1vdW50XCJdLFxuICAgICAgZW5jb2RpbmcsXG4gICAgICBcImRlY2ltYWxTdHJpbmdcIixcbiAgICAgIFwiQnVmZmVyXCIsXG4gICAgICA4XG4gICAgKVxuICAgIHRoaXMuYW1vdW50VmFsdWUgPSBiaW50b29scy5mcm9tQnVmZmVyVG9CTih0aGlzLmFtb3VudClcbiAgfVxuXG4gIHByb3RlY3RlZCBhbW91bnQ6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg4KVxuICBwcm90ZWN0ZWQgYW1vdW50VmFsdWU6IEJOID0gbmV3IEJOKDApXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFtb3VudCBhcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59LlxuICAgKi9cbiAgZ2V0QW1vdW50ID0gKCk6IEJOID0+IHRoaXMuYW1vdW50VmFsdWUuY2xvbmUoKVxuXG4gIC8qKlxuICAgKiBQb3B1YXRlcyB0aGUgaW5zdGFuY2UgZnJvbSBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHJlcHJlc2VudGluZyB0aGUgW1tBbW91bnRJbnB1dF1dIGFuZCByZXR1cm5zIHRoZSBzaXplIG9mIHRoZSBpbnB1dC5cbiAgICovXG4gIGZyb21CdWZmZXIoYnl0ZXM6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICB0aGlzLmFtb3VudCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDgpXG4gICAgdGhpcy5hbW91bnRWYWx1ZSA9IGJpbnRvb2xzLmZyb21CdWZmZXJUb0JOKHRoaXMuYW1vdW50KVxuICAgIG9mZnNldCArPSA4XG4gICAgcmV0dXJuIHN1cGVyLmZyb21CdWZmZXIoYnl0ZXMsIG9mZnNldClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBidWZmZXIgcmVwcmVzZW50aW5nIHRoZSBbW0Ftb3VudElucHV0XV0gaW5zdGFuY2UuXG4gICAqL1xuICB0b0J1ZmZlcigpOiBCdWZmZXIge1xuICAgIGNvbnN0IHN1cGVyYnVmZjogQnVmZmVyID0gc3VwZXIudG9CdWZmZXIoKVxuICAgIGNvbnN0IGJzaXplOiBudW1iZXIgPSB0aGlzLmFtb3VudC5sZW5ndGggKyBzdXBlcmJ1ZmYubGVuZ3RoXG4gICAgY29uc3QgYmFycjogQnVmZmVyW10gPSBbdGhpcy5hbW91bnQsIHN1cGVyYnVmZl1cbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChiYXJyLCBic2l6ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBbW0Ftb3VudElucHV0XV0gY2xhc3Mgd2hpY2ggaXNzdWVzIGEgcGF5bWVudCBvbiBhbiBhc3NldElELlxuICAgKlxuICAgKiBAcGFyYW0gYW1vdW50IEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn0gcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgaW4gdGhlIGlucHV0XG4gICAqL1xuICBjb25zdHJ1Y3RvcihhbW91bnQ6IEJOID0gdW5kZWZpbmVkKSB7XG4gICAgc3VwZXIoKVxuICAgIGlmIChhbW91bnQpIHtcbiAgICAgIHRoaXMuYW1vdW50VmFsdWUgPSBhbW91bnQuY2xvbmUoKVxuICAgICAgdGhpcy5hbW91bnQgPSBiaW50b29scy5mcm9tQk5Ub0J1ZmZlcihhbW91bnQsIDgpXG4gICAgfVxuICB9XG59XG4iXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-AssetAmount\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardAssetAmountDestination = exports.AssetAmount = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst errors_1 = require(\"../utils/errors\");\n/**\n * Class for managing asset amounts in the UTXOSet fee calcuation\n */\nclass AssetAmount {\n    constructor(assetID, amount, burn) {\n        // assetID that is amount is managing.\n        this.assetID = buffer_1.Buffer.alloc(32);\n        // amount of this asset that should be sent.\n        this.amount = new bn_js_1.default(0);\n        // burn is the amount of this asset that should be burned.\n        this.burn = new bn_js_1.default(0);\n        // spent is the total amount of this asset that has been consumed.\n        this.spent = new bn_js_1.default(0);\n        // stakeableLockSpent is the amount of this asset that has been consumed that\n        // was locked.\n        this.stakeableLockSpent = new bn_js_1.default(0);\n        // change is the excess amount of this asset that was consumed over the amount\n        // requested to be consumed(amount + burn).\n        this.change = new bn_js_1.default(0);\n        // stakeableLockChange is a flag to mark if the input that generated the\n        // change was locked.\n        this.stakeableLockChange = false;\n        // finished is a convenience flag to track \"spent >= amount + burn\"\n        this.finished = false;\n        this.getAssetID = () => {\n            return this.assetID;\n        };\n        this.getAssetIDString = () => {\n            return this.assetID.toString(\"hex\");\n        };\n        this.getAmount = () => {\n            return this.amount;\n        };\n        this.getSpent = () => {\n            return this.spent;\n        };\n        this.getBurn = () => {\n            return this.burn;\n        };\n        this.getChange = () => {\n            return this.change;\n        };\n        this.getStakeableLockSpent = () => {\n            return this.stakeableLockSpent;\n        };\n        this.getStakeableLockChange = () => {\n            return this.stakeableLockChange;\n        };\n        this.isFinished = () => {\n            return this.finished;\n        };\n        // spendAmount should only be called if this asset is still awaiting more\n        // funds to consume.\n        this.spendAmount = (amt, stakeableLocked = false) => {\n            if (this.finished) {\n                /* istanbul ignore next */\n                throw new errors_1.InsufficientFundsError(\"Error - AssetAmount.spendAmount: attempted to spend \" + \"excess funds\");\n            }\n            this.spent = this.spent.add(amt);\n            if (stakeableLocked) {\n                this.stakeableLockSpent = this.stakeableLockSpent.add(amt);\n            }\n            const total = this.amount.add(this.burn);\n            if (this.spent.gte(total)) {\n                this.change = this.spent.sub(total);\n                if (stakeableLocked) {\n                    this.stakeableLockChange = true;\n                }\n                this.finished = true;\n            }\n            return this.finished;\n        };\n        this.assetID = assetID;\n        this.amount = typeof amount === \"undefined\" ? new bn_js_1.default(0) : amount;\n        this.burn = typeof burn === \"undefined\" ? new bn_js_1.default(0) : burn;\n        this.spent = new bn_js_1.default(0);\n        this.stakeableLockSpent = new bn_js_1.default(0);\n        this.stakeableLockChange = false;\n    }\n}\nexports.AssetAmount = AssetAmount;\nclass StandardAssetAmountDestination {\n    constructor(destinations, senders, changeAddresses) {\n        this.amounts = [];\n        this.destinations = [];\n        this.senders = [];\n        this.changeAddresses = [];\n        this.amountkey = {};\n        this.inputs = [];\n        this.outputs = [];\n        this.change = [];\n        // TODO: should this function allow for repeated calls with the same\n        //       assetID?\n        this.addAssetAmount = (assetID, amount, burn) => {\n            let aa = new AssetAmount(assetID, amount, burn);\n            this.amounts.push(aa);\n            this.amountkey[aa.getAssetIDString()] = aa;\n        };\n        this.addInput = (input) => {\n            this.inputs.push(input);\n        };\n        this.addOutput = (output) => {\n            this.outputs.push(output);\n        };\n        this.addChange = (output) => {\n            this.change.push(output);\n        };\n        this.getAmounts = () => {\n            return this.amounts;\n        };\n        this.getDestinations = () => {\n            return this.destinations;\n        };\n        this.getSenders = () => {\n            return this.senders;\n        };\n        this.getChangeAddresses = () => {\n            return this.changeAddresses;\n        };\n        this.getAssetAmount = (assetHexStr) => {\n            return this.amountkey[`${assetHexStr}`];\n        };\n        this.assetExists = (assetHexStr) => {\n            return assetHexStr in this.amountkey;\n        };\n        this.getInputs = () => {\n            return this.inputs;\n        };\n        this.getOutputs = () => {\n            return this.outputs;\n        };\n        this.getChangeOutputs = () => {\n            return this.change;\n        };\n        this.getAllOutputs = () => {\n            return this.outputs.concat(this.change);\n        };\n        this.canComplete = () => {\n            for (let i = 0; i < this.amounts.length; i++) {\n                if (!this.amounts[`${i}`].isFinished()) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        this.destinations = destinations;\n        this.changeAddresses = changeAddresses;\n        this.senders = senders;\n    }\n}\nexports.StandardAssetAmountDestination = StandardAssetAmountDestination;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for representing a private and public keypair on the Platform Chain.\n */\nclass KeyPair extends secp256k1_1.SECP256k1KeyPair {\n    clone() {\n        let newkp = new KeyPair(this.hrp, this.chainID);\n        newkp.importKey(bintools.copyFrom(this.getPrivateKey()));\n        return newkp;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyPair(args[0], args[1]);\n        }\n        return new KeyPair(this.hrp, this.chainID);\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam KeyPair Class extending [[KeyPair]] which is used as the key in [[KeyChain]]\n */\nclass KeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n     * Returns instance of KeyChain.\n     */\n    constructor(hrp, chainID) {\n        super();\n        this.hrp = \"\";\n        this.chainID = \"\";\n        /**\n         * Makes a new key pair, returns the address.\n         *\n         * @returns The new key pair\n         */\n        this.makeKey = () => {\n            let keypair = new KeyPair(this.hrp, this.chainID);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainID);\n            super.addKey(newKey);\n        };\n        /**\n         * Given a private key, makes a new key pair, returns the address.\n         *\n         * @param privk A {@link https://github.com/feross/buffer|Buffer} or cb58 serialized string representing the private key\n         *\n         * @returns The new key pair\n         */\n        this.importKey = (privk) => {\n            let keypair = new KeyPair(this.hrp, this.chainID);\n            let pk;\n            if (typeof privk === \"string\") {\n                pk = bintools.cb58Decode(privk.split(\"-\")[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainID = chainID;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyChain(args[0], args[1]);\n        }\n        return new KeyChain(this.hrp, this.chainID);\n    }\n    clone() {\n        const newkc = new KeyChain(this.hrp, this.chainID);\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[`${k}`].clone());\n        }\n        return newkc;\n    }\n    union(kc) {\n        let newkc = kc.clone();\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[`${k}`].clone());\n        }\n        return newkc;\n    }\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Y2hhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2tleWNoYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUtBLG9FQUEyQztBQUMzQyxzREFBNEU7QUFDNUUsdUNBQTJEO0FBRTNEOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQWEsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUNqRCxNQUFNLGFBQWEsR0FBa0IscUJBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUVoRTs7R0FFRztBQUNILE1BQWEsT0FBUSxTQUFRLDRCQUFnQjtJQUMzQyxLQUFLO1FBQ0gsSUFBSSxLQUFLLEdBQVksSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDeEQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDeEQsT0FBTyxLQUFhLENBQUE7SUFDdEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLElBQVc7UUFDbkIsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUNwQixPQUFPLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQVMsQ0FBQTtTQUM3QztRQUNELE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFTLENBQUE7SUFDcEQsQ0FBQztDQUNGO0FBYkQsMEJBYUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBYSxRQUFTLFNBQVEsNkJBQTBCO0lBaUV0RDs7T0FFRztJQUNILFlBQVksR0FBVyxFQUFFLE9BQWU7UUFDdEMsS0FBSyxFQUFFLENBQUE7UUFwRVQsUUFBRyxHQUFXLEVBQUUsQ0FBQTtR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IEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktUGxhdGZvcm1WTS1LZXlDaGFpblxuICovXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5pbXBvcnQgQmluVG9vbHMgZnJvbSBcIi4uLy4uL3V0aWxzL2JpbnRvb2xzXCJcbmltcG9ydCB7IFNFQ1AyNTZrMUtleUNoYWluLCBTRUNQMjU2azFLZXlQYWlyIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9zZWNwMjU2azFcIlxuaW1wb3J0IHsgU2VyaWFsaXphdGlvbiwgU2VyaWFsaXplZFR5cGUgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIlxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6IEJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKVxuY29uc3Qgc2VyaWFsaXphdGlvbjogU2VyaWFsaXphdGlvbiA9IFNlcmlhbGl6YXRpb24uZ2V0SW5zdGFuY2UoKVxuXG4vKipcbiAqIENsYXNzIGZvciByZXByZXNlbnRpbmcgYSBwcml2YXRlIGFuZCBwdWJsaWMga2V5cGFpciBvbiB0aGUgUGxhdGZvcm0gQ2hhaW4uXG4gKi9cbmV4cG9ydCBjbGFzcyBLZXlQYWlyIGV4dGVuZHMgU0VDUDI1NmsxS2V5UGFpciB7XG4gIGNsb25lKCk6IHRoaXMge1xuICAgIGxldCBuZXdrcDogS2V5UGFpciA9IG5ldyBLZXlQYWlyKHRoaXMuaHJwLCB0aGlzLmNoYWluSUQpXG4gICAgbmV3a3AuaW1wb3J0S2V5KGJpbnRvb2xzLmNvcHlGcm9tKHRoaXMuZ2V0UHJpdmF0ZUtleSgpKSlcbiAgICByZXR1cm4gbmV3a3AgYXMgdGhpc1xuICB9XG5cbiAgY3JlYXRlKC4uLmFyZ3M6IGFueVtdKTogdGhpcyB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09IDIpIHtcbiAgICAgIHJldHVybiBuZXcgS2V5UGFpcihhcmdzWzBdLCBhcmdzWzFdKSBhcyB0aGlzXG4gICAgfVxuICAgIHJldHVybiBuZXcgS2V5UGFpcih0aGlzLmhycCwgdGhpcy5jaGFpbklEKSBhcyB0aGlzXG4gIH1cbn1cblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEga2V5IGNoYWluIGluIEF2YWxhbmNoZS5cbiAqXG4gKiBAdHlwZXBhcmFtIEtleVBhaXIgQ2xhc3MgZXh0ZW5kaW5nIFtbS2V5UGFpcl1dIHdoaWNoIGlzIHVzZWQgYXMgdGhlIGtleSBpbiBbW0tleUNoYWluXV1cbiAqL1xuZXhwb3J0IGNsYXNzIEtleUNoYWluIGV4dGVuZHMgU0VDUDI1NmsxS2V5Q2hhaW48S2V5UGFpcj4ge1xuICBocnA6IHN0cmluZyA9IFwiXCJcbiAgY2hhaW5JRDogc3RyaW5nID0gXCJcIlxuXG4gIC8qKlxuICAgKiBNYWtlcyBhIG5ldyBrZXkgcGFpciwgcmV0dXJucyB0aGUgYWRkcmVzcy5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIG5ldyBrZXkgcGFpclxuICAgKi9cbiAgbWFrZUtleSA9ICgpOiBLZXlQYWlyID0+IHtcbiAgICBsZXQga2V5cGFpcjogS2V5UGFpciA9IG5ldyBLZXlQYWlyKHRoaXMuaHJwLCB0aGlzLmNoYWluSUQpXG4gICAgdGhpcy5hZGRLZXkoa2V5cGFpcilcbiAgICByZXR1cm4ga2V5cGFpclxuICB9XG5cbiAgYWRkS2V5ID0gKG5ld0tleTogS2V5UGFpcikgPT4ge1xuICAgIG5ld0tleS5zZXRDaGFpbklEKHRoaXMuY2hhaW5JRClcbiAgICBzdXBlci5hZGRLZXkobmV3S2V5KVxuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgcHJpdmF0ZSBrZXksIG1ha2VzIGEgbmV3IGtleSBwYWlyLCByZXR1cm5zIHRoZSBhZGRyZXNzLlxuICAgKlxuICAgKiBAcGFyYW0gcHJpdmsgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSBvciBjYjU4IHNlcmlhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcHJpdmF0ZSBrZXlcbiAgICpcbiAgICogQHJldHVybnMgVGhlIG5ldyBrZXkgcGFpclxuICAgKi9cbiAgaW1wb3J0S2V5ID0gKHByaXZrOiBCdWZmZXIgfCBzdHJpbmcpOiBLZXlQYWlyID0+IHtcbiAgICBsZXQga2V5cGFpcjogS2V5UGFpciA9IG5ldyBLZXlQYWlyKHRoaXMuaHJwLCB0aGlzLmNoYWluSUQpXG4gICAgbGV0IHBrOiBCdWZmZXJcbiAgICBpZiAodHlwZW9mIHByaXZrID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBwayA9IGJpbnRvb2xzLmNiNThEZWNvZGUocHJpdmsuc3BsaXQoXCItXCIpWzFdKVxuICAgIH0gZWxzZSB7XG4gICAgICBwayA9IGJpbnRvb2xzLmNvcHlGcm9tKHByaXZrKVxuICAgIH1cbiAgICBrZXlwYWlyLmltcG9ydEtleShwaylcbiAgICBpZiAoIShrZXlwYWlyLmdldEFkZHJlc3MoKS50b1N0cmluZyhcImhleFwiKSBpbiB0aGlzLmtleXMpKSB7XG4gICAgICB0aGlzLmFkZEtleShrZXlwYWlyKVxuICAgIH1cbiAgICByZXR1cm4ga2V5cGFpclxuICB9XG5cbiAgY3JlYXRlKC4uLmFyZ3M6IGFueVtdKTogdGhpcyB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09IDIpIHtcbiAgICAgIHJldHVybiBuZXcgS2V5Q2hhaW4oYXJnc1swXSwgYXJnc1sxXSkgYXMgdGhpc1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEtleUNoYWluKHRoaXMuaHJwLCB0aGlzLmNoYWluSUQpIGFzIHRoaXNcbiAgfVxuXG4gIGNsb25lKCk6IHRoaXMge1xuICAgIGNvbnN0IG5ld2tjOiBLZXlDaGFpbiA9IG5ldyBLZXlDaGFpbih0aGlzLmhycCwgdGhpcy5jaGFpbklEKVxuICAgIGZvciAobGV0IGsgaW4gdGhpcy5rZXlzKSB7XG4gICAgICBuZXdrYy5hZGRLZXkodGhpcy5rZXlzW2Ake2t9YF0uY2xvbmUoKSlcbiAgICB9XG4gICAgcmV0dXJuIG5ld2tjIGFzIHRoaXNcbiAgfVxuXG4gIHVuaW9uKGtjOiB0aGlzKTogdGhpcyB7XG4gICAgbGV0IG5ld2tjOiBLZXlDaGFpbiA9IGtjLmNsb25lKClcbiAgICBmb3IgKGxldCBrIGluIHRoaXMua2V5cykge1xuICAgICAgbmV3a2MuYWRkS2V5KHRoaXMua2V5c1tgJHtrfWBdLmNsb25lKCkpXG4gICAgfVxuICAgIHJldHVybiBuZXdrYyBhcyB0aGlzXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBpbnN0YW5jZSBvZiBLZXlDaGFpbi5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGhycDogc3RyaW5nLCBjaGFpbklEOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5ocnAgPSBocnBcbiAgICB0aGlzLmNoYWluSUQgPSBjaGFpbklEXG4gIH1cbn1cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StakeableLockIn = exports.SECPTransferInput = exports.AmountInput = exports.TransferableInput = exports.ParseableInput = exports.SelectInputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Inputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nconst SelectInputClass = (inputid, ...args) => {\n    if (inputid === constants_1.PlatformVMConstants.SECPINPUTID) {\n        return new SECPTransferInput(...args);\n    }\n    else if (inputid === constants_1.PlatformVMConstants.STAKEABLELOCKINID) {\n        return new StakeableLockIn(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.InputIdError(\"Error - SelectInputClass: unknown inputid\");\n};\nexports.SelectInputClass = SelectInputClass;\nclass ParseableInput extends input_1.StandardParseableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"ParseableInput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = (0, exports.SelectInputClass)(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        const inputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.input = (0, exports.SelectInputClass)(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.ParseableInput = ParseableInput;\nclass TransferableInput extends input_1.StandardTransferableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableInput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = (0, exports.SelectInputClass)(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.PlatformVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.input = (0, exports.SelectInputClass)(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountInput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    select(id, ...args) {\n        return (0, exports.SelectInputClass)(id, ...args);\n    }\n}\nexports.AmountInput = AmountInput;\nclass SECPTransferInput extends AmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferInput\";\n        this._typeID = constants_1.PlatformVMConstants.SECPINPUTID;\n        this.getCredentialID = () => constants_1.PlatformVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the inputID for this input\n     */\n    getInputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferInput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferInput = SECPTransferInput;\n/**\n * An [[Input]] class which specifies an input that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n */\nclass StakeableLockIn extends AmountInput {\n    /**\n     * A [[Output]] class which specifies an [[Input]] that has a locktime which can also enable staking of the value held, preventing transfers but not validation.\n     *\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the input\n     * @param stakeableLocktime A {@link https://github.com/indutny/bn.js/|BN} representing the stakeable locktime\n     * @param transferableInput A [[ParseableInput]] which is embedded into this input.\n     */\n    constructor(amount = undefined, stakeableLocktime = undefined, transferableInput = undefined) {\n        super(amount);\n        this._typeName = \"StakeableLockIn\";\n        this._typeID = constants_1.PlatformVMConstants.STAKEABLELOCKINID;\n        this.getCredentialID = () => constants_1.PlatformVMConstants.SECPCREDENTIAL;\n        if (typeof stakeableLocktime !== \"undefined\") {\n            this.stakeableLocktime = bintools.fromBNToBuffer(stakeableLocktime, 8);\n        }\n        if (typeof transferableInput !== \"undefined\") {\n            this.transferableInput = transferableInput;\n            this.synchronize();\n        }\n    }\n    //serialize and deserialize both are inherited\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        let outobj = Object.assign(Object.assign({}, fields), { stakeableLocktime: serialization.encoder(this.stakeableLocktime, encoding, \"Buffer\", \"decimalString\", 8), transferableInput: this.transferableInput.serialize(encoding) });\n        delete outobj[\"sigIdxs\"];\n        delete outobj[\"sigCount\"];\n        delete outobj[\"amount\"];\n        return outobj;\n    }\n    deserialize(fields, encoding = \"hex\") {\n        fields[\"sigIdxs\"] = [];\n        fields[\"sigCount\"] = \"0\";\n        fields[\"amount\"] = \"98\";\n        super.deserialize(fields, encoding);\n        this.stakeableLocktime = serialization.decoder(fields[\"stakeableLocktime\"], encoding, \"decimalString\", \"Buffer\", 8);\n        this.transferableInput = new ParseableInput();\n        this.transferableInput.deserialize(fields[\"transferableInput\"], encoding);\n        this.synchronize();\n    }\n    synchronize() {\n        let input = this.transferableInput.getInput();\n        this.sigIdxs = input.getSigIdxs();\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        this.amount = bintools.fromBNToBuffer(input.getAmount(), 8);\n        this.amountValue = input.getAmount();\n    }\n    getStakeableLocktime() {\n        return bintools.fromBufferToBN(this.stakeableLocktime);\n    }\n    getTransferablInput() {\n        return this.transferableInput;\n    }\n    /**\n     * Returns the inputID for this input\n     */\n    getInputID() {\n        return this._typeID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[StakeableLockIn]] and returns the size of the output.\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.stakeableLocktime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.transferableInput = new ParseableInput();\n        offset = this.transferableInput.fromBuffer(bytes, offset);\n        this.synchronize();\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[StakeableLockIn]] instance.\n     */\n    toBuffer() {\n        const xferinBuff = this.transferableInput.toBuffer();\n        const bsize = this.stakeableLocktime.length + xferinBuff.length;\n        const barr = [this.stakeableLocktime, xferinBuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    create(...args) {\n        return new StakeableLockIn(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    select(id, ...args) {\n        return (0, exports.SelectInputClass)(id, ...args);\n    }\n}\nexports.StakeableLockIn = StakeableLockIn;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ImportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param sourceChain Optiona chainid for the source inputs to import. Default platform chainid.\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, sourceChain = undefined, importIns = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ImportTx\";\n        this._typeID = constants_1.PlatformVMConstants.IMPORTTX;\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        this.sourceChain = sourceChain; // do no correct, if it's wrong it'll bomb on toBuffer\n        if (typeof importIns !== \"undefined\" && Array.isArray(importIns)) {\n            for (let i = 0; i < importIns.length; i++) {\n                if (!(importIns[`${i}`] instanceof inputs_1.TransferableInput)) {\n                    throw new errors_1.TransferableInputError(\"Error - ImportTx.constructor: invalid TransferableInput in array parameter 'importIns'\");\n                }\n            }\n            this.importIns = importIns;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sourceChain: serialization.encoder(this.sourceChain, encoding, \"Buffer\", \"cb58\"), importIns: this.importIns.map((i) => i.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sourceChain = serialization.decoder(fields[\"sourceChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.importIns = fields[\"importIns\"].map((i) => {\n            let ii = new inputs_1.TransferableInput();\n            ii.deserialize(i, encoding);\n            return ii;\n        });\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n    }\n    /**\n     * Returns the id of the [[ImportTx]]\n     */\n    getTxType() {\n        return this._typeID;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it, populates the class, and returns the length of the [[ImportTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n     *\n     * @returns The length of the raw [[ImportTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        for (let i = 0; i < this.importIns.length; i++) {\n            barr.push(this.importIns[`${i}`].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n     * Returns an array of [[TransferableInput]]s in this transaction.\n     */\n    getImportInputs() {\n        return this.importIns;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the source chainid.\n     */\n    getSourceChain() {\n        return this.sourceChain;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const creds = super.sign(msg, kc);\n        for (let i = 0; i < this.importIns.length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(this.importIns[`${i}`].getInput().getCredentialID());\n            const sigidxs = this.importIns[`${i}`].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[`${j}`].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            creds.push(cred);\n        }\n        return creds;\n    }\n    clone() {\n        let newbase = new ImportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ImportTx(...args);\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./apibase\"), exports);\n__exportStar(require(\"./assetamount\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./evmtx\"), exports);\n__exportStar(require(\"./input\"), exports);\n__exportStar(require(\"./interfaces\"), exports);\n__exportStar(require(\"./jrpcapi\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./nbytes\"), exports);\n__exportStar(require(\"./output\"), exports);\n__exportStar(require(\"./restapi\"), exports);\n__exportStar(require(\"./secp256k1\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0Q0FBeUI7QUFDekIsZ0RBQTZCO0FBQzdCLGdEQUE2QjtBQUM3QiwwQ0FBdUI7QUFDdkIsMENBQXVCO0FBQ3ZCLCtDQUE0QjtBQUM1Qiw0Q0FBeUI7QUFDekIsNkNBQTBCO0FBQzFCLDJDQUF3QjtBQUN4QiwyQ0FBd0I7QUFDeEIsNENBQXlCO0FBQ3pCLDhDQUEyQjtBQUMzQix1Q0FBb0I7QUFDcEIsMENBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vYXBpYmFzZVwiXG5leHBvcnQgKiBmcm9tIFwiLi9hc3NldGFtb3VudFwiXG5leHBvcnQgKiBmcm9tIFwiLi9jcmVkZW50aWFsc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9ldm10eFwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbnB1dFwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbnRlcmZhY2VzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2pycGNhcGlcIlxuZXhwb3J0ICogZnJvbSBcIi4va2V5Y2hhaW5cIlxuZXhwb3J0ICogZnJvbSBcIi4vbmJ5dGVzXCJcbmV4cG9ydCAqIGZyb20gXCIuL291dHB1dFwiXG5leHBvcnQgKiBmcm9tIFwiLi9yZXN0YXBpXCJcbmV4cG9ydCAqIGZyb20gXCIuL3NlY3AyNTZrMVwiXG5leHBvcnQgKiBmcm9tIFwiLi90eFwiXG5leHBvcnQgKiBmcm9tIFwiLi91dHhvc1wiXG4iXX0=","\"use strict\";\n/**\n * @packageDocumentation\n * @module PlatformVM-Interfaces\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGlzL3BsYXRmb3Jtdm0vaW50ZXJmYWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgUGxhdGZvcm1WTS1JbnRlcmZhY2VzXG4gKi9cblxuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXG5pbXBvcnQgeyBQZXJzaXN0YW5jZU9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvcGVyc2lzdGVuY2VvcHRpb25zXCJcbmltcG9ydCB7IFRyYW5zZmVyYWJsZU91dHB1dCB9IGZyb20gXCIuXCJcbmltcG9ydCB7IFVUWE9TZXQgfSBmcm9tIFwiLi4vcGxhdGZvcm12bS91dHhvc1wiXG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0U3Rha2VQYXJhbXMge1xuICBhZGRyZXNzZXM6IHN0cmluZ1tdXG4gIGVuY29kaW5nOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRTdGFrZVJlc3BvbnNlIHtcbiAgc3Rha2VkOiBCTlxuICBzdGFrZWRPdXRwdXRzOiBUcmFuc2ZlcmFibGVPdXRwdXRbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFJld2FyZFVUWE9zUGFyYW1zIHtcbiAgdHhJRDogc3RyaW5nXG4gIGVuY29kaW5nOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRSZXdhcmRVVFhPc1Jlc3BvbnNlIHtcbiAgbnVtRmV0Y2hlZDogbnVtYmVyXG4gIHV0eG9zOiBzdHJpbmdbXVxuICBlbmNvZGluZzogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0VmFsaWRhdG9yc0F0UGFyYW1zIHtcbiAgaGVpZ2h0OiBudW1iZXJcbiAgc3VibmV0SUQ/OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRWYWxpZGF0b3JzQXRSZXNwb25zZSB7XG4gIHZhbGlkYXRvcnM6IG9iamVjdFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldEN1cnJlbnRWYWxpZGF0b3JzUGFyYW1zIHtcbiAgc3VibmV0SUQ/OiBCdWZmZXIgfCBzdHJpbmdcbiAgbm9kZUlEcz86IHN0cmluZ1tdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2FtcGxlVmFsaWRhdG9yc1BhcmFtcyB7XG4gIHNpemU6IG51bWJlciB8IHN0cmluZ1xuICBzdWJuZXRJRD86IEJ1ZmZlciB8IHN0cmluZyB8IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNhbXBsZVZhbGlkYXRvcnNQYXJhbXMge1xuICBzaXplOiBudW1iZXIgfCBzdHJpbmdcbiAgc3VibmV0SUQ/OiBCdWZmZXIgfCBzdHJpbmcgfCB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBZGRWYWxpZGF0b3JQYXJhbXMge1xuICB1c2VybmFtZTogc3RyaW5nXG4gIHBhc3N3b3JkOiBzdHJpbmdcbiAgbm9kZUlEOiBzdHJpbmdcbiAgc3RhcnRUaW1lOiBudW1iZXJcbiAgZW5kVGltZTogbnVtYmVyXG4gIHN0YWtlQW1vdW50OiBzdHJpbmdcbiAgcmV3YXJkQWRkcmVzczogc3RyaW5nXG4gIGRlbGVnYXRpb25GZWVSYXRlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWRkRGVsZWdhdG9yUGFyYW1zIHtcbiAgdXNlcm5hbWU6IHN0cmluZ1xuICBwYXNzd29yZDogc3RyaW5nXG4gIG5vZGVJRDogc3RyaW5nXG4gIHN0YXJ0VGltZTogbnVtYmVyXG4gIGVuZFRpbWU6IG51bWJlclxuICBzdGFrZUFtb3VudDogc3RyaW5nXG4gIHJld2FyZEFkZHJlc3M6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFBlbmRpbmdWYWxpZGF0b3JzUGFyYW1zIHtcbiAgc3VibmV0SUQ/OiBCdWZmZXIgfCBzdHJpbmdcbiAgbm9kZUlEcz86IHN0cmluZ1tdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXhwb3J0QVZBWFBhcmFtcyB7XG4gIHVzZXJuYW1lOiBzdHJpbmdcbiAgcGFzc3dvcmQ6IHN0cmluZ1xuICBhbW91bnQ6IHN0cmluZ1xuICB0bzogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1wb3J0QVZBWFBhcmFtcyB7XG4gIHVzZXJuYW1lOiBzdHJpbmdcbiAgcGFzc3dvcmQ6IHN0cmluZ1xuICBzb3VyY2VDaGFpbjogc3RyaW5nXG4gIHRvOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFeHBvcnRLZXlQYXJhbXMge1xuICB1c2VybmFtZTogc3RyaW5nXG4gIHBhc3N3b3JkOiBzdHJpbmdcbiAgYWRkcmVzczogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1wb3J0S2V5UGFyYW1zIHtcbiAgdXNlcm5hbWU6IHN0cmluZ1xuICBwYXNzd29yZDogc3RyaW5nXG4gIHByaXZhdGVLZXk6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldEJhbGFuY2VSZXNwb25zZSB7XG4gIGJhbGFuY2U6IEJOIHwgbnVtYmVyXG4gIHVubG9ja2VkOiBCTiB8IG51bWJlclxuICBsb2NrZWRTdGFrZWFibGU6IEJOIHwgbnVtYmVyXG4gIGxvY2tlZE5vdFN0YWtlYWJsZTogQk4gfCBudW1iZXJcbiAgdXR4b0lEczoge1xuICAgIHR4SUQ6IHN0cmluZ1xuICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgfVtdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlQWRkcmVzc1BhcmFtcyB7XG4gIHVzZXJuYW1lOiBzdHJpbmdcbiAgcGFzc3dvcmQ6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExpc3RBZGRyZXNzZXNQYXJhbXMge1xuICB1c2VybmFtZTogc3RyaW5nXG4gIHBhc3N3b3JkOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGFydEluZGV4IHtcbiAgYWRkcmVzczogc3RyaW5nXG4gIHV0eG86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFVUWE9zUGFyYW1zIHtcbiAgYWRkcmVzc2VzOiBzdHJpbmdbXSB8IHN0cmluZ1xuICBzb3VyY2VDaGFpbj86IHN0cmluZyB8IHVuZGVmaW5lZFxuICBsaW1pdDogbnVtYmVyIHwgMFxuICBzdGFydEluZGV4PzogU3RhcnRJbmRleCB8IHVuZGVmaW5lZFxuICBwZXJzaXN0T3B0cz86IFBlcnNpc3RhbmNlT3B0aW9ucyB8IHVuZGVmaW5lZFxuICBlbmNvZGluZz86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVuZEluZGV4IHtcbiAgYWRkcmVzczogc3RyaW5nXG4gIHV0eG86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFVUWE9zUmVzcG9uc2Uge1xuICBudW1GZXRjaGVkOiBudW1iZXJcbiAgdXR4b3M6IFVUWE9TZXRcbiAgZW5kSW5kZXg6IEVuZEluZGV4XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlU3VibmV0UGFyYW1zIHtcbiAgdXNlcm5hbWU6IHN0cmluZ1xuICBwYXNzd29yZDogc3RyaW5nXG4gIGNvbnRyb2xLZXlzOiBzdHJpbmdbXVxuICB0aHJlc2hvbGQ6IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN1Ym5ldCB7XG4gIGlkczogc3RyaW5nXG4gIGNvbnRyb2xLZXlzOiBzdHJpbmdbXVxuICB0aHJlc2hvbGQ6IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZUJsb2NrY2hhaW5QYXJhbXMge1xuICB1c2VybmFtZTogc3RyaW5nXG4gIHBhc3N3b3JkOiBzdHJpbmdcbiAgc3VibmV0SUQ/OiBCdWZmZXIgfCBzdHJpbmcgfCB1bmRlZmluZWRcbiAgdm1JRDogc3RyaW5nXG4gIGZ4SURzOiBudW1iZXJbXVxuICBuYW1lOiBzdHJpbmdcbiAgZ2VuZXNpc0RhdGE6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJsb2NrY2hhaW4ge1xuICBpZDogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xuICBzdWJuZXRJRDogc3RyaW5nXG4gIHZtSUQ6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFR4U3RhdHVzUGFyYW1zIHtcbiAgdHhJRDogc3RyaW5nXG4gIGluY2x1ZGVSZWFzb24/OiBib29sZWFuIHwgdHJ1ZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFR4U3RhdHVzUmVzcG9uc2Uge1xuICBzdGF0dXM6IHN0cmluZ1xuICByZWFzb246IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldE1pblN0YWtlUmVzcG9uc2Uge1xuICBtaW5WYWxpZGF0b3JTdGFrZTogQk5cbiAgbWluRGVsZWdhdG9yU3Rha2U6IEJOXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0TWF4U3Rha2VBbW91bnRQYXJhbXMge1xuICBzdWJuZXRJRD86IHN0cmluZ1xuICBub2RlSUQ6IHN0cmluZ1xuICBzdGFydFRpbWU6IEJOXG4gIGVuZFRpbWU6IEJOXG59XG4iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddSubnetValidatorTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-AddSubnetValidatorTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst _1 = require(\".\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned AddSubnetValidatorTx transaction.\n */\nclass AddSubnetValidatorTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned AddSubnetValidator transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param nodeID Optional. The node ID of the validator being added.\n     * @param startTime Optional. The Unix time when the validator starts validating the Primary Network.\n     * @param endTime Optional. The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n     * @param weight Optional. Weight of this validator used when sampling\n     * @param subnetID Optional. ID of the subnet this validator is validating\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, nodeID = undefined, startTime = undefined, endTime = undefined, weight = undefined, subnetID = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"AddSubnetValidatorTx\";\n        this._typeID = constants_1.PlatformVMConstants.ADDSUBNETVALIDATORTX;\n        this.nodeID = buffer_1.Buffer.alloc(20);\n        this.startTime = buffer_1.Buffer.alloc(8);\n        this.endTime = buffer_1.Buffer.alloc(8);\n        this.weight = buffer_1.Buffer.alloc(8);\n        this.subnetID = buffer_1.Buffer.alloc(32);\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of subnet auth signers\n        if (typeof subnetID != \"undefined\") {\n            if (typeof subnetID === \"string\") {\n                this.subnetID = bintools.cb58Decode(subnetID);\n            }\n            else {\n                this.subnetID = subnetID;\n            }\n        }\n        if (typeof nodeID != \"undefined\") {\n            this.nodeID = nodeID;\n        }\n        if (typeof startTime != \"undefined\") {\n            this.startTime = bintools.fromBNToBuffer(startTime, 8);\n        }\n        if (typeof endTime != \"undefined\") {\n            this.endTime = bintools.fromBNToBuffer(endTime, 8);\n        }\n        if (typeof weight != \"undefined\") {\n            this.weight = bintools.fromBNToBuffer(weight, 8);\n        }\n        const subnetAuth = new _1.SubnetAuth();\n        this.subnetAuth = subnetAuth;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { subnetID: serialization.encoder(this.subnetID, encoding, \"Buffer\", \"cb58\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.subnetID = serialization.decoder(fields[\"subnetID\"], encoding, \"cb58\", \"Buffer\", 32);\n        // this.exportOuts = fields[\"exportOuts\"].map((e: object) => {\n        //   let eo: TransferableOutput = new TransferableOutput()\n        //   eo.deserialize(e, encoding)\n        //   return eo\n        // })\n    }\n    /**\n     * Returns the id of the [[AddSubnetValidatorTx]]\n     */\n    getTxType() {\n        return constants_1.PlatformVMConstants.ADDSUBNETVALIDATORTX;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the stake amount.\n     */\n    getNodeID() {\n        return this.nodeID;\n    }\n    /**\n     * Returns a string for the nodeID amount.\n     */\n    getNodeIDString() {\n        return (0, utils_1.bufferToNodeIDString)(this.nodeID);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the startTime.\n     */\n    getStartTime() {\n        return bintools.fromBufferToBN(this.startTime);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the endTime.\n     */\n    getEndTime() {\n        return bintools.fromBufferToBN(this.endTime);\n    }\n    /**\n     * Returns a {@link https://github.com/indutny/bn.js/|BN} for the weight\n     */\n    getWeight() {\n        return bintools.fromBufferToBN(this.weight);\n    }\n    /**\n     * Returns the subnetID as a string\n     */\n    getSubnetID() {\n        return bintools.cb58Encode(this.subnetID);\n    }\n    /**\n     * Returns the subnetAuth\n     */\n    getSubnetAuth() {\n        return this.subnetAuth;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[AddSubnetValidatorTx]], parses it, populates the class, and returns the length of the [[CreateChainTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[AddSubnetValidatorTx]]\n     *\n     * @returns The length of the raw [[AddSubnetValidatorTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.nodeID = bintools.copyFrom(bytes, offset, offset + 20);\n        offset += 20;\n        this.startTime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.endTime = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.weight = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.subnetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const sa = new _1.SubnetAuth();\n        offset += sa.fromBuffer(bintools.copyFrom(bytes, offset));\n        this.subnetAuth = sa;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateChainTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = superbuff.length +\n            this.nodeID.length +\n            this.startTime.length +\n            this.endTime.length +\n            this.weight.length +\n            this.subnetID.length +\n            this.subnetAuth.toBuffer().length;\n        const barr = [\n            superbuff,\n            this.nodeID,\n            this.startTime,\n            this.endTime,\n            this.weight,\n            this.subnetID,\n            this.subnetAuth.toBuffer()\n        ];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    clone() {\n        const newAddSubnetValidatorTx = new AddSubnetValidatorTx();\n        newAddSubnetValidatorTx.fromBuffer(this.toBuffer());\n        return newAddSubnetValidatorTx;\n    }\n    create(...args) {\n        return new AddSubnetValidatorTx(...args);\n    }\n    /**\n     * Creates and adds a [[SigIdx]] to the [[AddSubnetValidatorTx]].\n     *\n     * @param addressIdx The index of the address to reference in the signatures\n     * @param address The address of the source of the signature\n     */\n    addSignatureIdx(addressIdx, address) {\n        const addressIndex = buffer_1.Buffer.alloc(4);\n        addressIndex.writeUIntBE(addressIdx, 0, 4);\n        this.subnetAuth.addAddressIndex(addressIndex);\n        const sigidx = new credentials_1.SigIdx();\n        const b = buffer_1.Buffer.alloc(4);\n        b.writeUInt32BE(addressIdx, 0);\n        sigidx.fromBuffer(b);\n        sigidx.setSource(address);\n        this.sigIdxs.push(sigidx);\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n    }\n    /**\n     * Returns the array of [[SigIdx]] for this [[Input]]\n     */\n    getSigIdxs() {\n        return this.sigIdxs;\n    }\n    getCredentialID() {\n        return constants_1.PlatformVMConstants.SECPCREDENTIAL;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const creds = super.sign(msg, kc);\n        const sigidxs = this.getSigIdxs();\n        const cred = (0, _1.SelectCredentialClass)(this.getCredentialID());\n        for (let i = 0; i < sigidxs.length; i++) {\n            const keypair = kc.getKey(sigidxs[`${i}`].getSource());\n            const signval = keypair.sign(msg);\n            const sig = new credentials_1.Signature();\n            sig.fromBuffer(signval);\n            cred.addSignature(sig);\n        }\n        creds.push(cred);\n        return creds;\n    }\n}\nexports.AddSubnetValidatorTx = AddSubnetValidatorTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9oZWFsdGgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2FwaVwiXG4iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardUTXOSet = exports.StandardUTXO = void 0;\n/**\n * @packageDocumentation\n * @module Common-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst output_1 = require(\"./output\");\nconst helperfunctions_1 = require(\"../utils/helperfunctions\");\nconst serialization_1 = require(\"../utils/serialization\");\nconst errors_1 = require(\"../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single StandardUTXO.\n */\nclass StandardUTXO extends serialization_1.Serializable {\n    /**\n     * Class for representing a single StandardUTXO.\n     *\n     * @param codecID Optional number which specifies the codeID of the UTXO. Default 0\n     * @param txID Optional {@link https://github.com/feross/buffer|Buffer} of transaction ID for the StandardUTXO\n     * @param txidx Optional {@link https://github.com/feross/buffer|Buffer} or number for the index of the transaction's [[Output]]\n     * @param assetID Optional {@link https://github.com/feross/buffer|Buffer} of the asset ID for the StandardUTXO\n     * @param outputid Optional {@link https://github.com/feross/buffer|Buffer} or number of the output ID for the StandardUTXO\n     */\n    constructor(codecID = 0, txID = undefined, outputidx = undefined, assetID = undefined, output = undefined) {\n        super();\n        this._typeName = \"StandardUTXO\";\n        this._typeID = undefined;\n        this.codecID = buffer_1.Buffer.alloc(2);\n        this.txid = buffer_1.Buffer.alloc(32);\n        this.outputidx = buffer_1.Buffer.alloc(4);\n        this.assetID = buffer_1.Buffer.alloc(32);\n        this.output = undefined;\n        /**\n         * Returns the numeric representation of the CodecID.\n         */\n        this.getCodecID = () => this.codecID.readUInt8(0);\n        /**\n         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n         */\n        this.getCodecIDBuffer = () => this.codecID;\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.\n         */\n        this.getTxID = () => this.txid;\n        /**\n         * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.\n         */\n        this.getOutputIdx = () => this.outputidx;\n        /**\n         * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.\n         */\n        this.getAssetID = () => this.assetID;\n        /**\n         * Returns the UTXOID as a base-58 string (UTXOID is a string )\n         */\n        this.getUTXOID = () => bintools.bufferToB58(buffer_1.Buffer.concat([this.getTxID(), this.getOutputIdx()]));\n        /**\n         * Returns a reference to the output\n         */\n        this.getOutput = () => this.output;\n        if (typeof codecID !== \"undefined\") {\n            this.codecID.writeUInt8(codecID, 0);\n        }\n        if (typeof txID !== \"undefined\") {\n            this.txid = txID;\n        }\n        if (typeof outputidx === \"number\") {\n            this.outputidx.writeUInt32BE(outputidx, 0);\n        }\n        else if (outputidx instanceof buffer_1.Buffer) {\n            this.outputidx = outputidx;\n        }\n        if (typeof assetID !== \"undefined\") {\n            this.assetID = assetID;\n        }\n        if (typeof output !== \"undefined\") {\n            this.output = output;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { codecID: serialization.encoder(this.codecID, encoding, \"Buffer\", \"decimalString\"), txid: serialization.encoder(this.txid, encoding, \"Buffer\", \"cb58\"), outputidx: serialization.encoder(this.outputidx, encoding, \"Buffer\", \"decimalString\"), assetID: serialization.encoder(this.assetID, encoding, \"Buffer\", \"cb58\"), output: this.output.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.codecID = serialization.decoder(fields[\"codecID\"], encoding, \"decimalString\", \"Buffer\", 2);\n        this.txid = serialization.decoder(fields[\"txid\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.outputidx = serialization.decoder(fields[\"outputidx\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.assetID = serialization.decoder(fields[\"assetID\"], encoding, \"cb58\", \"Buffer\", 32);\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardUTXO]].\n     */\n    toBuffer() {\n        const outbuff = this.output.toBuffer();\n        const outputidbuffer = buffer_1.Buffer.alloc(4);\n        outputidbuffer.writeUInt32BE(this.output.getOutputID(), 0);\n        const barr = [\n            this.codecID,\n            this.txid,\n            this.outputidx,\n            this.assetID,\n            outputidbuffer,\n            outbuff\n        ];\n        return buffer_1.Buffer.concat(barr, this.codecID.length +\n            this.txid.length +\n            this.outputidx.length +\n            this.assetID.length +\n            outputidbuffer.length +\n            outbuff.length);\n    }\n}\nexports.StandardUTXO = StandardUTXO;\n/**\n * Class representing a set of [[StandardUTXO]]s.\n */\nclass StandardUTXOSet extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"StandardUTXOSet\";\n        this._typeID = undefined;\n        this.utxos = {};\n        this.addressUTXOs = {}; // maps address to utxoids:locktime\n        /**\n         * Returns true if the [[StandardUTXO]] is in the StandardUTXOSet.\n         *\n         * @param utxo Either a [[StandardUTXO]] a cb58 serialized string representing a StandardUTXO\n         */\n        this.includes = (utxo) => {\n            let utxoX = undefined;\n            let utxoid = undefined;\n            try {\n                utxoX = this.parseUTXO(utxo);\n                utxoid = utxoX.getUTXOID();\n            }\n            catch (e) {\n                if (e instanceof Error) {\n                    console.log(e.message);\n                }\n                else {\n                    console.log(e);\n                }\n                return false;\n            }\n            return utxoid in this.utxos;\n        };\n        /**\n         * Removes a [[StandardUTXO]] from the [[StandardUTXOSet]] if it exists.\n         *\n         * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n         *\n         * @returns A [[StandardUTXO]] if it was removed and undefined if nothing was removed.\n         */\n        this.remove = (utxo) => {\n            let utxovar = undefined;\n            try {\n                utxovar = this.parseUTXO(utxo);\n            }\n            catch (e) {\n                if (e instanceof Error) {\n                    console.log(e.message);\n                }\n                else {\n                    console.log(e);\n                }\n                return undefined;\n            }\n            const utxoid = utxovar.getUTXOID();\n            if (!(utxoid in this.utxos)) {\n                return undefined;\n            }\n            delete this.utxos[`${utxoid}`];\n            const addresses = Object.keys(this.addressUTXOs);\n            for (let i = 0; i < addresses.length; i++) {\n                if (utxoid in this.addressUTXOs[addresses[`${i}`]]) {\n                    delete this.addressUTXOs[addresses[`${i}`]][`${utxoid}`];\n                }\n            }\n            return utxovar;\n        };\n        /**\n         * Removes an array of [[StandardUTXO]]s to the [[StandardUTXOSet]].\n         *\n         * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n         * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n         *\n         * @returns An array of UTXOs which were removed.\n         */\n        this.removeArray = (utxos) => {\n            const removed = [];\n            for (let i = 0; i < utxos.length; i++) {\n                const result = this.remove(utxos[`${i}`]);\n                if (typeof result !== \"undefined\") {\n                    removed.push(result);\n                }\n            }\n            return removed;\n        };\n        /**\n         * Gets a [[StandardUTXO]] from the [[StandardUTXOSet]] by its UTXOID.\n         *\n         * @param utxoid String representing the UTXOID\n         *\n         * @returns A [[StandardUTXO]] if it exists in the set.\n         */\n        this.getUTXO = (utxoid) => this.utxos[`${utxoid}`];\n        /**\n         * Gets all the [[StandardUTXO]]s, optionally that match with UTXOIDs in an array\n         *\n         * @param utxoids An optional array of UTXOIDs, returns all [[StandardUTXO]]s if not provided\n         *\n         * @returns An array of [[StandardUTXO]]s.\n         */\n        this.getAllUTXOs = (utxoids = undefined) => {\n            let results = [];\n            if (typeof utxoids !== \"undefined\" && Array.isArray(utxoids)) {\n                results = utxoids\n                    .filter((utxoid) => this.utxos[`${utxoid}`])\n                    .map((utxoid) => this.utxos[`${utxoid}`]);\n            }\n            else {\n                results = Object.values(this.utxos);\n            }\n            return results;\n        };\n        /**\n         * Gets all the [[StandardUTXO]]s as strings, optionally that match with UTXOIDs in an array.\n         *\n         * @param utxoids An optional array of UTXOIDs, returns all [[StandardUTXO]]s if not provided\n         *\n         * @returns An array of [[StandardUTXO]]s as cb58 serialized strings.\n         */\n        this.getAllUTXOStrings = (utxoids = undefined) => {\n            const results = [];\n            const utxos = Object.keys(this.utxos);\n            if (typeof utxoids !== \"undefined\" && Array.isArray(utxoids)) {\n                for (let i = 0; i < utxoids.length; i++) {\n                    if (utxoids[`${i}`] in this.utxos) {\n                        results.push(this.utxos[utxoids[`${i}`]].toString());\n                    }\n                }\n            }\n            else {\n                for (const u of utxos) {\n                    results.push(this.utxos[`${u}`].toString());\n                }\n            }\n            return results;\n        };\n        /**\n         * Given an address or array of addresses, returns all the UTXOIDs for those addresses\n         *\n         * @param address An array of address {@link https://github.com/feross/buffer|Buffer}s\n         * @param spendable If true, only retrieves UTXOIDs whose locktime has passed\n         *\n         * @returns An array of addresses.\n         */\n        this.getUTXOIDs = (addresses = undefined, spendable = true) => {\n            if (typeof addresses !== \"undefined\") {\n                const results = [];\n                const now = (0, helperfunctions_1.UnixNow)();\n                for (let i = 0; i < addresses.length; i++) {\n                    if (addresses[`${i}`].toString(\"hex\") in this.addressUTXOs) {\n                        const entries = Object.entries(this.addressUTXOs[addresses[`${i}`].toString(\"hex\")]);\n                        for (const [utxoid, locktime] of entries) {\n                            if ((results.indexOf(utxoid) === -1 &&\n                                spendable &&\n                                locktime.lte(now)) ||\n                                !spendable) {\n                                results.push(utxoid);\n                            }\n                        }\n                    }\n                }\n                return results;\n            }\n            return Object.keys(this.utxos);\n        };\n        /**\n         * Gets the addresses in the [[StandardUTXOSet]] and returns an array of {@link https://github.com/feross/buffer|Buffer}.\n         */\n        this.getAddresses = () => Object.keys(this.addressUTXOs).map((k) => buffer_1.Buffer.from(k, \"hex\"));\n        /**\n         * Returns the balance of a set of addresses in the StandardUTXOSet.\n         *\n         * @param addresses An array of addresses\n         * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized representation of an AssetID\n         * @param asOf The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns Returns the total balance as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getBalance = (addresses, assetID, asOf = undefined) => {\n            const utxoids = this.getUTXOIDs(addresses);\n            const utxos = this.getAllUTXOs(utxoids);\n            let spend = new bn_js_1.default(0);\n            let asset;\n            if (typeof assetID === \"string\") {\n                asset = bintools.cb58Decode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            for (let i = 0; i < utxos.length; i++) {\n                if (utxos[`${i}`].getOutput() instanceof output_1.StandardAmountOutput &&\n                    utxos[`${i}`].getAssetID().toString(\"hex\") === asset.toString(\"hex\") &&\n                    utxos[`${i}`].getOutput().meetsThreshold(addresses, asOf)) {\n                    spend = spend.add(utxos[`${i}`].getOutput().getAmount());\n                }\n            }\n            return spend;\n        };\n        /**\n         * Gets all the Asset IDs, optionally that match with Asset IDs in an array\n         *\n         * @param utxoids An optional array of Addresses as string or Buffer, returns all Asset IDs if not provided\n         *\n         * @returns An array of {@link https://github.com/feross/buffer|Buffer} representing the Asset IDs.\n         */\n        this.getAssetIDs = (addresses = undefined) => {\n            const results = new Set();\n            let utxoids = [];\n            if (typeof addresses !== \"undefined\") {\n                utxoids = this.getUTXOIDs(addresses);\n            }\n            else {\n                utxoids = this.getUTXOIDs();\n            }\n            for (let i = 0; i < utxoids.length; i++) {\n                if (utxoids[`${i}`] in this.utxos && !(utxoids[`${i}`] in results)) {\n                    results.add(this.utxos[utxoids[`${i}`]].getAssetID());\n                }\n            }\n            return [...results];\n        };\n        /**\n         * Returns a new set with copy of UTXOs in this and set parameter.\n         *\n         * @param utxoset The [[StandardUTXOSet]] to merge with this one\n         * @param hasUTXOIDs Will subselect a set of [[StandardUTXO]]s which have the UTXOIDs provided in this array, defults to all UTXOs\n         *\n         * @returns A new StandardUTXOSet that contains all the filtered elements.\n         */\n        this.merge = (utxoset, hasUTXOIDs = undefined) => {\n            const results = this.create();\n            const utxos1 = this.getAllUTXOs(hasUTXOIDs);\n            const utxos2 = utxoset.getAllUTXOs(hasUTXOIDs);\n            const process = (utxo) => {\n                results.add(utxo);\n            };\n            utxos1.forEach(process);\n            utxos2.forEach(process);\n            return results;\n        };\n        /**\n         * Set intersetion between this set and a parameter.\n         *\n         * @param utxoset The set to intersect\n         *\n         * @returns A new StandardUTXOSet containing the intersection\n         */\n        this.intersection = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => us2.includes(utxoid));\n            return this.merge(utxoset, results);\n        };\n        /**\n         * Set difference between this set and a parameter.\n         *\n         * @param utxoset The set to difference\n         *\n         * @returns A new StandardUTXOSet containing the difference\n         */\n        this.difference = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1.filter((utxoid) => !us2.includes(utxoid));\n            return this.merge(utxoset, results);\n        };\n        /**\n         * Set symmetrical difference between this set and a parameter.\n         *\n         * @param utxoset The set to symmetrical difference\n         *\n         * @returns A new StandardUTXOSet containing the symmetrical difference\n         */\n        this.symDifference = (utxoset) => {\n            const us1 = this.getUTXOIDs();\n            const us2 = utxoset.getUTXOIDs();\n            const results = us1\n                .filter((utxoid) => !us2.includes(utxoid))\n                .concat(us2.filter((utxoid) => !us1.includes(utxoid)));\n            return this.merge(utxoset, results);\n        };\n        /**\n         * Set union between this set and a parameter.\n         *\n         * @param utxoset The set to union\n         *\n         * @returns A new StandardUTXOSet containing the union\n         */\n        this.union = (utxoset) => this.merge(utxoset);\n        /**\n         * Merges a set by the rule provided.\n         *\n         * @param utxoset The set to merge by the MergeRule\n         * @param mergeRule The [[MergeRule]] to apply\n         *\n         * @returns A new StandardUTXOSet containing the merged data\n         *\n         * @remarks\n         * The merge rules are as follows:\n         *   * \"intersection\" - the intersection of the set\n         *   * \"differenceSelf\" - the difference between the existing data and new set\n         *   * \"differenceNew\" - the difference between the new data and the existing set\n         *   * \"symDifference\" - the union of the differences between both sets of data\n         *   * \"union\" - the unique set of all elements contained in both sets\n         *   * \"unionMinusNew\" - the unique set of all elements contained in both sets, excluding values only found in the new set\n         *   * \"unionMinusSelf\" - the unique set of all elements contained in both sets, excluding values only found in the existing set\n         */\n        this.mergeByRule = (utxoset, mergeRule) => {\n            let uSet;\n            switch (mergeRule) {\n                case \"intersection\":\n                    return this.intersection(utxoset);\n                case \"differenceSelf\":\n                    return this.difference(utxoset);\n                case \"differenceNew\":\n                    return utxoset.difference(this);\n                case \"symDifference\":\n                    return this.symDifference(utxoset);\n                case \"union\":\n                    return this.union(utxoset);\n                case \"unionMinusNew\":\n                    uSet = this.union(utxoset);\n                    return uSet.difference(utxoset);\n                case \"unionMinusSelf\":\n                    uSet = this.union(utxoset);\n                    return uSet.difference(this);\n                default:\n                    throw new errors_1.MergeRuleError(\"Error - StandardUTXOSet.mergeByRule: bad MergeRule\");\n            }\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        let utxos = {};\n        for (let utxoid in this.utxos) {\n            let utxoidCleaned = serialization.encoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[`${utxoidCleaned}`] = this.utxos[`${utxoid}`].serialize(encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in this.addressUTXOs) {\n            let addressCleaned = serialization.encoder(address, encoding, \"hex\", \"cb58\");\n            let utxobalance = {};\n            for (let utxoid in this.addressUTXOs[`${address}`]) {\n                let utxoidCleaned = serialization.encoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[`${utxoidCleaned}`] = serialization.encoder(this.addressUTXOs[`${address}`][`${utxoid}`], encoding, \"BN\", \"decimalString\");\n            }\n            addressUTXOs[`${addressCleaned}`] = utxobalance;\n        }\n        return Object.assign(Object.assign({}, fields), { utxos,\n            addressUTXOs });\n    }\n    /**\n     * Adds a [[StandardUTXO]] to the StandardUTXOSet.\n     *\n     * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n     * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n     *\n     * @returns A [[StandardUTXO]] if one was added and undefined if nothing was added.\n     */\n    add(utxo, overwrite = false) {\n        let utxovar = undefined;\n        try {\n            utxovar = this.parseUTXO(utxo);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                console.log(e.message);\n            }\n            else {\n                console.log(e);\n            }\n            return undefined;\n        }\n        const utxoid = utxovar.getUTXOID();\n        if (!(utxoid in this.utxos) || overwrite === true) {\n            this.utxos[`${utxoid}`] = utxovar;\n            const addresses = utxovar.getOutput().getAddresses();\n            const locktime = utxovar.getOutput().getLocktime();\n            for (let i = 0; i < addresses.length; i++) {\n                const address = addresses[`${i}`].toString(\"hex\");\n                if (!(address in this.addressUTXOs)) {\n                    this.addressUTXOs[`${address}`] = {};\n                }\n                this.addressUTXOs[`${address}`][`${utxoid}`] = locktime;\n            }\n            return utxovar;\n        }\n        return undefined;\n    }\n    /**\n     * Adds an array of [[StandardUTXO]]s to the [[StandardUTXOSet]].\n     *\n     * @param utxo Either a [[StandardUTXO]] an cb58 serialized string representing a StandardUTXO\n     * @param overwrite If true, if the UTXOID already exists, overwrite it... default false\n     *\n     * @returns An array of StandardUTXOs which were added.\n     */\n    addArray(utxos, overwrite = false) {\n        const added = [];\n        for (let i = 0; i < utxos.length; i++) {\n            let result = this.add(utxos[`${i}`], overwrite);\n            if (typeof result !== \"undefined\") {\n                added.push(result);\n            }\n        }\n        return added;\n    }\n    filter(args, lambda) {\n        let newset = this.clone();\n        let utxos = this.getAllUTXOs();\n        for (let i = 0; i < utxos.length; i++) {\n            if (lambda(utxos[`${i}`], ...args) === false) {\n                newset.remove(utxos[`${i}`]);\n            }\n        }\n        return newset;\n    }\n}\nexports.StandardUTXOSet = StandardUTXOSet;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SubnetAuth = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-SubnetAuth\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst utils_1 = require(\"../../utils\");\nconst _1 = require(\".\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nclass SubnetAuth extends utils_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SubnetAuth\";\n        this._typeID = _1.PlatformVMConstants.SUBNETAUTH;\n        this.addressIndices = [];\n        this.numAddressIndices = buffer_1.Buffer.alloc(4);\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign({}, fields);\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n    }\n    /**\n     * Add an address index for Subnet Auth signing\n     *\n     * @param index the Buffer of the address index to add\n     */\n    addAddressIndex(index) {\n        const numAddrIndices = this.getNumAddressIndices();\n        this.numAddressIndices.writeUIntBE(numAddrIndices + 1, 0, 4);\n        this.addressIndices.push(index);\n    }\n    /**\n     * Returns the number of address indices as a number\n     */\n    getNumAddressIndices() {\n        return this.numAddressIndices.readUIntBE(0, 4);\n    }\n    /**\n     * Returns an array of AddressIndices as Buffers\n     */\n    getAddressIndices() {\n        return this.addressIndices;\n    }\n    fromBuffer(bytes, offset = 0) {\n        // increase offset for type id\n        offset += 4;\n        this.numAddressIndices = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        for (let i = 0; i < this.getNumAddressIndices(); i++) {\n            this.addressIndices.push(bintools.copyFrom(bytes, offset, offset + 4));\n            offset += 4;\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[SubnetAuth]].\n     */\n    toBuffer() {\n        const typeIDBuf = buffer_1.Buffer.alloc(4);\n        typeIDBuf.writeUIntBE(this._typeID, 0, 4);\n        const numAddressIndices = buffer_1.Buffer.alloc(4);\n        numAddressIndices.writeIntBE(this.addressIndices.length, 0, 4);\n        const barr = [typeIDBuf, numAddressIndices];\n        let bsize = typeIDBuf.length + numAddressIndices.length;\n        this.addressIndices.forEach((addressIndex, i) => {\n            bsize += 4;\n            barr.push(this.addressIndices[`${i}`]);\n        });\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.SubnetAuth = SubnetAuth;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VibmV0YXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGlzL3BsYXRmb3Jtdm0vc3VibmV0YXV0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7O0dBR0c7QUFDSCxvQ0FBZ0M7QUFDaEMsb0VBQTJDO0FBQzNDLHVDQUE4RDtBQUM5RCx3QkFBdUM7QUFFdkM7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBYSxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBRWpELE1BQWEsVUFBVyxTQUFRLG9CQUFZO0lBQTVDOztRQUNZLGNBQVMsR0FBRyxZQUFZLENBQUE7UUFDeEIsWUFBTyxHQUFHLHNCQUFtQixDQUFDLFVBQVUsQ0FBQTtRQXFDeEMsbUJBQWMsR0FBYSxFQUFFLENBQUE7UUFDN0Isc0JBQWlCLEdBQVcsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQThCdkQsQ0FBQztJQWxFQyxTQUFTLENBQUMsV0FBK0IsS0FBSztRQUM1QyxJQUFJLE1BQU0sR0FBVyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzlDLHlCQUNLLE1BQU0sRUFDVjtJQUNILENBQUM7SUFDRCxXQUFXLENBQUMsTUFBYyxFQUFFLFdBQStCLEtBQUs7UUFDOUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxlQUFlLENBQUMsS0FBYTtRQUMzQixNQUFNLGNBQWMsR0FBVyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQTtRQUMxRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLGNBQWMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQzVELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ2pDLENBQUM7SUFFRDs7T0FFRztJQUNILG9CQUFvQjtRQUNsQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFFRDs7T0FFRztJQUNILGlCQUFpQjtRQUNmLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQTtJQUM1QixDQUFDO0lBS0QsVUFBVSxDQUFDLEtBQWEsRUFBRSxTQUFpQixDQUFDO1FBQzFDLDhCQUE4QjtRQUM5QixNQUFNLElBQUksQ0FBQyxDQUFBO1FBQ1gsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDckUsTUFBTSxJQUFJLENBQUMsQ0FBQTtRQUNYLEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1RCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDdEUsTUFBTSxJQUFJLENBQUMsQ0FBQTtTQUNaO1FBQ0QsT0FBTyxNQUFNLENBQUE7SUFDZixDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ04sTUFBTSxTQUFTLEdBQVcsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN6QyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3pDLE1BQU0saUJBQWlCLEdBQVcsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNqRCxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQzlELE1BQU0sSUFBSSxHQUFhLENBQUMsU0FBUyxFQUFFLGlCQUFpQixDQUFDLENBQUE7UUFDckQsSUFBSSxLQUFLLEdBQVcsU0FBUyxDQUFDLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUE7UUFDL0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFvQixFQUFFLENBQVMsRUFBUSxFQUFFO1lBQ3BFLEtBQUssSUFBSSxDQUFDLENBQUE7WUFDVixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDeEMsQ0FBQyxDQUFDLENBQUE7UUFDRixPQUFPLGVBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ25DLENBQUM7Q0FDRjtBQXRFRCxnQ0FzRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktUGxhdGZvcm1WTS1TdWJuZXRBdXRoXG4gKi9cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXIvXCJcbmltcG9ydCBCaW5Ub29scyBmcm9tIFwiLi4vLi4vdXRpbHMvYmludG9vbHNcIlxuaW1wb3J0IHsgU2VyaWFsaXphYmxlLCBTZXJpYWxpemVkRW5jb2RpbmcgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIlxuaW1wb3J0IHsgUGxhdGZvcm1WTUNvbnN0YW50cyB9IGZyb20gXCIuXCJcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzOiBCaW5Ub29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKClcblxuZXhwb3J0IGNsYXNzIFN1Ym5ldEF1dGggZXh0ZW5kcyBTZXJpYWxpemFibGUge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJTdWJuZXRBdXRoXCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSBQbGF0Zm9ybVZNQ29uc3RhbnRzLlNVQk5FVEFVVEhcblxuICBzZXJpYWxpemUoZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpOiBvYmplY3Qge1xuICAgIGxldCBmaWVsZHM6IG9iamVjdCA9IHN1cGVyLnNlcmlhbGl6ZShlbmNvZGluZylcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZmllbGRzXG4gICAgfVxuICB9XG4gIGRlc2VyaWFsaXplKGZpZWxkczogb2JqZWN0LCBlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIikge1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGZpZWxkcywgZW5jb2RpbmcpXG4gIH1cblxuICAvKipcbiAgICogQWRkIGFuIGFkZHJlc3MgaW5kZXggZm9yIFN1Ym5ldCBBdXRoIHNpZ25pbmdcbiAgICpcbiAgICogQHBhcmFtIGluZGV4IHRoZSBCdWZmZXIgb2YgdGhlIGFkZHJlc3MgaW5kZXggdG8gYWRkXG4gICAqL1xuICBhZGRBZGRyZXNzSW5kZXgoaW5kZXg6IEJ1ZmZlcik6IHZvaWQge1xuICAgIGNvbnN0IG51bUFkZHJJbmRpY2VzOiBudW1iZXIgPSB0aGlzLmdldE51bUFkZHJlc3NJbmRpY2VzKClcbiAgICB0aGlzLm51bUFkZHJlc3NJbmRpY2VzLndyaXRlVUludEJFKG51bUFkZHJJbmRpY2VzICsgMSwgMCwgNClcbiAgICB0aGlzLmFkZHJlc3NJbmRpY2VzLnB1c2goaW5kZXgpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGFkZHJlc3MgaW5kaWNlcyBhcyBhIG51bWJlclxuICAgKi9cbiAgZ2V0TnVtQWRkcmVzc0luZGljZXMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5udW1BZGRyZXNzSW5kaWNlcy5yZWFkVUludEJFKDAsIDQpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiBBZGRyZXNzSW5kaWNlcyBhcyBCdWZmZXJzXG4gICAqL1xuICBnZXRBZGRyZXNzSW5kaWNlcygpOiBCdWZmZXJbXSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkcmVzc0luZGljZXNcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRyZXNzSW5kaWNlczogQnVmZmVyW10gPSBbXVxuICBwcm90ZWN0ZWQgbnVtQWRkcmVzc0luZGljZXM6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KVxuXG4gIGZyb21CdWZmZXIoYnl0ZXM6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICAvLyBpbmNyZWFzZSBvZmZzZXQgZm9yIHR5cGUgaWRcbiAgICBvZmZzZXQgKz0gNFxuICAgIHRoaXMubnVtQWRkcmVzc0luZGljZXMgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KVxuICAgIG9mZnNldCArPSA0XG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IHRoaXMuZ2V0TnVtQWRkcmVzc0luZGljZXMoKTsgaSsrKSB7XG4gICAgICB0aGlzLmFkZHJlc3NJbmRpY2VzLnB1c2goYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCkpXG4gICAgICBvZmZzZXQgKz0gNFxuICAgIH1cbiAgICByZXR1cm4gb2Zmc2V0XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBbW1N1Ym5ldEF1dGhdXS5cbiAgICovXG4gIHRvQnVmZmVyKCk6IEJ1ZmZlciB7XG4gICAgY29uc3QgdHlwZUlEQnVmOiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoNClcbiAgICB0eXBlSURCdWYud3JpdGVVSW50QkUodGhpcy5fdHlwZUlELCAwLCA0KVxuICAgIGNvbnN0IG51bUFkZHJlc3NJbmRpY2VzOiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoNClcbiAgICBudW1BZGRyZXNzSW5kaWNlcy53cml0ZUludEJFKHRoaXMuYWRkcmVzc0luZGljZXMubGVuZ3RoLCAwLCA0KVxuICAgIGNvbnN0IGJhcnI6IEJ1ZmZlcltdID0gW3R5cGVJREJ1ZiwgbnVtQWRkcmVzc0luZGljZXNdXG4gICAgbGV0IGJzaXplOiBudW1iZXIgPSB0eXBlSURCdWYubGVuZ3RoICsgbnVtQWRkcmVzc0luZGljZXMubGVuZ3RoXG4gICAgdGhpcy5hZGRyZXNzSW5kaWNlcy5mb3JFYWNoKChhZGRyZXNzSW5kZXg6IEJ1ZmZlciwgaTogbnVtYmVyKTogdm9pZCA9PiB7XG4gICAgICBic2l6ZSArPSA0XG4gICAgICBiYXJyLnB1c2godGhpcy5hZGRyZXNzSW5kaWNlc1tgJHtpfWBdKVxuICAgIH0pXG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoYmFyciwgYnNpemUpXG4gIH1cbn1cbiJdfQ==","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9rZXlzdG9yZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vYXBpXCJcbiJdfQ==","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./addsubnetvalidatortx\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./createchaintx\"), exports);\n__exportStar(require(\"./createsubnettx\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./interfaces\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./subnetauth\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n__exportStar(require(\"./validationtx\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBcUI7QUFDckIseURBQXNDO0FBQ3RDLDJDQUF3QjtBQUN4Qiw4Q0FBMkI7QUFDM0Isa0RBQStCO0FBQy9CLG1EQUFnQztBQUNoQyxnREFBNkI7QUFDN0IsNkNBQTBCO0FBQzFCLDZDQUEwQjtBQUMxQiwyQ0FBd0I7QUFDeEIsK0NBQTRCO0FBQzVCLDZDQUEwQjtBQUMxQiw0Q0FBeUI7QUFDekIsK0NBQTRCO0FBQzVCLHVDQUFvQjtBQUNwQiwwQ0FBdUI7QUFDdkIsaURBQThCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vYXBpXCJcbmV4cG9ydCAqIGZyb20gXCIuL2FkZHN1Ym5ldHZhbGlkYXRvcnR4XCJcbmV4cG9ydCAqIGZyb20gXCIuL2Jhc2V0eFwiXG5leHBvcnQgKiBmcm9tIFwiLi9jb25zdGFudHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vY3JlYXRlY2hhaW50eFwiXG5leHBvcnQgKiBmcm9tIFwiLi9jcmVhdGVzdWJuZXR0eFwiXG5leHBvcnQgKiBmcm9tIFwiLi9jcmVkZW50aWFsc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9leHBvcnR0eFwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbXBvcnR0eFwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbnB1dHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW50ZXJmYWNlc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9rZXljaGFpblwiXG5leHBvcnQgKiBmcm9tIFwiLi9vdXRwdXRzXCJcbmV4cG9ydCAqIGZyb20gXCIuL3N1Ym5ldGF1dGhcIlxuZXhwb3J0ICogZnJvbSBcIi4vdHhcIlxuZXhwb3J0ICogZnJvbSBcIi4vdXR4b3NcIlxuZXhwb3J0ICogZnJvbSBcIi4vdmFsaWRhdGlvbnR4XCJcbiJdfQ==","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Interfaces\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vaW50ZXJmYWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQ29tbW9uLUludGVyZmFjZXNcbiAqL1xuXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5pbXBvcnQgeyBTZXJpYWxpemVkRW5jb2RpbmcgfSBmcm9tIFwiLi4vdXRpbHNcIlxuXG5leHBvcnQgaW50ZXJmYWNlIENyZWRzSW50ZXJmYWNlIHtcbiAgdXNlcm5hbWU6IHN0cmluZ1xuICBwYXNzd29yZDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSXNzdWVUeFBhcmFtcyB7XG4gIHR4OiBzdHJpbmdcbiAgZW5jb2Rpbmc6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluZGV4IHtcbiAgYWRkcmVzczogc3RyaW5nXG4gIHV0eG86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVUWE9SZXNwb25zZSB7XG4gIG51bUZldGNoZWQ6IG51bWJlclxuICB1dHhvczogYW55XG4gIGVuZEluZGV4OiBJbmRleFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFzc2V0IHtcbiAgbmFtZTogc3RyaW5nXG4gIHN5bWJvbDogc3RyaW5nXG4gIGFzc2V0SUQ6IEJ1ZmZlclxuICBkZW5vbWluYXRpb246IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YWtlZE91dHMge1xuICBub2RlSUQ6IHN0cmluZ1xuICBzdGFrZWRVbnRpbDogc3RyaW5nXG4gIHN0YWtlT25seVVudGlsOiBzdHJpbmdcbiAgb3duZXJzOiBzdHJpbmdbXVxuICB0aHJlc2hvbGQ6IHN0cmluZ1xuICBhbW91bnQ6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdvcmRMaXN0cyB7XG4gIGN6ZWNoOiBzdHJpbmdbXVxuICBjaGluZXNlX3NpbXBsaWZpZWQ6IHN0cmluZ1tdXG4gIGNoaW5lc2VfdHJhZGl0aW9uYWw6IHN0cmluZ1tdXG4gIGtvcmVhbjogc3RyaW5nW11cbiAgZnJlbmNoOiBzdHJpbmdbXVxuICBpdGFsaWFuOiBzdHJpbmdbXVxuICBzcGFuaXNoOiBzdHJpbmdbXVxuICBqYXBhbmVzZTogc3RyaW5nW11cbiAgSkE6IHN0cmluZ1tdXG4gIHBvcnR1Z3Vlc2U6IHN0cmluZ1tdXG4gIGVuZ2xpc2g6IHN0cmluZ1tdXG4gIEVOOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlcmlhbGl6ZWQge1xuICB2bTogc3RyaW5nXG4gIGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmdcbiAgdmVyc2lvbjogbnVtYmVyXG4gIG5vdGVzOiBzdHJpbmdcbiAgZmllbGRzOiBvYmplY3Rcbn1cbiJdfQ==","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MetricsAPI = void 0;\nconst restapi_1 = require(\"../../common/restapi\");\n/**\n * Class for interacting with a node API that is using the node's MetricsApi.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[RESTAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass MetricsAPI extends restapi_1.RESTAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/metrics\" as the path to rpc's baseurl\n     */\n    constructor(core, baseURL = \"/ext/metrics\") {\n        super(core, baseURL);\n        this.axConf = () => {\n            return {\n                baseURL: `${this.core.getProtocol()}://${this.core.getHost()}:${this.core.getPort()}`,\n                responseType: \"text\"\n            };\n        };\n        /**\n         *\n         * @returns Promise for an object containing the metrics response\n         */\n        this.getMetrics = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.post(\"\");\n            return response.data;\n        });\n    }\n}\nexports.MetricsAPI = MetricsAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvbWV0cmljcy9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBS0Esa0RBQThDO0FBSTlDOzs7Ozs7R0FNRztBQUNILE1BQWEsVUFBVyxTQUFRLGlCQUFPO0lBaUJyQzs7Ozs7T0FLRztJQUNILFlBQVksSUFBbUIsRUFBRSxVQUFrQixjQUFjO1FBQy9ELEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7UUF2QlosV0FBTSxHQUFHLEdBQXVCLEVBQUU7WUFDMUMsT0FBTztnQkFDTCxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDckYsWUFBWSxFQUFFLE1BQU07YUFDckIsQ0FBQTtRQUNILENBQUMsQ0FBQTtRQUVEOzs7V0FHRztRQUNILGVBQVUsR0FBRyxHQUEwQixFQUFFO1lBQ3ZDLE1BQU0sUUFBUSxHQUF3QixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDekQsT0FBTyxRQUFRLENBQUMsSUFBYyxDQUFBO1FBQ2hDLENBQUMsQ0FBQSxDQUFBO0lBVUQsQ0FBQztDQUNGO0FBMUJELGdDQTBCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1NZXRyaWNzXG4gKi9cbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gXCIuLi8uLi9hdmFsYW5jaGVcIlxuaW1wb3J0IHsgUkVTVEFQSSB9IGZyb20gXCIuLi8uLi9jb21tb24vcmVzdGFwaVwiXG5pbXBvcnQgeyBSZXF1ZXN0UmVzcG9uc2VEYXRhIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9hcGliYXNlXCJcbmltcG9ydCB7IEF4aW9zUmVxdWVzdENvbmZpZyB9IGZyb20gXCJheGlvc1wiXG5cbi8qKlxuICogQ2xhc3MgZm9yIGludGVyYWN0aW5nIHdpdGggYSBub2RlIEFQSSB0aGF0IGlzIHVzaW5nIHRoZSBub2RlJ3MgTWV0cmljc0FwaS5cbiAqXG4gKiBAY2F0ZWdvcnkgUlBDQVBJc1xuICpcbiAqIEByZW1hcmtzIFRoaXMgZXh0ZW5kcyB0aGUgW1tSRVNUQVBJXV0gY2xhc3MuIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBkaXJlY3RseSBjYWxsZWQuIEluc3RlYWQsIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV0gZnVuY3Rpb24gdG8gcmVnaXN0ZXIgdGhpcyBpbnRlcmZhY2Ugd2l0aCBBdmFsYW5jaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXRyaWNzQVBJIGV4dGVuZHMgUkVTVEFQSSB7XG4gIHByb3RlY3RlZCBheENvbmYgPSAoKTogQXhpb3NSZXF1ZXN0Q29uZmlnID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYmFzZVVSTDogYCR7dGhpcy5jb3JlLmdldFByb3RvY29sKCl9Oi8vJHt0aGlzLmNvcmUuZ2V0SG9zdCgpfToke3RoaXMuY29yZS5nZXRQb3J0KCl9YCxcbiAgICAgIHJlc3BvbnNlVHlwZTogXCJ0ZXh0XCJcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybnMgUHJvbWlzZSBmb3IgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG1ldHJpY3MgcmVzcG9uc2VcbiAgICovXG4gIGdldE1ldHJpY3MgPSBhc3luYyAoKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgICBjb25zdCByZXNwb25zZTogUmVxdWVzdFJlc3BvbnNlRGF0YSA9IGF3YWl0IHRoaXMucG9zdChcIlwiKVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhIGFzIHN0cmluZ1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgY2xhc3Mgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuIEluc3RlYWQgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSBjb3JlIEEgcmVmZXJlbmNlIHRvIHRoZSBBdmFsYW5jaGUgY2xhc3NcbiAgICogQHBhcmFtIGJhc2VVUkwgRGVmYXVsdHMgdG8gdGhlIHN0cmluZyBcIi9leHQvbWV0cmljc1wiIGFzIHRoZSBwYXRoIHRvIHJwYydzIGJhc2V1cmxcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvcmU6IEF2YWxhbmNoZUNvcmUsIGJhc2VVUkw6IHN0cmluZyA9IFwiL2V4dC9tZXRyaWNzXCIpIHtcbiAgICBzdXBlcihjb3JlLCBiYXNlVVJMKVxuICB9XG59XG4iXX0=","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlatformVMAPI = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM\n */\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst keychain_1 = require(\"./keychain\");\nconst constants_1 = require(\"../../utils/constants\");\nconst constants_2 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst payload_1 = require(\"../../utils/payload\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../platformvm/utxos\");\nconst errors_1 = require(\"../../utils/errors\");\nconst outputs_1 = require(\"./outputs\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for interacting with a node's PlatformVMAPI\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass PlatformVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly.\n     * Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/P\" as the path to blockchain's baseURL\n     */\n    constructor(core, baseURL = \"/ext/bc/P\") {\n        super(core, baseURL);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.KeyChain(\"\", \"\");\n        this.blockchainID = constants_1.PlatformChainID;\n        this.blockchainAlias = undefined;\n        this.DJTXAssetID = undefined;\n        this.txFee = undefined;\n        this.creationTxFee = undefined;\n        this.minValidatorStake = undefined;\n        this.minDelegatorStake = undefined;\n        /**\n         * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n         *\n         * @returns The alias for the blockchainID\n         */\n        this.getBlockchainAlias = () => {\n            if (typeof this.blockchainAlias === \"undefined\") {\n                const netid = this.core.getNetworkID();\n                if (netid in constants_1.Defaults.network &&\n                    this.blockchainID in constants_1.Defaults.network[`${netid}`]) {\n                    this.blockchainAlias =\n                        constants_1.Defaults.network[`${netid}`][this.blockchainID][\"alias\"];\n                    return this.blockchainAlias;\n                }\n                else {\n                    /* istanbul ignore next */\n                    return undefined;\n                }\n            }\n            return this.blockchainAlias;\n        };\n        /**\n         * Sets the alias for the blockchainID.\n         *\n         * @param alias The alias for the blockchainID.\n         *\n         */\n        this.setBlockchainAlias = (alias) => {\n            this.blockchainAlias = alias;\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n         * Gets the blockchainID and returns it.\n         *\n         * @returns The blockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Refresh blockchainID, and if a blockchainID is passed in, use that.\n         *\n         * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n         *\n         * @returns The blockchainID\n         */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netid = this.core.getNetworkID();\n            if (typeof blockchainID === \"undefined\" &&\n                typeof constants_1.Defaults.network[`${netid}`] !== \"undefined\") {\n                this.blockchainID = constants_1.PlatformChainID; //default to P-Chain\n                return true;\n            }\n            if (typeof blockchainID === \"string\") {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n         */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_2.PlatformVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainid = this.getBlockchainAlias()\n                ? this.getBlockchainAlias()\n                : this.getBlockchainID();\n            const type = \"bech32\";\n            return serialization.bufferToType(address, type, this.core.getHRP(), chainid);\n        };\n        /**\n         * Fetches the DJTX AssetID and returns it in a Promise.\n         *\n         * @param refresh This function caches the response. Refresh = true will bust the cache.\n         *\n         * @returns The the provided string representing the DJTX AssetID\n         */\n        this.getDJTXAssetID = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.DJTXAssetID === \"undefined\" || refresh) {\n                const assetID = yield this.getStakingAssetID();\n                this.DJTXAssetID = bintools.cb58Decode(assetID);\n            }\n            return this.DJTXAssetID;\n        });\n        /**\n         * Overrides the defaults and sets the cache to a specific DJTX AssetID\n         *\n         * @param djtxAssetID A cb58 string or Buffer representing the DJTX AssetID\n         *\n         * @returns The the provided string representing the DJTX AssetID\n         */\n        this.setDJTXAssetID = (djtxAssetID) => {\n            if (typeof djtxAssetID === \"string\") {\n                djtxAssetID = bintools.cb58Decode(djtxAssetID);\n            }\n            this.DJTXAssetID = djtxAssetID;\n        };\n        /**\n         * Gets the default tx fee for this chain.\n         *\n         * @returns The default tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultTxFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network\n                ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"P\"][\"txFee\"])\n                : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the tx fee for this chain.\n         *\n         * @returns The tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getTxFee = () => {\n            if (typeof this.txFee === \"undefined\") {\n                this.txFee = this.getDefaultTxFee();\n            }\n            return this.txFee;\n        };\n        /**\n         * Gets the CreateSubnetTx fee.\n         *\n         * @returns The CreateSubnetTx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getCreateSubnetTxFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network\n                ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"P\"][\"createSubnetTx\"])\n                : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the CreateChainTx fee.\n         *\n         * @returns The CreateChainTx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getCreateChainTxFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network\n                ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"P\"][\"createChainTx\"])\n                : new bn_js_1.default(0);\n        };\n        /**\n         * Sets the tx fee for this chain.\n         *\n         * @param fee The tx fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setTxFee = (fee) => {\n            this.txFee = fee;\n        };\n        /**\n         * Gets the default creation fee for this chain.\n         *\n         * @returns The default creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultCreationTxFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network\n                ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"P\"][\"creationTxFee\"])\n                : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the creation fee for this chain.\n         *\n         * @returns The creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getCreationTxFee = () => {\n            if (typeof this.creationTxFee === \"undefined\") {\n                this.creationTxFee = this.getDefaultCreationTxFee();\n            }\n            return this.creationTxFee;\n        };\n        /**\n         * Sets the creation fee for this chain.\n         *\n         * @param fee The creation fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setCreationTxFee = (fee) => {\n            this.creationTxFee = fee;\n        };\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        /**\n         * @ignore\n         */\n        this.newKeyChain = () => {\n            // warning, overwrites the old keychain\n            const alias = this.getBlockchainAlias();\n            if (alias) {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n            }\n            else {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n            }\n            return this.keychain;\n        };\n        /**\n         * Helper function which determines if a tx is a goose egg transaction.\n         *\n         * @param utx An UnsignedTx\n         *\n         * @returns boolean true if passes goose egg test and false if fails.\n         *\n         * @remarks\n         * A \"Goose Egg Transaction\" is when the fee far exceeds a reasonable amount\n         */\n        this.checkGooseEgg = (utx, outTotal = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            const djtxAssetID = yield this.getDJTXAssetID();\n            let outputTotal = outTotal.gt(new bn_js_1.default(0))\n                ? outTotal\n                : utx.getOutputTotal(djtxAssetID);\n            const fee = utx.getBurn(djtxAssetID);\n            if (fee.lte(constants_1.ONEDJTX.mul(new bn_js_1.default(10))) || fee.lte(outputTotal)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        /**\n         * Retrieves an assetID for a subnet\"s staking assset.\n         *\n         * @returns Returns a Promise string with cb58 encoded value of the assetID.\n         */\n        this.getStakingAssetID = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"platform.getStakingAssetID\");\n            return response.data.result.assetID;\n        });\n        /**\n         * Creates a new blockchain.\n         *\n         * @param username The username of the Keystore user that controls the new account\n         * @param password The password of the Keystore user that controls the new account\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized string for the SubnetID or its alias.\n         * @param vmID The ID of the Virtual Machine the blockchain runs. Can also be an alias of the Virtual Machine.\n         * @param fxIDs The ids of the FXs the VM is running.\n         * @param name A human-readable name for the new blockchain\n         * @param genesis The base 58 (with checksum) representation of the genesis state of the new blockchain. Virtual Machines should have a static API method named buildGenesis that can be used to generate genesisData.\n         *\n         * @returns Promise for the unsigned transaction to create this blockchain. Must be signed by a sufficient number of the Subnet’s control keys and by the account paying the transaction fee.\n         */\n        this.createBlockchain = (username, password, subnetID = undefined, vmID, fxIDs, name, genesis) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                fxIDs,\n                vmID,\n                name,\n                genesisData: genesis\n            };\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.createBlockchain\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Gets the status of a blockchain.\n         *\n         * @param blockchainID The blockchainID requesting a status update\n         *\n         * @returns Promise for a string of one of: \"Validating\", \"Created\", \"Preferred\", \"Unknown\".\n         */\n        this.getBlockchainStatus = (blockchainID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                blockchainID\n            };\n            const response = yield this.callMethod(\"platform.getBlockchainStatus\", params);\n            return response.data.result.status;\n        });\n        /**\n         * Get the validators and their weights of a subnet or the Primary Network at a given P-Chain height.\n         *\n         * @param height The P-Chain height to get the validator set at.\n         * @param subnetID Optional. A cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise GetValidatorsAtResponse\n         */\n        this.getValidatorsAt = (height, subnetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                height\n            };\n            if (typeof subnetID !== \"undefined\") {\n                params.subnetID = subnetID;\n            }\n            const response = yield this.callMethod(\"platform.getValidatorsAt\", params);\n            return response.data.result;\n        });\n        /**\n         * Create an address in the node's keystore.\n         *\n         * @param username The username of the Keystore user that controls the new account\n         * @param password The password of the Keystore user that controls the new account\n         *\n         * @returns Promise for a string of the newly created account address.\n         */\n        this.createAddress = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"platform.createAddress\", params);\n            return response.data.result.address;\n        });\n        /**\n         * Gets the balance of a particular asset.\n         *\n         * @param address The address to pull the asset balance from\n         *\n         * @returns Promise with the balance as a {@link https://github.com/indutny/bn.js/|BN} on the provided address.\n         */\n        this.getBalance = (address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - PlatformVMAPI.getBalance: Invalid address format\");\n            }\n            const params = {\n                address\n            };\n            const response = yield this.callMethod(\"platform.getBalance\", params);\n            return response.data.result;\n        });\n        /**\n         * List the addresses controlled by the user.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         *\n         * @returns Promise for an array of addresses.\n         */\n        this.listAddresses = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"platform.listAddresses\", params);\n            return response.data.result.addresses;\n        });\n        /**\n         * Lists the set of current validators.\n         *\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an\n         * cb58 serialized string for the SubnetID or its alias.\n         * @param nodeIDs Optional. An array of strings\n         *\n         * @returns Promise for an array of validators that are currently staking, see: {@link https://docs.djtx.network/v1.0/en/api/platform/#platformgetcurrentvalidators|platform.getCurrentValidators documentation}.\n         *\n         */\n        this.getCurrentValidators = (subnetID = undefined, nodeIDs = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            if (typeof nodeIDs != \"undefined\" && nodeIDs.length > 0) {\n                params.nodeIDs = nodeIDs;\n            }\n            const response = yield this.callMethod(\"platform.getCurrentValidators\", params);\n            return response.data.result;\n        });\n        /**\n         * Lists the set of pending validators.\n         *\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer}\n         * or a cb58 serialized string for the SubnetID or its alias.\n         * @param nodeIDs Optional. An array of strings\n         *\n         * @returns Promise for an array of validators that are pending staking, see: {@link https://docs.djtx.network/v1.0/en/api/platform/#platformgetpendingvalidators|platform.getPendingValidators documentation}.\n         *\n         */\n        this.getPendingValidators = (subnetID = undefined, nodeIDs = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            if (typeof nodeIDs != \"undefined\" && nodeIDs.length > 0) {\n                params.nodeIDs = nodeIDs;\n            }\n            const response = yield this.callMethod(\"platform.getPendingValidators\", params);\n            return response.data.result;\n        });\n        /**\n         * Samples `Size` validators from the current validator set.\n         *\n         * @param sampleSize Of the total universe of validators, select this many at random\n         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an\n         * cb58 serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of validator\"s stakingIDs.\n         */\n        this.sampleValidators = (sampleSize, subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                size: sampleSize.toString()\n            };\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.sampleValidators\", params);\n            return response.data.result.validators;\n        });\n        /**\n         * Add a validator to the Primary Network.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the validator\n         * @param startTime Javascript Date object for the start time to validate\n         * @param endTime Javascript Date object for the end time to validate\n         * @param stakeAmount The amount of nDJTX the validator is staking as\n         * a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddress The address the validator reward will go to, if there is one.\n         * @param delegationFeeRate Optional. A {@link https://github.com/indutny/bn.js/|BN} for the percent fee this validator\n         * charges when others delegate stake to them. Up to 4 decimal places allowed additional decimal places are ignored.\n         * Must be between 0 and 100, inclusive. For example, if delegationFeeRate is 1.2345 and someone delegates to this\n         * validator, then when the delegation period is over, 1.2345% of the reward goes to the validator and the rest goes\n         * to the delegator.\n         *\n         * @returns Promise for a base58 string of the unsigned transaction.\n         */\n        this.addValidator = (username, password, nodeID, startTime, endTime, stakeAmount, rewardAddress, delegationFeeRate = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                stakeAmount: stakeAmount.toString(10),\n                rewardAddress\n            };\n            if (typeof delegationFeeRate !== \"undefined\") {\n                params.delegationFeeRate = delegationFeeRate.toString(10);\n            }\n            const response = yield this.callMethod(\"platform.addValidator\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Add a validator to a Subnet other than the Primary Network. The validator must validate the Primary Network for the entire duration they validate this Subnet.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the validator\n         * @param subnetID Either a {@link https://github.com/feross/buffer|Buffer} or a cb58 serialized string for the SubnetID or its alias.\n         * @param startTime Javascript Date object for the start time to validate\n         * @param endTime Javascript Date object for the end time to validate\n         * @param weight The validator’s weight used for sampling\n         *\n         * @returns Promise for the unsigned transaction. It must be signed (using sign) by the proper number of the Subnet’s control keys and by the key of the account paying the transaction fee before it can be issued.\n         */\n        this.addSubnetValidator = (username, password, nodeID, subnetID, startTime, endTime, weight) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                weight\n            };\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.addSubnetValidator\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Add a delegator to the Primary Network.\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param nodeID The node ID of the delegatee\n         * @param startTime Javascript Date object for when the delegator starts delegating\n         * @param endTime Javascript Date object for when the delegator starts delegating\n         * @param stakeAmount The amount of nDJTX the delegator is staking as\n         * a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddress The address of the account the staked DJTX and validation reward\n         * (if applicable) are sent to at endTime\n         *\n         * @returns Promise for an array of validator\"s stakingIDs.\n         */\n        this.addDelegator = (username, password, nodeID, startTime, endTime, stakeAmount, rewardAddress) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                nodeID,\n                startTime: startTime.getTime() / 1000,\n                endTime: endTime.getTime() / 1000,\n                stakeAmount: stakeAmount.toString(10),\n                rewardAddress\n            };\n            const response = yield this.callMethod(\"platform.addDelegator\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Create an unsigned transaction to create a new Subnet. The unsigned transaction must be\n         * signed with the key of the account paying the transaction fee. The Subnet’s ID is the ID of the transaction that creates it (ie the response from issueTx when issuing the signed transaction).\n         *\n         * @param username The username of the Keystore user\n         * @param password The password of the Keystore user\n         * @param controlKeys Array of platform addresses as strings\n         * @param threshold To add a validator to this Subnet, a transaction must have threshold\n         * signatures, where each signature is from a key whose address is an element of `controlKeys`\n         *\n         * @returns Promise for a string with the unsigned transaction encoded as base58.\n         */\n        this.createSubnet = (username, password, controlKeys, threshold) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                controlKeys,\n                threshold\n            };\n            const response = yield this.callMethod(\"platform.createSubnet\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Get the Subnet that validates a given blockchain.\n         *\n         * @param blockchainID Either a {@link https://github.com/feross/buffer|Buffer} or a cb58\n         * encoded string for the blockchainID or its alias.\n         *\n         * @returns Promise for a string of the subnetID that validates the blockchain.\n         */\n        this.validatedBy = (blockchainID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                blockchainID\n            };\n            const response = yield this.callMethod(\"platform.validatedBy\", params);\n            return response.data.result.subnetID;\n        });\n        /**\n         * Get the IDs of the blockchains a Subnet validates.\n         *\n         * @param subnetID Either a {@link https://github.com/feross/buffer|Buffer} or an DJTX\n         * serialized string for the SubnetID or its alias.\n         *\n         * @returns Promise for an array of blockchainIDs the subnet validates.\n         */\n        this.validates = (subnetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                subnetID\n            };\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.validates\", params);\n            return response.data.result.blockchainIDs;\n        });\n        /**\n         * Get all the blockchains that exist (excluding the P-Chain).\n         *\n         * @returns Promise for an array of objects containing fields \"id\", \"subnetID\", and \"vmID\".\n         */\n        this.getBlockchains = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"platform.getBlockchains\");\n            return response.data.result.blockchains;\n        });\n        /**\n         * Send DJTX from an account on the P-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the DJTX is sent from and which pays the\n         * transaction fee. After issuing this transaction, you must call the X-Chain’s importDJTX\n         * method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address on the X-Chain to send the DJTX to. Do not include X- in the address\n         * @param amount Amount of DJTX to export as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns Promise for an unsigned transaction to be signed by the account the the DJTX is\n         * sent from and pays the transaction fee.\n         */\n        this.exportDJTX = (username, password, amount, to) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                to,\n                amount: amount.toString(10)\n            };\n            const response = yield this.callMethod(\"platform.exportDJTX\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Send DJTX from an account on the P-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the DJTX is sent from and which pays\n         * the transaction fee. After issuing this transaction, you must call the X-Chain’s\n         * importDJTX method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The ID of the account the DJTX is sent to. This must be the same as the to\n         * argument in the corresponding call to the X-Chain’s exportDJTX\n         * @param sourceChain The chainID where the funds are coming from.\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.importDJTX = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"platform.importDJTX\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise string representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = \"\";\n            if (typeof tx === \"string\") {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toStringHex();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toStringHex();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new errors_1.TransactionError(\"Error - platform.issueTx: provided tx is not expected type of string, Buffer, or Tx\");\n            }\n            const params = {\n                tx: Transaction.toString(),\n                encoding: \"hex\"\n            };\n            const response = yield this.callMethod(\"platform.issueTx\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Returns an upper bound on the amount of tokens that exist. Not monotonically increasing because this number can go down if a staker\"s reward is denied.\n         */\n        this.getCurrentSupply = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"platform.getCurrentSupply\");\n            return new bn_js_1.default(response.data.result.supply, 10);\n        });\n        /**\n         * Returns the height of the platform chain.\n         */\n        this.getHeight = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"platform.getHeight\");\n            return new bn_js_1.default(response.data.result.height, 10);\n        });\n        /**\n         * Gets the minimum staking amount.\n         *\n         * @param refresh A boolean to bypass the local cached value of Minimum Stake Amount, polling the node instead.\n         */\n        this.getMinStake = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (refresh !== true &&\n                typeof this.minValidatorStake !== \"undefined\" &&\n                typeof this.minDelegatorStake !== \"undefined\") {\n                return {\n                    minValidatorStake: this.minValidatorStake,\n                    minDelegatorStake: this.minDelegatorStake\n                };\n            }\n            const response = yield this.callMethod(\"platform.getMinStake\");\n            this.minValidatorStake = new bn_js_1.default(response.data.result.minValidatorStake, 10);\n            this.minDelegatorStake = new bn_js_1.default(response.data.result.minDelegatorStake, 10);\n            return {\n                minValidatorStake: this.minValidatorStake,\n                minDelegatorStake: this.minDelegatorStake\n            };\n        });\n        /**\n         * getTotalStake() returns the total amount staked on the Primary Network\n         *\n         * @returns A big number representing total staked by validators on the primary network\n         */\n        this.getTotalStake = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"platform.getTotalStake\");\n            return new bn_js_1.default(response.data.result.stake, 10);\n        });\n        /**\n         * getMaxStakeAmount() returns the maximum amount of nDJTX staking to the named node during the time period.\n         *\n         * @param subnetID A Buffer or cb58 string representing subnet\n         * @param nodeID A string representing ID of the node whose stake amount is required during the given duration\n         * @param startTime A big number denoting start time of the duration during which stake amount of the node is required.\n         * @param endTime A big number denoting end time of the duration during which stake amount of the node is required.\n         * @returns A big number representing total staked by validators on the primary network\n         */\n        this.getMaxStakeAmount = (subnetID, nodeID, startTime, endTime) => __awaiter(this, void 0, void 0, function* () {\n            const now = (0, helperfunctions_1.UnixNow)();\n            if (startTime.gt(now) || endTime.lte(startTime)) {\n                throw new errors_1.TimeError(\"PlatformVMAPI.getMaxStakeAmount -- startTime must be in the past and endTime must come after startTime\");\n            }\n            const params = {\n                nodeID,\n                startTime,\n                endTime\n            };\n            if (typeof subnetID === \"string\") {\n                params.subnetID = subnetID;\n            }\n            else if (typeof subnetID !== \"undefined\") {\n                params.subnetID = bintools.cb58Encode(subnetID);\n            }\n            const response = yield this.callMethod(\"platform.getMaxStakeAmount\", params);\n            return new bn_js_1.default(response.data.result.amount, 10);\n        });\n        /**\n         * Sets the minimum stake cached in this class.\n         * @param minValidatorStake A {@link https://github.com/indutny/bn.js/|BN} to set the minimum stake amount cached in this class.\n         * @param minDelegatorStake A {@link https://github.com/indutny/bn.js/|BN} to set the minimum delegation amount cached in this class.\n         */\n        this.setMinStake = (minValidatorStake = undefined, minDelegatorStake = undefined) => {\n            if (typeof minValidatorStake !== \"undefined\") {\n                this.minValidatorStake = minValidatorStake;\n            }\n            if (typeof minDelegatorStake !== \"undefined\") {\n                this.minDelegatorStake = minDelegatorStake;\n            }\n        };\n        /**\n         * Gets the total amount staked for an array of addresses.\n         */\n        this.getStake = (addresses, encoding = \"hex\") => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                addresses,\n                encoding\n            };\n            const response = yield this.callMethod(\"platform.getStake\", params);\n            return {\n                staked: new bn_js_1.default(response.data.result.staked, 10),\n                stakedOutputs: response.data.result.stakedOutputs.map((stakedOutput) => {\n                    const transferableOutput = new outputs_1.TransferableOutput();\n                    let buf;\n                    if (encoding === \"cb58\") {\n                        buf = bintools.cb58Decode(stakedOutput);\n                    }\n                    else {\n                        buf = buffer_1.Buffer.from(stakedOutput.replace(/0x/g, \"\"), \"hex\");\n                    }\n                    transferableOutput.fromBuffer(buf, 2);\n                    return transferableOutput;\n                })\n            };\n        });\n        /**\n         * Get all the subnets that exist.\n         *\n         * @param ids IDs of the subnets to retrieve information about. If omitted, gets all subnets\n         *\n         * @returns Promise for an array of objects containing fields \"id\",\n         * \"controlKeys\", and \"threshold\".\n         */\n        this.getSubnets = (ids = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof ids !== undefined) {\n                params.ids = ids;\n            }\n            const response = yield this.callMethod(\"platform.getSubnets\", params);\n            return response.data.result.subnets;\n        });\n        /**\n         * Exports the private key for an address.\n         *\n         * @param username The name of the user with the private key\n         * @param password The password used to decrypt the private key\n         * @param address The address whose private key should be exported\n         *\n         * @returns Promise with the decrypted private key as store in the database\n         */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                address\n            };\n            const response = yield this.callMethod(\"platform.exportKey\", params);\n            return response.data.result.privateKey\n                ? response.data.result.privateKey\n                : response.data.result;\n        });\n        /**\n         * Give a user control over an address by providing the private key that controls the address.\n         *\n         * @param username The name of the user to store the private key\n         * @param password The password that unlocks the user\n         * @param privateKey A string representing the private key in the vm\"s format\n         *\n         * @returns The address for the imported private key.\n         */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey\n            };\n            const response = yield this.callMethod(\"platform.importKey\", params);\n            return response.data.result.address\n                ? response.data.result.address\n                : response.data.result;\n        });\n        /**\n         * Returns the treansaction data of a provided transaction ID by calling the node's `getTx` method.\n         *\n         * @param txID The string representation of the transaction ID\n         * @param encoding sets the format of the returned transaction. Can be, \"cb58\", \"hex\" or \"json\". Defaults to \"cb58\".\n         *\n         * @returns Returns a Promise string or object containing the bytes retrieved from the node\n         */\n        this.getTx = (txID, encoding = \"hex\") => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID,\n                encoding\n            };\n            const response = yield this.callMethod(\"platform.getTx\", params);\n            return response.data.result.tx\n                ? response.data.result.tx\n                : response.data.result;\n        });\n        /**\n         * Returns the status of a provided transaction ID by calling the node's `getTxStatus` method.\n         *\n         * @param txid The string representation of the transaction ID\n         * @param includeReason Return the reason tx was dropped, if applicable. Defaults to true\n         *\n         * @returns Returns a Promise string containing the status retrieved from the node and the reason a tx was dropped, if applicable.\n         */\n        this.getTxStatus = (txid, includeReason = true) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID: txid,\n                includeReason: includeReason\n            };\n            const response = yield this.callMethod(\"platform.getTxStatus\", params);\n            return response.data.result;\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param sourceChain A string for the chain to look for the UTXO\"s. Default is to use this chain, but if exported UTXOs exist from other chains, this can used to pull them instead.\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         * @param persistOpts Options available to persist these UTXOs in local storage\n         * @param encoding Optional.  is the encoding format to use for the payload argument. Can be either \"cb58\" or \"hex\". Defaults to \"hex\".\n         *\n         * @remarks\n         * persistOpts is optional and must be of type [[PersistanceOptions]]\n         *\n         */\n        this.getUTXOs = (addresses, sourceChain = undefined, limit = 0, startIndex = undefined, persistOpts = undefined, encoding = \"hex\") => __awaiter(this, void 0, void 0, function* () {\n            if (typeof addresses === \"string\") {\n                addresses = [addresses];\n            }\n            const params = {\n                addresses: addresses,\n                limit,\n                encoding\n            };\n            if (typeof startIndex !== \"undefined\" && startIndex) {\n                params.startIndex = startIndex;\n            }\n            if (typeof sourceChain !== \"undefined\") {\n                params.sourceChain = sourceChain;\n            }\n            const response = yield this.callMethod(\"platform.getUTXOs\", params);\n            const utxos = new utxos_1.UTXOSet();\n            let data = response.data.result.utxos;\n            if (persistOpts && typeof persistOpts === \"object\") {\n                if (this.db.has(persistOpts.getName())) {\n                    const selfArray = this.db.get(persistOpts.getName());\n                    if (Array.isArray(selfArray)) {\n                        utxos.addArray(data);\n                        const self = new utxos_1.UTXOSet();\n                        self.addArray(selfArray);\n                        self.mergeByRule(utxos, persistOpts.getMergeRule());\n                        data = self.getAllUTXOStrings();\n                    }\n                }\n                this.db.set(persistOpts.getName(), data, persistOpts.getOverwrite());\n            }\n            if (data.length > 0 && data[0].substring(0, 2) === \"0x\") {\n                const cb58Strs = [];\n                data.forEach((str) => {\n                    cb58Strs.push(bintools.cb58Encode(new buffer_1.Buffer(str.slice(2), \"hex\")));\n                });\n                utxos.addArray(cb58Strs, false);\n            }\n            else {\n                utxos.addArray(data, false);\n            }\n            response.data.result.utxos = utxos;\n            response.data.result.numFetched = parseInt(response.data.result.numFetched);\n            return response.data.result;\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, ownerAddresses, sourceChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildImportTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildImportTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildImportTx\").map((a) => bintools.stringToAddress(a));\n            let srcChain = undefined;\n            if (typeof sourceChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildImportTx: Source ChainID is undefined.\");\n            }\n            else if (typeof sourceChain === \"string\") {\n                srcChain = sourceChain;\n                sourceChain = bintools.cb58Decode(sourceChain);\n            }\n            else if (!(sourceChain instanceof buffer_1.Buffer)) {\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildImportTx: Invalid destinationChain type: \" +\n                    typeof sourceChain);\n            }\n            const atomicUTXOs = yield (yield this.getUTXOs(ownerAddresses, srcChain, 0, undefined)).utxos;\n            const djtxAssetID = yield this.getDJTXAssetID();\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const atomics = atomicUTXOs.getAllUTXOs();\n            const builtUnsignedTx = utxoset.buildImportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, atomics, sourceChain, this.getTxFee(), djtxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param destinationChain The chainid for where the assets will be sent.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (utxoset, amount, destinationChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            let prefixes = {};\n            toAddresses.map((a) => {\n                prefixes[a.split(\"-\")[0]] = true;\n            });\n            if (Object.keys(prefixes).length !== 1) {\n                throw new errors_1.AddressError(\"Error - PlatformVMAPI.buildExportTx: To addresses must have the same chainID prefix.\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID is undefined.\");\n            }\n            else if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(destinationChain); //\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildExportTx: Invalid destinationChain type: \" +\n                    typeof destinationChain);\n            }\n            if (destinationChain.length !== 32) {\n                throw new errors_1.ChainIdError(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID must be 32 bytes in length.\");\n            }\n            /*\n            if(bintools.cb58Encode(destinationChain) !== Defaults.network[this.core.getNetworkID()].X[\"blockchainID\"]) {\n              throw new Error(\"Error - PlatformVMAPI.buildExportTx: Destination ChainID must The X-Chain ID in the current version of AvalancheJS.\")\n            }*/\n            let to = [];\n            toAddresses.map((a) => {\n                to.push(bintools.stringToAddress(a));\n            });\n            const from = this._cleanAddressArray(fromAddresses, \"buildExportTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildExportTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const builtUnsignedTx = utxoset.buildExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, djtxAssetID, to, from, change, destinationChain, this.getTxFee(), djtxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned [[AddSubnetValidatorTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] manually and import the [[AddSubnetValidatorTx]] class directly.\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on.\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who pays the fees in DJTX\n         * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n         * @param nodeID The node ID of the validator being added.\n         * @param startTime The Unix time when the validator starts validating the Primary Network.\n         * @param endTime The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n         * @param weight The amount of weight for this subnet validator.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param subnetAuthCredentials Optional. An array of index and address to sign for each SubnetAuth.\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildAddSubnetValidatorTx = (utxoset, fromAddresses, changeAddresses, nodeID, startTime, endTime, weight, subnetID, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), subnetAuthCredentials = []) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, \"buildAddSubnetValidatorTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildAddSubnetValidatorTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const now = (0, helperfunctions_1.UnixNow)();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new Error(\"PlatformVMAPI.buildAddSubnetValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const builtUnsignedTx = utxoset.buildAddSubnetValidatorTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), from, change, (0, helperfunctions_1.NodeIDStringToBuffer)(nodeID), startTime, endTime, weight, subnetID, this.getDefaultTxFee(), djtxAssetID, memo, asOf, subnetAuthCredentials);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new Error(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned [[AddDelegatorTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] manually and import the [[AddDelegatorTx]] class directly.\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who received the staked tokens at the end of the staking period\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who own the staking UTXOs the fees in DJTX\n         * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n         * @param nodeID The node ID of the validator being added.\n         * @param startTime The Unix time when the validator starts validating the Primary Network.\n         * @param endTime The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n         * @param stakeAmount The amount being delegated as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddresses The addresses which will recieve the rewards from the delegated stake.\n         * @param rewardLocktime Optional. The locktime field created in the resulting reward outputs\n         * @param rewardThreshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildAddDelegatorTx = (utxoset, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardAddresses, rewardLocktime = new bn_js_1.default(0), rewardThreshold = 1, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildAddDelegatorTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildAddDelegatorTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildAddDelegatorTx\").map((a) => bintools.stringToAddress(a));\n            const rewards = this._cleanAddressArray(rewardAddresses, \"buildAddDelegatorTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const minStake = (yield this.getMinStake())[\"minDelegatorStake\"];\n            if (stakeAmount.lt(minStake)) {\n                throw new errors_1.StakeError(\"PlatformVMAPI.buildAddDelegatorTx -- stake amount must be at least \" +\n                    minStake.toString(10));\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const now = (0, helperfunctions_1.UnixNow)();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new errors_1.TimeError(\"PlatformVMAPI.buildAddDelegatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const builtUnsignedTx = utxoset.buildAddDelegatorTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), djtxAssetID, to, from, change, (0, helperfunctions_1.NodeIDStringToBuffer)(nodeID), startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewards, new bn_js_1.default(0), djtxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned [[AddValidatorTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] manually and import the [[AddValidatorTx]] class directly.\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who received the staked tokens at the end of the staking period\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who own the staking UTXOs the fees in DJTX\n         * @param changeAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who gets the change leftover from the fee payment\n         * @param nodeID The node ID of the validator being added.\n         * @param startTime The Unix time when the validator starts validating the Primary Network.\n         * @param endTime The Unix time when the validator stops validating the Primary Network (and staked DJTX is returned).\n         * @param stakeAmount The amount being delegated as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param rewardAddresses The addresses which will recieve the rewards from the delegated stake.\n         * @param delegationFee A number for the percentage of reward to be given to the validator when someone delegates to them. Must be between 0 and 100.\n         * @param rewardLocktime Optional. The locktime field created in the resulting reward outputs\n         * @param rewardThreshold Opional. The number of signatures required to spend the funds in the resultant reward UTXO. Default 1.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildAddValidatorTx = (utxoset, toAddresses, fromAddresses, changeAddresses, nodeID, startTime, endTime, stakeAmount, rewardAddresses, delegationFee, rewardLocktime = new bn_js_1.default(0), rewardThreshold = 1, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => __awaiter(this, void 0, void 0, function* () {\n            const to = this._cleanAddressArray(toAddresses, \"buildAddValidatorTx\").map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, \"buildAddValidatorTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildAddValidatorTx\").map((a) => bintools.stringToAddress(a));\n            const rewards = this._cleanAddressArray(rewardAddresses, \"buildAddValidatorTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const minStake = (yield this.getMinStake())[\"minValidatorStake\"];\n            if (stakeAmount.lt(minStake)) {\n                throw new errors_1.StakeError(\"PlatformVMAPI.buildAddValidatorTx -- stake amount must be at least \" +\n                    minStake.toString(10));\n            }\n            if (typeof delegationFee !== \"number\" ||\n                delegationFee > 100 ||\n                delegationFee < 0) {\n                throw new errors_1.DelegationFeeError(\"PlatformVMAPI.buildAddValidatorTx -- delegationFee must be a number between 0 and 100\");\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const now = (0, helperfunctions_1.UnixNow)();\n            if (startTime.lt(now) || endTime.lte(startTime)) {\n                throw new errors_1.TimeError(\"PlatformVMAPI.buildAddValidatorTx -- startTime must be in the future and endTime must come after startTime\");\n            }\n            const builtUnsignedTx = utxoset.buildAddValidatorTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), djtxAssetID, to, from, change, (0, helperfunctions_1.NodeIDStringToBuffer)(nodeID), startTime, endTime, stakeAmount, rewardLocktime, rewardThreshold, rewards, delegationFee, new bn_js_1.default(0), djtxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Class representing an unsigned [[CreateSubnetTx]] transaction.\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param subnetOwnerAddresses An array of addresses for owners of the new subnet\n         * @param subnetOwnerThreshold A number indicating the amount of signatures required to add validators to a subnet\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildCreateSubnetTx = (utxoset, fromAddresses, changeAddresses, subnetOwnerAddresses, subnetOwnerThreshold, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, \"buildCreateSubnetTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildCreateSubnetTx\").map((a) => bintools.stringToAddress(a));\n            const owners = this._cleanAddressArray(subnetOwnerAddresses, \"buildCreateSubnetTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const networkID = this.core.getNetworkID();\n            const blockchainID = bintools.cb58Decode(this.blockchainID);\n            const fee = this.getCreateSubnetTxFee();\n            const builtUnsignedTx = utxoset.buildCreateSubnetTx(networkID, blockchainID, from, change, owners, subnetOwnerThreshold, fee, djtxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx, this.getCreationTxFee()))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Build an unsigned [[CreateChainTx]].\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param subnetID Optional ID of the Subnet that validates this blockchain\n         * @param chainName Optional A human readable name for the chain; need not be unique\n         * @param vmID Optional ID of the VM running on the new chain\n         * @param fxIDs Optional IDs of the feature extensions running on the new chain\n         * @param genesisData Optional Byte representation of genesis state of the new chain\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param subnetAuthCredentials Optional. An array of index and address to sign for each SubnetAuth.\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         */\n        this.buildCreateChainTx = (utxoset, fromAddresses, changeAddresses, subnetID = undefined, chainName = undefined, vmID = undefined, fxIDs = undefined, genesisData = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), subnetAuthCredentials = []) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, \"buildCreateChainTx\").map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, \"buildCreateChainTx\").map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            fxIDs = fxIDs.sort();\n            const networkID = this.core.getNetworkID();\n            const blockchainID = bintools.cb58Decode(this.blockchainID);\n            const fee = this.getCreateChainTxFee();\n            const builtUnsignedTx = utxoset.buildCreateChainTx(networkID, blockchainID, from, change, subnetID, chainName, vmID, fxIDs, genesisData, fee, djtxAssetID, memo, asOf, subnetAuthCredentials);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx, this.getCreationTxFee()))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * @returns the current timestamp on chain.\n         */\n        this.getTimestamp = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"platform.getTimestamp\");\n            return response.data.result.timestamp;\n        });\n        /**\n         * @returns the UTXOs that were rewarded after the provided transaction\"s staking or delegation period ended.\n         */\n        this.getRewardUTXOs = (txID, encoding) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID,\n                encoding\n            };\n            const response = yield this.callMethod(\"platform.getRewardUTXOs\", params);\n            return response.data.result;\n        });\n        this.blockchainID = constants_1.PlatformChainID;\n        const netID = core.getNetworkID();\n        if (netID in constants_1.Defaults.network &&\n            this.blockchainID in constants_1.Defaults.network[`${netID}`]) {\n            const alias = constants_1.Defaults.network[`${netID}`][this.blockchainID][\"alias\"];\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainid = this.getBlockchainAlias()\n            ? this.getBlockchainAlias()\n            : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[`${i}`] === \"string\") {\n                    if (typeof this.parseAddress(addresses[`${i}`]) ===\n                        \"undefined\") {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - Invalid address format\");\n                    }\n                    addrs.push(addresses[`${i}`]);\n                }\n                else {\n                    const bech32 = \"bech32\";\n                    addrs.push(serialization.bufferToType(addresses[`${i}`], bech32, this.core.getHRP(), chainid));\n                }\n            }\n        }\n        return addrs;\n    }\n}\nexports.PlatformVMAPI = PlatformVMAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-Transactions\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMStandardTx = exports.EVMStandardUnsignedTx = exports.EVMStandardBaseTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst input_1 = require(\"./input\");\nconst output_1 = require(\"./output\");\nconst constants_1 = require(\"../utils/constants\");\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass EVMStandardBaseTx extends serialization_1.Serializable {\n    /**\n     * Class representing a StandardBaseTx which is the foundation for all transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     */\n    constructor(networkID = constants_1.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16)) {\n        super();\n        this._typeName = \"EVMStandardBaseTx\";\n        this._typeID = undefined;\n        this.networkID = buffer_1.Buffer.alloc(4);\n        this.blockchainID = buffer_1.Buffer.alloc(32);\n        this.networkID.writeUInt32BE(networkID, 0);\n        this.blockchainID = blockchainID;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { networkID: serializer.encoder(this.networkID, encoding, \"Buffer\", \"decimalString\"), blockchainID: serializer.encoder(this.blockchainID, encoding, \"Buffer\", \"cb58\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.networkID = serializer.decoder(fields[\"networkID\"], encoding, \"decimalString\", \"Buffer\", 4);\n        this.blockchainID = serializer.decoder(fields[\"blockchainID\"], encoding, \"cb58\", \"Buffer\", 32);\n    }\n    /**\n     * Returns the NetworkID as a number\n     */\n    getNetworkID() {\n        return this.networkID.readUInt32BE(0);\n    }\n    /**\n     * Returns the Buffer representation of the BlockchainID\n     */\n    getBlockchainID() {\n        return this.blockchainID;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardBaseTx]].\n     */\n    toBuffer() {\n        let bsize = this.networkID.length + this.blockchainID.length;\n        const barr = [this.networkID, this.blockchainID];\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Returns a base-58 representation of the [[StandardBaseTx]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.EVMStandardBaseTx = EVMStandardBaseTx;\n/**\n * Class representing an unsigned transaction.\n */\nclass EVMStandardUnsignedTx extends serialization_1.Serializable {\n    constructor(transaction = undefined, codecID = 0) {\n        super();\n        this._typeName = \"StandardUnsignedTx\";\n        this._typeID = undefined;\n        this.codecID = 0;\n        this.codecID = codecID;\n        this.transaction = transaction;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { codecID: serializer.encoder(this.codecID, encoding, \"number\", \"decimalString\", 2), transaction: this.transaction.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.codecID = serializer.decoder(fields[\"codecID\"], encoding, \"decimalString\", \"number\");\n    }\n    /**\n     * Returns the CodecID as a number\n     */\n    getCodecID() {\n        return this.codecID;\n    }\n    /**\n     * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n     */\n    getCodecIDBuffer() {\n        let codecBuf = buffer_1.Buffer.alloc(2);\n        codecBuf.writeUInt16BE(this.codecID, 0);\n        return codecBuf;\n    }\n    /**\n     * Returns the inputTotal as a BN\n     */\n    getInputTotal(assetID) {\n        const ins = [];\n        const aIDHex = assetID.toString(\"hex\");\n        let total = new bn_js_1.default(0);\n        ins.forEach((input) => {\n            // only check StandardAmountInputs\n            if (input.getInput() instanceof input_1.StandardAmountInput &&\n                aIDHex === input.getAssetID().toString(\"hex\")) {\n                const i = input.getInput();\n                total = total.add(i.getAmount());\n            }\n        });\n        return total;\n    }\n    /**\n     * Returns the outputTotal as a BN\n     */\n    getOutputTotal(assetID) {\n        const outs = [];\n        const aIDHex = assetID.toString(\"hex\");\n        let total = new bn_js_1.default(0);\n        outs.forEach((out) => {\n            // only check StandardAmountOutput\n            if (out.getOutput() instanceof output_1.StandardAmountOutput &&\n                aIDHex === out.getAssetID().toString(\"hex\")) {\n                const output = out.getOutput();\n                total = total.add(output.getAmount());\n            }\n        });\n        return total;\n    }\n    /**\n     * Returns the number of burned tokens as a BN\n     */\n    getBurn(assetID) {\n        return this.getInputTotal(assetID).sub(this.getOutputTotal(assetID));\n    }\n    toBuffer() {\n        const codecID = this.getCodecIDBuffer();\n        const txtype = buffer_1.Buffer.alloc(4);\n        txtype.writeUInt32BE(this.transaction.getTxType(), 0);\n        const basebuff = this.transaction.toBuffer();\n        return buffer_1.Buffer.concat([codecID, txtype, basebuff], codecID.length + txtype.length + basebuff.length);\n    }\n}\nexports.EVMStandardUnsignedTx = EVMStandardUnsignedTx;\n/**\n * Class representing a signed transaction.\n */\nclass EVMStandardTx extends serialization_1.Serializable {\n    /**\n     * Class representing a signed transaction.\n     *\n     * @param unsignedTx Optional [[StandardUnsignedTx]]\n     * @param signatures Optional array of [[Credential]]s\n     */\n    constructor(unsignedTx = undefined, credentials = undefined) {\n        super();\n        this._typeName = \"StandardTx\";\n        this._typeID = undefined;\n        this.unsignedTx = undefined;\n        this.credentials = [];\n        if (typeof unsignedTx !== \"undefined\") {\n            this.unsignedTx = unsignedTx;\n            if (typeof credentials !== \"undefined\") {\n                this.credentials = credentials;\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { unsignedTx: this.unsignedTx.serialize(encoding), credentials: this.credentials.map((c) => c.serialize(encoding)) });\n    }\n    /**\n     * Returns the [[StandardUnsignedTx]]\n     */\n    getUnsignedTx() {\n        return this.unsignedTx;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTx]].\n     */\n    toBuffer() {\n        const txbuff = this.unsignedTx.toBuffer();\n        let bsize = txbuff.length;\n        const credlen = buffer_1.Buffer.alloc(4);\n        credlen.writeUInt32BE(this.credentials.length, 0);\n        const barr = [txbuff, credlen];\n        bsize += credlen.length;\n        this.credentials.forEach((credential) => {\n            const credid = buffer_1.Buffer.alloc(4);\n            credid.writeUInt32BE(credential.getCredentialID(), 0);\n            barr.push(credid);\n            bsize += credid.length;\n            const credbuff = credential.toBuffer();\n            bsize += credbuff.length;\n            barr.push(credbuff);\n        });\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Takes a base-58 string containing an [[StandardTx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[StandardTx]]\n     *\n     * @returns The length of the raw [[StandardTx]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a cb58 representation of the [[StandardTx]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    toStringHex() {\n        return `0x${bintools.addChecksum(this.toBuffer()).toString(\"hex\")}`;\n    }\n}\nexports.EVMStandardTx = EVMStandardTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-ExportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Export transaction.\n */\nclass ExportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Export transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param destinationChain Optional chainid which identifies where the funds will send to.\n     * @param exportOuts Array of [[TransferableOutputs]]s used in the transaction\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, destinationChain = undefined, exportOuts = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ExportTx\";\n        this._typeID = constants_1.PlatformVMConstants.EXPORTTX;\n        this.destinationChain = buffer_1.Buffer.alloc(32);\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.exportOuts = [];\n        this.destinationChain = destinationChain; //do not correct, it should bomb on toBuffer if not provided\n        if (typeof exportOuts !== \"undefined\" && Array.isArray(exportOuts)) {\n            for (let i = 0; i < exportOuts.length; i++) {\n                if (!(exportOuts[`${i}`] instanceof outputs_1.TransferableOutput)) {\n                    throw new errors_1.TransferableOutputError(\"Error - ExportTx.constructor: invalid TransferableOutput in array parameter 'exportOuts'\");\n                }\n            }\n            this.exportOuts = exportOuts;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { destinationChain: serialization.encoder(this.destinationChain, encoding, \"Buffer\", \"cb58\"), exportOuts: this.exportOuts.map((e) => e.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.destinationChain = serialization.decoder(fields[\"destinationChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.exportOuts = fields[\"exportOuts\"].map((e) => {\n            let eo = new outputs_1.TransferableOutput();\n            eo.deserialize(e, encoding);\n            return eo;\n        });\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n    }\n    /**\n     * Returns the id of the [[ExportTx]]\n     */\n    getTxType() {\n        return constants_1.PlatformVMConstants.EXPORTTX;\n    }\n    /**\n     * Returns an array of [[TransferableOutput]]s in this transaction.\n     */\n    getExportOutputs() {\n        return this.exportOuts;\n    }\n    /**\n     * Returns the total exported amount as a {@link https://github.com/indutny/bn.js/|BN}.\n     */\n    getExportTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            val = val.add(this.exportOuts[`${i}`].getOutput().getAmount());\n        }\n        return val;\n    }\n    getTotalOuts() {\n        return [\n            ...this.getOuts(),\n            ...this.getExportOutputs()\n        ];\n    }\n    /**\n     * Returns the destinationChain as a {@link https://github.com/feross/buffer|Buffer}\n     */\n    getDestinationChain() {\n        return this.destinationChain;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ExportTx]], parses it, populates the class, and returns the length of the [[ExportTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ExportTx]]\n     *\n     * @returns The length of the raw [[ExportTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportOuts.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n     */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n        let barr = [super.toBuffer(), this.destinationChain, this.numOuts];\n        this.exportOuts = this.exportOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            barr.push(this.exportOuts[`${i}`].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    clone() {\n        let newbase = new ExportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ExportTx(...args);\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9tZXRyaWNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9hcGlcIlxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tx = exports.UnsignedTx = exports.SelectTxClass = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst basetx_1 = require(\"./basetx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst validationtx_1 = require(\"./validationtx\");\nconst createsubnettx_1 = require(\"./createsubnettx\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[BaseTx]] instance.\n *\n * @param txtype The id of the transaction type\n *\n * @returns An instance of an [[BaseTx]]-extended class.\n */\nconst SelectTxClass = (txtype, ...args) => {\n    if (txtype === constants_1.PlatformVMConstants.BASETX) {\n        return new basetx_1.BaseTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.IMPORTTX) {\n        return new importtx_1.ImportTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.EXPORTTX) {\n        return new exporttx_1.ExportTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.ADDDELEGATORTX) {\n        return new validationtx_1.AddDelegatorTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.ADDVALIDATORTX) {\n        return new validationtx_1.AddValidatorTx(...args);\n    }\n    else if (txtype === constants_1.PlatformVMConstants.CREATESUBNETTX) {\n        return new createsubnettx_1.CreateSubnetTx(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.TransactionError(\"Error - SelectTxClass: unknown txtype\");\n};\nexports.SelectTxClass = SelectTxClass;\nclass UnsignedTx extends tx_1.StandardUnsignedTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UnsignedTx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.transaction = (0, exports.SelectTxClass)(fields[\"transaction\"][\"_typeID\"]);\n        this.transaction.deserialize(fields[\"transaction\"], encoding);\n    }\n    getTransaction() {\n        return this.transaction;\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.transaction = (0, exports.SelectTxClass)(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from((0, create_hash_1.default)(\"sha256\").update(txbuff).digest());\n        const creds = this.transaction.sign(msg, kc);\n        return new Tx(this, creds);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends tx_1.StandardTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Tx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.unsignedTx = new UnsignedTx();\n        this.unsignedTx.deserialize(fields[\"unsignedTx\"], encoding);\n        this.credentials = [];\n        for (let i = 0; i < fields[\"credentials\"].length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(fields[\"credentials\"][`${i}`][\"_typeID\"]);\n            cred.deserialize(fields[\"credentials\"][`${i}`], encoding);\n            this.credentials.push(cred);\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools\n                .copyFrom(bytes, offset, offset + 4)\n                .readUInt32BE(0);\n            offset += 4;\n            const cred = (0, credentials_1.SelectCredentialClass)(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Constants\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlatformVMConstants = void 0;\nclass PlatformVMConstants {\n}\nexports.PlatformVMConstants = PlatformVMConstants;\nPlatformVMConstants.LATESTCODEC = 0;\nPlatformVMConstants.SECPFXID = 0;\nPlatformVMConstants.SECPXFEROUTPUTID = 7;\nPlatformVMConstants.SUBNETAUTHID = 10;\nPlatformVMConstants.SECPOWNEROUTPUTID = 11;\nPlatformVMConstants.STAKEABLELOCKOUTID = 22;\nPlatformVMConstants.SECPINPUTID = 5;\nPlatformVMConstants.STAKEABLELOCKINID = 21;\nPlatformVMConstants.LOCKEDSTAKEABLES = [\n    PlatformVMConstants.STAKEABLELOCKINID,\n    PlatformVMConstants.STAKEABLELOCKOUTID\n];\nPlatformVMConstants.BASETX = 0;\nPlatformVMConstants.SUBNETAUTH = 10;\nPlatformVMConstants.ADDVALIDATORTX = 12;\nPlatformVMConstants.ADDSUBNETVALIDATORTX = 13;\nPlatformVMConstants.ADDDELEGATORTX = 14;\nPlatformVMConstants.CREATECHAINTX = 15;\nPlatformVMConstants.CREATESUBNETTX = 16;\nPlatformVMConstants.IMPORTTX = 17;\nPlatformVMConstants.EXPORTTX = 18;\nPlatformVMConstants.ADVANCETIMETX = 19;\nPlatformVMConstants.REWARDVALIDATORTX = 20;\nPlatformVMConstants.SECPCREDENTIAL = 9;\nPlatformVMConstants.ASSETIDLEN = 32;\nPlatformVMConstants.BLOCKCHAINIDLEN = 32;\nPlatformVMConstants.SYMBOLMAXLEN = 4;\nPlatformVMConstants.ASSETNAMELEN = 128;\nPlatformVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvcGxhdGZvcm12bS9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgsTUFBYSxtQkFBbUI7O0FBQWhDLGtEQXVEQztBQXREUSwrQkFBVyxHQUFXLENBQUMsQ0FBQTtBQUV2Qiw0QkFBUSxHQUFXLENBQUMsQ0FBQTtBQUVwQixvQ0FBZ0IsR0FBVyxDQUFDLENBQUE7QUFFNUIsZ0NBQVksR0FBVyxFQUFFLENBQUE7QUFFekIscUNBQWlCLEdBQVcsRUFBRSxDQUFBO0FBRTlCLHNDQUFrQixHQUFXLEVBQUUsQ0FBQTtBQUUvQiwrQkFBVyxHQUFXLENBQUMsQ0FBQTtBQUV2QixxQ0FBaUIsR0FBVyxFQUFFLENBQUE7QUFFOUIsb0NBQWdCLEdBQWE7SUFDbEMsbUJBQW1CLENBQUMsaUJBQWlCO0lBQ3JDLG1CQUFtQixDQUFDLGtCQUFrQjtDQUN2QyxDQUFBO0FBRU0sMEJBQU0sR0FBVyxDQUFDLENBQUE7QUFFbEIsOEJBQVUsR0FBVyxFQUFFLENBQUE7QUFFdkIsa0NBQWMsR0FBVyxFQUFFLENBQUE7QUFFM0Isd0NBQW9CLEdBQVcsRUFBRSxDQUFBO0FBRWpDLGtDQUFjLEdBQVcsRUFBRSxDQUFBO0FBRTNCLGlDQUFhLEdBQVcsRUFBRSxDQUFBO0FBRTFCLGtDQUFjLEdBQVcsRUFBRSxDQUFBO0FBRTNCLDRCQUFRLEdBQVcsRUFBRSxDQUFBO0FBRXJCLDRCQUFRLEdBQVcsRUFBRSxDQUFBO0FBRXJCLGlDQUFhLEdBQVcsRUFBRSxDQUFBO0FBRTFCLHFDQUFpQixHQUFXLEVBQUUsQ0FBQTtBQUU5QixrQ0FBYyxHQUFXLENBQUMsQ0FBQTtBQUUxQiw4QkFBVSxHQUFXLEVBQUUsQ0FBQTtBQUV2QixtQ0FBZSxHQUFXLEVBQUUsQ0FBQTtBQUU1QixnQ0FBWSxHQUFXLENBQUMsQ0FBQTtBQUV4QixnQ0FBWSxHQUFXLEdBQUcsQ0FBQTtBQUUxQixpQ0FBYSxHQUFXLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1QbGF0Zm9ybVZNLUNvbnN0YW50c1xuICovXG5cbmV4cG9ydCBjbGFzcyBQbGF0Zm9ybVZNQ29uc3RhbnRzIHtcbiAgc3RhdGljIExBVEVTVENPREVDOiBudW1iZXIgPSAwXG5cbiAgc3RhdGljIFNFQ1BGWElEOiBudW1iZXIgPSAwXG5cbiAgc3RhdGljIFNFQ1BYRkVST1VUUFVUSUQ6IG51bWJlciA9IDdcblxuICBzdGF0aWMgU1VCTkVUQVVUSElEOiBudW1iZXIgPSAxMFxuXG4gIHN0YXRpYyBTRUNQT1dORVJPVVRQVVRJRDogbnVtYmVyID0gMTFcblxuICBzdGF0aWMgU1RBS0VBQkxFTE9DS09VVElEOiBudW1iZXIgPSAyMlxuXG4gIHN0YXRpYyBTRUNQSU5QVVRJRDogbnVtYmVyID0gNVxuXG4gIHN0YXRpYyBTVEFLRUFCTEVMT0NLSU5JRDogbnVtYmVyID0gMjFcblxuICBzdGF0aWMgTE9DS0VEU1RBS0VBQkxFUzogbnVtYmVyW10gPSBbXG4gICAgUGxhdGZvcm1WTUNvbnN0YW50cy5TVEFLRUFCTEVMT0NLSU5JRCxcbiAgICBQbGF0Zm9ybVZNQ29uc3RhbnRzLlNUQUtFQUJMRUxPQ0tPVVRJRFxuICBdXG5cbiAgc3RhdGljIEJBU0VUWDogbnVtYmVyID0gMFxuXG4gIHN0YXRpYyBTVUJORVRBVVRIOiBudW1iZXIgPSAxMFxuXG4gIHN0YXRpYyBBRERWQUxJREFUT1JUWDogbnVtYmVyID0gMTJcblxuICBzdGF0aWMgQUREU1VCTkVUVkFMSURBVE9SVFg6IG51bWJlciA9IDEzXG5cbiAgc3RhdGljIEFERERFTEVHQVRPUlRYOiBudW1iZXIgPSAxNFxuXG4gIHN0YXRpYyBDUkVBVEVDSEFJTlRYOiBudW1iZXIgPSAxNVxuXG4gIHN0YXRpYyBDUkVBVEVTVUJORVRUWDogbnVtYmVyID0gMTZcblxuICBzdGF0aWMgSU1QT1JUVFg6IG51bWJlciA9IDE3XG5cbiAgc3RhdGljIEVYUE9SVFRYOiBudW1iZXIgPSAxOFxuXG4gIHN0YXRpYyBBRFZBTkNFVElNRVRYOiBudW1iZXIgPSAxOVxuXG4gIHN0YXRpYyBSRVdBUkRWQUxJREFUT1JUWDogbnVtYmVyID0gMjBcblxuICBzdGF0aWMgU0VDUENSRURFTlRJQUw6IG51bWJlciA9IDlcblxuICBzdGF0aWMgQVNTRVRJRExFTjogbnVtYmVyID0gMzJcblxuICBzdGF0aWMgQkxPQ0tDSEFJTklETEVOOiBudW1iZXIgPSAzMlxuXG4gIHN0YXRpYyBTWU1CT0xNQVhMRU46IG51bWJlciA9IDRcblxuICBzdGF0aWMgQVNTRVROQU1FTEVOOiBudW1iZXIgPSAxMjhcblxuICBzdGF0aWMgQUREUkVTU0xFTkdUSDogbnVtYmVyID0gMjBcbn1cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardTx = exports.StandardUnsignedTx = exports.StandardBaseTx = void 0;\n/**\n * @packageDocumentation\n * @module Common-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst input_1 = require(\"./input\");\nconst output_1 = require(\"./output\");\nconst constants_1 = require(\"../utils/constants\");\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst cb58 = \"cb58\";\nconst hex = \"hex\";\nconst decimalString = \"decimalString\";\nconst buffer = \"Buffer\";\n/**\n * Class representing a base for all transactions.\n */\nclass StandardBaseTx extends serialization_1.Serializable {\n    /**\n     * Class representing a StandardBaseTx which is the foundation for all transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkID = constants_1.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super();\n        this._typeName = \"StandardBaseTx\";\n        this._typeID = undefined;\n        this.networkID = buffer_1.Buffer.alloc(4);\n        this.blockchainID = buffer_1.Buffer.alloc(32);\n        this.numouts = buffer_1.Buffer.alloc(4);\n        this.numins = buffer_1.Buffer.alloc(4);\n        this.memo = buffer_1.Buffer.alloc(0);\n        this.networkID.writeUInt32BE(networkID, 0);\n        this.blockchainID = blockchainID;\n        if (typeof memo != \"undefined\") {\n            this.memo = memo;\n        }\n        if (typeof ins !== \"undefined\" && typeof outs !== \"undefined\") {\n            this.numouts.writeUInt32BE(outs.length, 0);\n            this.outs = outs.sort(output_1.StandardTransferableOutput.comparator());\n            this.numins.writeUInt32BE(ins.length, 0);\n            this.ins = ins.sort(input_1.StandardTransferableInput.comparator());\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { networkID: serialization.encoder(this.networkID, encoding, buffer, decimalString), blockchainID: serialization.encoder(this.blockchainID, encoding, buffer, cb58), outs: this.outs.map((o) => o.serialize(encoding)), ins: this.ins.map((i) => i.serialize(encoding)), memo: serialization.encoder(this.memo, encoding, buffer, hex) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.networkID = serialization.decoder(fields[\"networkID\"], encoding, decimalString, buffer, 4);\n        this.blockchainID = serialization.decoder(fields[\"blockchainID\"], encoding, cb58, buffer, 32);\n        this.memo = serialization.decoder(fields[\"memo\"], encoding, hex, buffer);\n    }\n    /**\n     * Returns the NetworkID as a number\n     */\n    getNetworkID() {\n        return this.networkID.readUInt32BE(0);\n    }\n    /**\n     * Returns the Buffer representation of the BlockchainID\n     */\n    getBlockchainID() {\n        return this.blockchainID;\n    }\n    /**\n     * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the memo\n     */\n    getMemo() {\n        return this.memo;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardBaseTx]].\n     */\n    toBuffer() {\n        this.outs.sort(output_1.StandardTransferableOutput.comparator());\n        this.ins.sort(input_1.StandardTransferableInput.comparator());\n        this.numouts.writeUInt32BE(this.outs.length, 0);\n        this.numins.writeUInt32BE(this.ins.length, 0);\n        let bsize = this.networkID.length + this.blockchainID.length + this.numouts.length;\n        const barr = [this.networkID, this.blockchainID, this.numouts];\n        for (let i = 0; i < this.outs.length; i++) {\n            const b = this.outs[`${i}`].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        barr.push(this.numins);\n        bsize += this.numins.length;\n        for (let i = 0; i < this.ins.length; i++) {\n            const b = this.ins[`${i}`].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        let memolen = buffer_1.Buffer.alloc(4);\n        memolen.writeUInt32BE(this.memo.length, 0);\n        barr.push(memolen);\n        bsize += 4;\n        barr.push(this.memo);\n        bsize += this.memo.length;\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Returns a base-58 representation of the [[StandardBaseTx]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n    toStringHex() {\n        return `0x${bintools.addChecksum(this.toBuffer()).toString(\"hex\")}`;\n    }\n}\nexports.StandardBaseTx = StandardBaseTx;\n/**\n * Class representing an unsigned transaction.\n */\nclass StandardUnsignedTx extends serialization_1.Serializable {\n    constructor(transaction = undefined, codecID = 0) {\n        super();\n        this._typeName = \"StandardUnsignedTx\";\n        this._typeID = undefined;\n        this.codecID = 0;\n        this.codecID = codecID;\n        this.transaction = transaction;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { codecID: serialization.encoder(this.codecID, encoding, \"number\", \"decimalString\", 2), transaction: this.transaction.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.codecID = serialization.decoder(fields[\"codecID\"], encoding, \"decimalString\", \"number\");\n    }\n    /**\n     * Returns the CodecID as a number\n     */\n    getCodecID() {\n        return this.codecID;\n    }\n    /**\n     * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID\n     */\n    getCodecIDBuffer() {\n        let codecBuf = buffer_1.Buffer.alloc(2);\n        codecBuf.writeUInt16BE(this.codecID, 0);\n        return codecBuf;\n    }\n    /**\n     * Returns the inputTotal as a BN\n     */\n    getInputTotal(assetID) {\n        const ins = this.getTransaction().getIns();\n        const aIDHex = assetID.toString(\"hex\");\n        let total = new bn_js_1.default(0);\n        for (let i = 0; i < ins.length; i++) {\n            // only check StandardAmountInputs\n            if (ins[`${i}`].getInput() instanceof input_1.StandardAmountInput &&\n                aIDHex === ins[`${i}`].getAssetID().toString(\"hex\")) {\n                const input = ins[`${i}`].getInput();\n                total = total.add(input.getAmount());\n            }\n        }\n        return total;\n    }\n    /**\n     * Returns the outputTotal as a BN\n     */\n    getOutputTotal(assetID) {\n        const outs = this.getTransaction().getTotalOuts();\n        const aIDHex = assetID.toString(\"hex\");\n        let total = new bn_js_1.default(0);\n        for (let i = 0; i < outs.length; i++) {\n            // only check StandardAmountOutput\n            if (outs[`${i}`].getOutput() instanceof output_1.StandardAmountOutput &&\n                aIDHex === outs[`${i}`].getAssetID().toString(\"hex\")) {\n                const output = outs[`${i}`].getOutput();\n                total = total.add(output.getAmount());\n            }\n        }\n        return total;\n    }\n    /**\n     * Returns the number of burned tokens as a BN\n     */\n    getBurn(assetID) {\n        return this.getInputTotal(assetID).sub(this.getOutputTotal(assetID));\n    }\n    toBuffer() {\n        const codecBuf = buffer_1.Buffer.alloc(2);\n        codecBuf.writeUInt16BE(this.transaction.getCodecID(), 0);\n        const txtype = buffer_1.Buffer.alloc(4);\n        txtype.writeUInt32BE(this.transaction.getTxType(), 0);\n        const basebuff = this.transaction.toBuffer();\n        return buffer_1.Buffer.concat([codecBuf, txtype, basebuff], codecBuf.length + txtype.length + basebuff.length);\n    }\n}\nexports.StandardUnsignedTx = StandardUnsignedTx;\n/**\n * Class representing a signed transaction.\n */\nclass StandardTx extends serialization_1.Serializable {\n    /**\n     * Class representing a signed transaction.\n     *\n     * @param unsignedTx Optional [[StandardUnsignedTx]]\n     * @param signatures Optional array of [[Credential]]s\n     */\n    constructor(unsignedTx = undefined, credentials = undefined) {\n        super();\n        this._typeName = \"StandardTx\";\n        this._typeID = undefined;\n        this.unsignedTx = undefined;\n        this.credentials = [];\n        if (typeof unsignedTx !== \"undefined\") {\n            this.unsignedTx = unsignedTx;\n            if (typeof credentials !== \"undefined\") {\n                this.credentials = credentials;\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { unsignedTx: this.unsignedTx.serialize(encoding), credentials: this.credentials.map((c) => c.serialize(encoding)) });\n    }\n    /**\n     * Returns the [[Credential[]]]\n     */\n    getCredentials() {\n        return this.credentials;\n    }\n    /**\n     * Returns the [[StandardUnsignedTx]]\n     */\n    getUnsignedTx() {\n        return this.unsignedTx;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[StandardTx]].\n     */\n    toBuffer() {\n        const tx = this.unsignedTx.getTransaction();\n        const codecID = tx.getCodecID();\n        const txbuff = this.unsignedTx.toBuffer();\n        let bsize = txbuff.length;\n        const credlen = buffer_1.Buffer.alloc(4);\n        credlen.writeUInt32BE(this.credentials.length, 0);\n        const barr = [txbuff, credlen];\n        bsize += credlen.length;\n        for (let i = 0; i < this.credentials.length; i++) {\n            this.credentials[`${i}`].setCodecID(codecID);\n            const credID = buffer_1.Buffer.alloc(4);\n            credID.writeUInt32BE(this.credentials[`${i}`].getCredentialID(), 0);\n            barr.push(credID);\n            bsize += credID.length;\n            const credbuff = this.credentials[`${i}`].toBuffer();\n            bsize += credbuff.length;\n            barr.push(credbuff);\n        }\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Takes a base-58 string containing an [[StandardTx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[StandardTx]]\n     *\n     * @returns The length of the raw [[StandardTx]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a cb58 representation of the [[StandardTx]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    toStringHex() {\n        return `0x${bintools.addChecksum(this.toBuffer()).toString(\"hex\")}`;\n    }\n}\nexports.StandardTx = StandardTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Credential = exports.Signature = exports.SigIdx = void 0;\n/**\n * @packageDocumentation\n * @module Common-Signature\n */\nconst nbytes_1 = require(\"./nbytes\");\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../utils/bintools\"));\nconst serialization_1 = require(\"../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Type representing a [[Signature]] index used in [[Input]]\n */\nclass SigIdx extends nbytes_1.NBytes {\n    /**\n     * Type representing a [[Signature]] index used in [[Input]]\n     */\n    constructor() {\n        super();\n        this._typeName = \"SigIdx\";\n        this._typeID = undefined;\n        this.source = buffer_1.Buffer.alloc(20);\n        this.bytes = buffer_1.Buffer.alloc(4);\n        this.bsize = 4;\n        /**\n         * Sets the source address for the signature\n         */\n        this.setSource = (address) => {\n            this.source = address;\n        };\n        /**\n         * Retrieves the source address for the signature\n         */\n        this.getSource = () => this.source;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { source: serialization.encoder(this.source, encoding, \"Buffer\", \"hex\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.source = serialization.decoder(fields[\"source\"], encoding, \"hex\", \"Buffer\");\n    }\n    clone() {\n        let newbase = new SigIdx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SigIdx();\n    }\n}\nexports.SigIdx = SigIdx;\n/**\n * Signature for a [[Tx]]\n */\nclass Signature extends nbytes_1.NBytes {\n    /**\n     * Signature for a [[Tx]]\n     */\n    constructor() {\n        super();\n        this._typeName = \"Signature\";\n        this._typeID = undefined;\n        //serialize and deserialize both are inherited\n        this.bytes = buffer_1.Buffer.alloc(65);\n        this.bsize = 65;\n    }\n    clone() {\n        let newbase = new Signature();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new Signature();\n    }\n}\nexports.Signature = Signature;\nclass Credential extends serialization_1.Serializable {\n    constructor(sigarray = undefined) {\n        super();\n        this._typeName = \"Credential\";\n        this._typeID = undefined;\n        this.sigArray = [];\n        /**\n         * Adds a signature to the credentials and returns the index off the added signature.\n         */\n        this.addSignature = (sig) => {\n            this.sigArray.push(sig);\n            return this.sigArray.length - 1;\n        };\n        if (typeof sigarray !== \"undefined\") {\n            /* istanbul ignore next */\n            this.sigArray = sigarray;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sigArray: this.sigArray.map((s) => s.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sigArray = fields[\"sigArray\"].map((s) => {\n            let sig = new Signature();\n            sig.deserialize(s, encoding);\n            return sig;\n        });\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) { }\n    fromBuffer(bytes, offset = 0) {\n        const siglen = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.sigArray = [];\n        for (let i = 0; i < siglen; i++) {\n            const sig = new Signature();\n            offset = sig.fromBuffer(bytes, offset);\n            this.sigArray.push(sig);\n        }\n        return offset;\n    }\n    toBuffer() {\n        const siglen = buffer_1.Buffer.alloc(4);\n        siglen.writeInt32BE(this.sigArray.length, 0);\n        const barr = [siglen];\n        let bsize = siglen.length;\n        for (let i = 0; i < this.sigArray.length; i++) {\n            const sigbuff = this.sigArray[`${i}`].toBuffer();\n            bsize += sigbuff.length;\n            barr.push(sigbuff);\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.Credential = Credential;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateChainTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-CreateChainTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst _1 = require(\".\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned CreateChainTx transaction.\n */\nclass CreateChainTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned CreateChain transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param subnetID Optional ID of the Subnet that validates this blockchain.\n     * @param chainName Optional A human readable name for the chain; need not be unique\n     * @param vmID Optional ID of the VM running on the new chain\n     * @param fxIDs Optional IDs of the feature extensions running on the new chain\n     * @param genesisData Optional Byte representation of genesis state of the new chain\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, subnetID = undefined, chainName = undefined, vmID = undefined, fxIDs = undefined, genesisData = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"CreateChainTx\";\n        this._typeID = constants_1.PlatformVMConstants.CREATECHAINTX;\n        this.subnetID = buffer_1.Buffer.alloc(32);\n        this.chainName = \"\";\n        this.vmID = buffer_1.Buffer.alloc(32);\n        this.numFXIDs = buffer_1.Buffer.alloc(4);\n        this.fxIDs = [];\n        this.genesisData = buffer_1.Buffer.alloc(32);\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of subnet auth signers\n        if (typeof subnetID != \"undefined\") {\n            if (typeof subnetID === \"string\") {\n                this.subnetID = bintools.cb58Decode(subnetID);\n            }\n            else {\n                this.subnetID = subnetID;\n            }\n        }\n        if (typeof chainName != \"undefined\") {\n            this.chainName = chainName;\n        }\n        if (typeof vmID != \"undefined\") {\n            const buf = buffer_1.Buffer.alloc(32);\n            buf.write(vmID, 0, vmID.length);\n            this.vmID = buf;\n        }\n        if (typeof fxIDs != \"undefined\") {\n            this.numFXIDs.writeUInt32BE(fxIDs.length, 0);\n            const fxIDBufs = [];\n            fxIDs.forEach((fxID) => {\n                const buf = buffer_1.Buffer.alloc(32);\n                buf.write(fxID, 0, fxID.length, \"utf8\");\n                fxIDBufs.push(buf);\n            });\n            this.fxIDs = fxIDBufs;\n        }\n        if (typeof genesisData != \"undefined\" && typeof genesisData != \"string\") {\n            this.genesisData = genesisData.toBuffer();\n        }\n        else if (typeof genesisData == \"string\") {\n            this.genesisData = buffer_1.Buffer.from(genesisData);\n        }\n        const subnetAuth = new _1.SubnetAuth();\n        this.subnetAuth = subnetAuth;\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { subnetID: serialization.encoder(this.subnetID, encoding, \"Buffer\", \"cb58\") });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.subnetID = serialization.decoder(fields[\"subnetID\"], encoding, \"cb58\", \"Buffer\", 32);\n        // this.exportOuts = fields[\"exportOuts\"].map((e: object) => {\n        //   let eo: TransferableOutput = new TransferableOutput()\n        //   eo.deserialize(e, encoding)\n        //   return eo\n        // })\n    }\n    /**\n     * Returns the id of the [[CreateChainTx]]\n     */\n    getTxType() {\n        return constants_1.PlatformVMConstants.CREATECHAINTX;\n    }\n    /**\n     * Returns the subnetAuth\n     */\n    getSubnetAuth() {\n        return this.subnetAuth;\n    }\n    /**\n     * Returns the subnetID as a string\n     */\n    getSubnetID() {\n        return bintools.cb58Encode(this.subnetID);\n    }\n    /**\n     * Returns a string of the chainName\n     */\n    getChainName() {\n        return this.chainName;\n    }\n    /**\n     * Returns a Buffer of the vmID\n     */\n    getVMID() {\n        return this.vmID;\n    }\n    /**\n     * Returns an array of fxIDs as Buffers\n     */\n    getFXIDs() {\n        return this.fxIDs;\n    }\n    /**\n     * Returns a string of the genesisData\n     */\n    getGenesisData() {\n        return bintools.cb58Encode(this.genesisData);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[CreateChainTx]], parses it, populates the class, and returns the length of the [[CreateChainTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[CreateChainTx]]\n     *\n     * @returns The length of the raw [[CreateChainTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.subnetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const chainNameSize = bintools\n            .copyFrom(bytes, offset, offset + 2)\n            .readUInt16BE(0);\n        offset += 2;\n        this.chainName = bintools\n            .copyFrom(bytes, offset, offset + chainNameSize)\n            .toString(\"utf8\");\n        offset += chainNameSize;\n        this.vmID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numFXIDs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const nfxids = parseInt(this.numFXIDs.toString(\"hex\"), 10);\n        for (let i = 0; i < nfxids; i++) {\n            this.fxIDs.push(bintools.copyFrom(bytes, offset, offset + 32));\n            offset += 32;\n        }\n        const genesisDataSize = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.genesisData = bintools.copyFrom(bytes, offset, offset + genesisDataSize);\n        offset += genesisDataSize;\n        const sa = new _1.SubnetAuth();\n        offset += sa.fromBuffer(bintools.copyFrom(bytes, offset));\n        this.subnetAuth = sa;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateChainTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const chainNameBuff = buffer_1.Buffer.alloc(this.chainName.length);\n        chainNameBuff.write(this.chainName, 0, this.chainName.length, \"utf8\");\n        const chainNameSize = buffer_1.Buffer.alloc(2);\n        chainNameSize.writeUIntBE(this.chainName.length, 0, 2);\n        let bsize = superbuff.length +\n            this.subnetID.length +\n            chainNameSize.length +\n            chainNameBuff.length +\n            this.vmID.length +\n            this.numFXIDs.length;\n        const barr = [\n            superbuff,\n            this.subnetID,\n            chainNameSize,\n            chainNameBuff,\n            this.vmID,\n            this.numFXIDs\n        ];\n        this.fxIDs.forEach((fxID) => {\n            bsize += fxID.length;\n            barr.push(fxID);\n        });\n        bsize += 4;\n        bsize += this.genesisData.length;\n        const gdLength = buffer_1.Buffer.alloc(4);\n        gdLength.writeUIntBE(this.genesisData.length, 0, 4);\n        barr.push(gdLength);\n        barr.push(this.genesisData);\n        bsize += this.subnetAuth.toBuffer().length;\n        barr.push(this.subnetAuth.toBuffer());\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    clone() {\n        const newCreateChainTx = new CreateChainTx();\n        newCreateChainTx.fromBuffer(this.toBuffer());\n        return newCreateChainTx;\n    }\n    create(...args) {\n        return new CreateChainTx(...args);\n    }\n    /**\n     * Creates and adds a [[SigIdx]] to the [[AddSubnetValidatorTx]].\n     *\n     * @param addressIdx The index of the address to reference in the signatures\n     * @param address The address of the source of the signature\n     */\n    addSignatureIdx(addressIdx, address) {\n        const addressIndex = buffer_1.Buffer.alloc(4);\n        addressIndex.writeUIntBE(addressIdx, 0, 4);\n        this.subnetAuth.addAddressIndex(addressIndex);\n        const sigidx = new credentials_1.SigIdx();\n        const b = buffer_1.Buffer.alloc(4);\n        b.writeUInt32BE(addressIdx, 0);\n        sigidx.fromBuffer(b);\n        sigidx.setSource(address);\n        this.sigIdxs.push(sigidx);\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n    }\n    /**\n     * Returns the array of [[SigIdx]] for this [[Input]]\n     */\n    getSigIdxs() {\n        return this.sigIdxs;\n    }\n    getCredentialID() {\n        return constants_1.PlatformVMConstants.SECPCREDENTIAL;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const creds = super.sign(msg, kc);\n        const sigidxs = this.getSigIdxs();\n        const cred = (0, _1.SelectCredentialClass)(this.getCredentialID());\n        for (let i = 0; i < sigidxs.length; i++) {\n            const keypair = kc.getKey(sigidxs[`${i}`].getSource());\n            const signval = keypair.sign(msg);\n            const sig = new credentials_1.Signature();\n            sig.fromBuffer(signval);\n            cred.addSignature(sig);\n        }\n        creds.push(cred);\n        return creds;\n    }\n}\nexports.CreateChainTx = CreateChainTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-PlatformVM-Credentials\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPCredential = exports.SelectCredentialClass = void 0;\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nconst SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.PlatformVMConstants.SECPCREDENTIAL) {\n        return new SECPCredential(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.CredIdError(\"Error - SelectCredentialClass: unknown credid\");\n};\nexports.SelectCredentialClass = SelectCredentialClass;\nclass SECPCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPCredential\";\n        this._typeID = constants_1.PlatformVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new SECPCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SECPCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = (0, exports.SelectCredentialClass)(id, ...args);\n        return newbasetx;\n    }\n}\nexports.SECPCredential = SECPCredential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL2NyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7OztBQUVILDJDQUFpRDtBQUNqRCwwREFBcUQ7QUFDckQsK0NBQWdEO0FBRWhEOzs7Ozs7R0FNRztBQUNJLE1BQU0scUJBQXFCLEdBQUcsQ0FDbkMsTUFBYyxFQUNkLEdBQUcsSUFBVyxFQUNGLEVBQUU7SUFDZCxJQUFJLE1BQU0sS0FBSywrQkFBbUIsQ0FBQyxjQUFjLEVBQUU7UUFDakQsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO0tBQ25DO0lBQ0QsMEJBQTBCO0lBQzFCLE1BQU0sSUFBSSxvQkFBVyxDQUFDLCtDQUErQyxDQUFDLENBQUE7QUFDeEUsQ0FBQyxDQUFBO0FBVFksUUFBQSxxQkFBcUIseUJBU2pDO0FBRUQsTUFBYSxjQUFlLFNBQVEsd0JBQVU7SUFBOUM7O1FBQ1ksY0FBUyxHQUFHLGdCQUFnQixDQUFBO1FBQzVCLFlBQU8sR0FBRywrQkFBbUIsQ0FBQyxjQUFjLENBQUE7SUFzQnhELENBQUM7SUFwQkMsOENBQThDO0lBRTlDLGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDckIsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLE9BQU8sR0FBbUIsSUFBSSxjQUFjLEVBQUUsQ0FBQTtRQUNsRCxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQ25DLE9BQU8sT0FBZSxDQUFBO0lBQ3hCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxJQUFXO1FBQ25CLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQVMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQVUsRUFBRSxHQUFHLElBQVc7UUFDL0IsSUFBSSxTQUFTLEdBQWUsSUFBQSw2QkFBcUIsRUFBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUM5RCxPQUFPLFNBQVMsQ0FBQTtJQUNsQixDQUFDO0NBQ0Y7QUF4QkQsd0NBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLVBsYXRmb3JtVk0tQ3JlZGVudGlhbHNcbiAqL1xuXG5pbXBvcnQgeyBQbGF0Zm9ybVZNQ29uc3RhbnRzIH0gZnJvbSBcIi4vY29uc3RhbnRzXCJcbmltcG9ydCB7IENyZWRlbnRpYWwgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2NyZWRlbnRpYWxzXCJcbmltcG9ydCB7IENyZWRJZEVycm9yIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2Vycm9yc1wiXG5cbi8qKlxuICogVGFrZXMgYSBidWZmZXIgcmVwcmVzZW50aW5nIHRoZSBjcmVkZW50aWFsIGFuZCByZXR1cm5zIHRoZSBwcm9wZXIgW1tDcmVkZW50aWFsXV0gaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIGNyZWRpZCBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIGNyZWRlbnRpYWwgSUQgcGFyc2VkIHByaW9yIHRvIHRoZSBieXRlcyBwYXNzZWQgaW5cbiAqXG4gKiBAcmV0dXJucyBBbiBpbnN0YW5jZSBvZiBhbiBbW0NyZWRlbnRpYWxdXS1leHRlbmRlZCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNvbnN0IFNlbGVjdENyZWRlbnRpYWxDbGFzcyA9IChcbiAgY3JlZGlkOiBudW1iZXIsXG4gIC4uLmFyZ3M6IGFueVtdXG4pOiBDcmVkZW50aWFsID0+IHtcbiAgaWYgKGNyZWRpZCA9PT0gUGxhdGZvcm1WTUNvbnN0YW50cy5TRUNQQ1JFREVOVElBTCkge1xuICAgIHJldHVybiBuZXcgU0VDUENyZWRlbnRpYWwoLi4uYXJncylcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB0aHJvdyBuZXcgQ3JlZElkRXJyb3IoXCJFcnJvciAtIFNlbGVjdENyZWRlbnRpYWxDbGFzczogdW5rbm93biBjcmVkaWRcIilcbn1cblxuZXhwb3J0IGNsYXNzIFNFQ1BDcmVkZW50aWFsIGV4dGVuZHMgQ3JlZGVudGlhbCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWUgPSBcIlNFQ1BDcmVkZW50aWFsXCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSBQbGF0Zm9ybVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMXG5cbiAgLy9zZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIGJvdGggYXJlIGluaGVyaXRlZFxuXG4gIGdldENyZWRlbnRpYWxJRCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl90eXBlSURcbiAgfVxuXG4gIGNsb25lKCk6IHRoaXMge1xuICAgIGxldCBuZXdiYXNlOiBTRUNQQ3JlZGVudGlhbCA9IG5ldyBTRUNQQ3JlZGVudGlhbCgpXG4gICAgbmV3YmFzZS5mcm9tQnVmZmVyKHRoaXMudG9CdWZmZXIoKSlcbiAgICByZXR1cm4gbmV3YmFzZSBhcyB0aGlzXG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczogYW55W10pOiB0aGlzIHtcbiAgICByZXR1cm4gbmV3IFNFQ1BDcmVkZW50aWFsKC4uLmFyZ3MpIGFzIHRoaXNcbiAgfVxuXG4gIHNlbGVjdChpZDogbnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6IENyZWRlbnRpYWwge1xuICAgIGxldCBuZXdiYXNldHg6IENyZWRlbnRpYWwgPSBTZWxlY3RDcmVkZW50aWFsQ2xhc3MoaWQsIC4uLmFyZ3MpXG4gICAgcmV0dXJuIG5ld2Jhc2V0eFxuICB9XG59XG4iXX0=","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTx = void 0;\n/**\n * @packageDocumentation\n * @module API-PlatformVM-BaseTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst tx_2 = require(\"../platformvm/tx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass BaseTx extends tx_1.StandardBaseTx {\n    /**\n     * Class representing a BaseTx which is the foundation for all transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"BaseTx\";\n        this._typeID = constants_1.PlatformVMConstants.CREATESUBNETTX;\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.outs = fields[\"outs\"].map((o) => {\n            let newOut = new outputs_1.TransferableOutput();\n            newOut.deserialize(o, encoding);\n            return newOut;\n        });\n        this.ins = fields[\"ins\"].map((i) => {\n            let newIn = new inputs_1.TransferableInput();\n            newIn.deserialize(i, encoding);\n            return newIn;\n        });\n        this.numouts = buffer_1.Buffer.alloc(4);\n        this.numouts.writeUInt32BE(this.outs.length, 0);\n        this.numins = buffer_1.Buffer.alloc(4);\n        this.numins.writeUInt32BE(this.ins.length, 0);\n    }\n    getOuts() {\n        return this.outs;\n    }\n    getIns() {\n        return this.ins;\n    }\n    getTotalOuts() {\n        return this.getOuts();\n    }\n    /**\n     * Returns the id of the [[BaseTx]]\n     */\n    getTxType() {\n        return constants_1.PlatformVMConstants.BASETX;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = this.numouts.readUInt32BE(0);\n        this.outs = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.outs.push(xferout);\n        }\n        this.numins = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const incount = this.numins.readUInt32BE(0);\n        this.ins = [];\n        for (let i = 0; i < incount; i++) {\n            const xferin = new inputs_1.TransferableInput();\n            offset = xferin.fromBuffer(bytes, offset);\n            this.ins.push(xferin);\n        }\n        let memolen = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.memo = bintools.copyFrom(bytes, offset, offset + memolen);\n        offset += memolen;\n        return offset;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const creds = [];\n        for (let i = 0; i < this.ins.length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(this.ins[`${i}`].getInput().getCredentialID());\n            const sigidxs = this.ins[`${i}`].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[`${j}`].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            creds.push(cred);\n        }\n        return creds;\n    }\n    clone() {\n        let newbase = new BaseTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new BaseTx(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = (0, tx_2.SelectTxClass)(id, ...args);\n        return newbasetx;\n    }\n}\nexports.BaseTx = BaseTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module Common-RESTAPI\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RESTAPI = void 0;\nconst apibase_1 = require(\"./apibase\");\nclass RESTAPI extends apibase_1.APIBase {\n    /**\n     *\n     * @param core Reference to the Avalanche instance using this endpoint\n     * @param baseURL Path of the APIs baseURL - ex: \"/ext/bc/avm\"\n     * @param contentType Optional Determines the type of the entity attached to the\n     * incoming request\n     * @param acceptType Optional Determines the type of representation which is\n     * desired on the client side\n     */\n    constructor(core, baseURL, contentType = \"application/json;charset=UTF-8\", acceptType = undefined) {\n        super(core, baseURL);\n        this.prepHeaders = (contentType, acceptType) => {\n            const headers = {};\n            if (contentType !== undefined) {\n                headers[\"Content-Type\"] = contentType;\n            }\n            else {\n                headers[\"Content-Type\"] = this.contentType;\n            }\n            if (acceptType !== undefined) {\n                headers[\"Accept\"] = acceptType;\n            }\n            else if (this.acceptType !== undefined) {\n                headers[\"Accept\"] = this.acceptType;\n            }\n            return headers;\n        };\n        this.axConf = () => {\n            return {\n                baseURL: this.core.getURL(),\n                responseType: \"json\"\n            };\n        };\n        this.get = (baseURL, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseURL || this.baseURL;\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.get(ep, {}, headers, this.axConf());\n            return resp;\n        });\n        this.post = (method, params, baseURL, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseURL || this.baseURL;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.post(ep, {}, JSON.stringify(rpc), headers, this.axConf());\n            return resp;\n        });\n        this.put = (method, params, baseURL, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseURL || this.baseURL;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.put(ep, {}, JSON.stringify(rpc), headers, this.axConf());\n            return resp;\n        });\n        this.delete = (method, params, baseURL, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseURL || this.baseURL;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.delete(ep, {}, headers, this.axConf());\n            return resp;\n        });\n        this.patch = (method, params, baseURL, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {\n            const ep = baseURL || this.baseURL;\n            const rpc = {};\n            rpc.method = method;\n            // Set parameters if exists\n            if (params) {\n                rpc.params = params;\n            }\n            const headers = this.prepHeaders(contentType, acceptType);\n            const resp = yield this.core.patch(ep, {}, JSON.stringify(rpc), headers, this.axConf());\n            return resp;\n        });\n        /**\n         * Returns the type of the entity attached to the incoming request\n         */\n        this.getContentType = () => this.contentType;\n        /**\n         * Returns what type of representation is desired at the client side\n         */\n        this.getAcceptType = () => this.acceptType;\n        this.contentType = contentType;\n        this.acceptType = acceptType;\n    }\n}\nexports.RESTAPI = RESTAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IndexAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node's IndexAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass IndexAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/index/X/tx\" as the path to rpc's baseURL\n     */\n    constructor(core, baseURL = \"/ext/index/X/tx\") {\n        super(core, baseURL);\n        /**\n         * Get last accepted tx, vtx or block\n         *\n         * @param encoding\n         * @param baseURL\n         *\n         * @returns Returns a Promise GetLastAcceptedResponse.\n         */\n        this.getLastAccepted = (encoding = \"hex\", baseURL = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseURL);\n            const params = {\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getLastAccepted\", params);\n                return response.data.result;\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Get container by index\n         *\n         * @param index\n         * @param encoding\n         * @param baseURL\n         *\n         * @returns Returns a Promise GetContainerByIndexResponse.\n         */\n        this.getContainerByIndex = (index = \"0\", encoding = \"hex\", baseURL = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseURL);\n            const params = {\n                index,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getContainerByIndex\", params);\n                return response.data.result;\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Get contrainer by ID\n         *\n         * @param containerID\n         * @param encoding\n         * @param baseURL\n         *\n         * @returns Returns a Promise GetContainerByIDResponse.\n         */\n        this.getContainerByID = (containerID = \"0\", encoding = \"hex\", baseURL = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseURL);\n            const params = {\n                containerID,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getContainerByID\", params);\n                return response.data.result;\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Get container range\n         *\n         * @param startIndex\n         * @param numToFetch\n         * @param encoding\n         * @param baseURL\n         *\n         * @returns Returns a Promise GetContainerRangeResponse.\n         */\n        this.getContainerRange = (startIndex = 0, numToFetch = 100, encoding = \"hex\", baseURL = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseURL);\n            const params = {\n                startIndex,\n                numToFetch,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getContainerRange\", params);\n                return response.data.result;\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Get index by containerID\n         *\n         * @param containerID\n         * @param encoding\n         * @param baseURL\n         *\n         * @returns Returns a Promise GetIndexResponse.\n         */\n        this.getIndex = (containerID = \"\", encoding = \"hex\", baseURL = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseURL);\n            const params = {\n                containerID,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.getIndex\", params);\n                return response.data.result.index;\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n        /**\n         * Check if container is accepted\n         *\n         * @param containerID\n         * @param encoding\n         * @param baseURL\n         *\n         * @returns Returns a Promise GetIsAcceptedResponse.\n         */\n        this.isAccepted = (containerID = \"\", encoding = \"hex\", baseURL = this.getBaseURL()) => __awaiter(this, void 0, void 0, function* () {\n            this.setBaseURL(baseURL);\n            const params = {\n                containerID,\n                encoding\n            };\n            try {\n                const response = yield this.callMethod(\"index.isAccepted\", params);\n                return response.data.result;\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n    }\n}\nexports.IndexAPI = IndexAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeystoreAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node API that is using the node's KeystoreAPI.\n *\n * **WARNING**: The KeystoreAPI is to be used by the node-owner as the data is stored locally on the node. Do not trust the root user. If you are not the node-owner, do not use this as your wallet.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass KeystoreAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/keystore\" as the path to rpc's baseURL\n     */\n    constructor(core, baseURL = \"/ext/keystore\") {\n        super(core, baseURL);\n        /**\n         * Creates a user in the node's database.\n         *\n         * @param username Name of the user to create\n         * @param password Password for the user\n         *\n         * @returns Promise for a boolean with true on success\n         */\n        this.createUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"keystore.createUser\", params);\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n        /**\n         * Exports a user. The user can be imported to another node with keystore.importUser .\n         *\n         * @param username The name of the user to export\n         * @param password The password of the user to export\n         *\n         * @returns Promise with a string importable using importUser\n         */\n        this.exportUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"keystore.exportUser\", params);\n            return response.data.result.user\n                ? response.data.result.user\n                : response.data.result;\n        });\n        /**\n         * Imports a user file into the node's user database and assigns it to a username.\n         *\n         * @param username The name the user file should be imported into\n         * @param user cb58 serialized string represetning a user\"s data\n         * @param password The user\"s password\n         *\n         * @returns A promise with a true-value on success.\n         */\n        this.importUser = (username, user, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                user,\n                password\n            };\n            const response = yield this.callMethod(\"keystore.importUser\", params);\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n        /**\n         * Lists the names of all users on the node.\n         *\n         * @returns Promise of an array with all user names.\n         */\n        this.listUsers = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"keystore.listUsers\");\n            return response.data.result.users;\n        });\n        /**\n         * Deletes a user in the node's database.\n         *\n         * @param username Name of the user to delete\n         * @param password Password for the user\n         *\n         * @returns Promise for a boolean with true on success\n         */\n        this.deleteUser = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"keystore.deleteUser\", params);\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n    }\n}\nexports.KeystoreAPI = KeystoreAPI;\n//# sourceMappingURL=data:application/json;base64,"],"sourceRoot":""}