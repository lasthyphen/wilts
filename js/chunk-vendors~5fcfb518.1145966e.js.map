{"version":3,"sources":["webpack:///./node_modules/avalanche/dist/apis/avm/utxos.js","webpack:///./node_modules/asn1.js/lib/asn1/constants/index.js","webpack:///./node_modules/avalanche/dist/apis/evm/importtx.js","webpack:///./node_modules/avalanche/dist/apis/avm/operationtx.js","webpack:///./node_modules/avalanche/dist/apis/evm/api.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/tx.js","webpack:///./node_modules/avalanche/dist/apis/evm/tx.js","webpack:///./node_modules/avalanche/dist/apis/avm/credentials.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/api.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/der.js","webpack:///./node_modules/asn1.js/lib/asn1/base/index.js","webpack:///./node_modules/avalanche/dist/apis/evm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/avm/interfaces.js","webpack:///./node_modules/avalanche/dist/apis/avm/inputs.js","webpack:///./node_modules/avalanche/dist/apis/avm/importtx.js","webpack:///./node_modules/avalanche/dist/apis/avm/ops.js","webpack:///./node_modules/avalanche/dist/apis/evm/credentials.js","webpack:///./node_modules/avalanche/dist/apis/avm/createassettx.js","webpack:///./node_modules/asn1.js/lib/asn1/base/buffer.js","webpack:///./node_modules/avalanche/dist/apis/avm/genesisasset.js","webpack:///./node_modules/avalanche/dist/apis/avm/initialstates.js","webpack:///./node_modules/array-uniq/index.js","webpack:///./node_modules/asn1.js/lib/asn1.js","webpack:///./node_modules/asn1.js/lib/asn1/base/node.js","webpack:///./node_modules/avalanche/dist/apis/avm/vertex.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/pem.js","webpack:///./node_modules/asn1.js/lib/asn1/constants/der.js","webpack:///./node_modules/avalanche/dist/apis/avm/keychain.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/pem.js","webpack:///./node_modules/avalanche/dist/apis/avm/constants.js","webpack:///./node_modules/avalanche/dist/apis/evm/keychain.js","webpack:///./node_modules/avalanche/dist/apis/auth/api.js","webpack:///./node_modules/avalanche/dist/apis/auth/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/outputs.js","webpack:///./node_modules/avalanche/dist/apis/evm/constants.js","webpack:///./node_modules/avalanche/dist/apis/evm/interfaces.js","webpack:///./node_modules/avalanche/dist/apis/evm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/avm/minterset.js","webpack:///./node_modules/asn1.js/node_modules/bn.js/lib/bn.js","webpack:///./node_modules/avalanche/dist/apis/evm/basetx.js","webpack:///./node_modules/avalanche/dist/apis/avm/genesisdata.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/der.js","webpack:///./node_modules/asn1.js/lib/asn1/base/reporter.js","webpack:///./node_modules/avalanche/dist/apis/avm/exporttx.js","webpack:///./node_modules/avalanche/dist/apis/evm/outputs.js","webpack:///./node_modules/asn1.js/lib/asn1/api.js","webpack:///./node_modules/avalanche/dist/apis/avm/index.js","webpack:///./node_modules/avalanche/dist/apis/admin/index.js","webpack:///./node_modules/avalanche/dist/apis/avm/basetx.js","webpack:///./node_modules/avalanche/dist/apis/evm/index.js","webpack:///./node_modules/avalanche/dist/apis/admin/api.js","webpack:///./node_modules/avalanche/dist/apis/evm/utxos.js"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","UTXOSet","AssetAmountDestination","UTXO","buffer_1","bintools_1","bn_js_1","outputs_1","constants_1","tx_1","inputs_1","ops_1","helperfunctions_1","initialstates_1","utxos_1","createassettx_1","operationtx_1","basetx_1","exporttx_1","importtx_1","constants_2","assetamount_1","serialization_1","errors_1","bintools","default","getInstance","serialization","Serialization","StandardUTXO","super","arguments","_typeName","_typeID","undefined","fields","encoding","deserialize","output","SelectOutputClass","bytes","offset","codecID","copyFrom","txid","outputidx","assetID","outputid","readUInt32BE","fromBuffer","serialized","cb58Decode","cb58Encode","toBuffer","utxo","AVMConstants","LATESTCODEC","StandardAssetAmountDestination","StandardUTXOSet","getMinimumSpendable","aad","asOf","UnixNow","locktime","threshold","utxoArray","getAllUTXOs","outids","i","length","canComplete","u","assetKey","getAssetID","toString","fromAddresses","getSenders","getOutput","AmountOutput","assetExists","meetsThreshold","am","getAssetAmount","isFinished","uout","getOutputID","amount","getAmount","spendAmount","getTxID","getOutputIdx","input","SECPTransferInput","xferin","TransferableInput","spenders","getSpenders","j","idx","getAddressIdx","AddressError","getInput","addSignatureIdx","addInput","InsufficientFundsError","amounts","getAmounts","zero","getAssetIDString","gt","spendout","getDestinations","xferout","TransferableOutput","addOutput","change","getChange","changeout","getChangeAddresses","chgxferout","addChange","buildBaseTx","networkID","blockchainID","toAddresses","changeAddresses","fee","feeAssetID","memo","ThresholdError","eq","addAssetAmount","_feeCheck","ins","outs","success","getInputs","getAllOutputs","baseTx","BaseTx","UnsignedTx","buildCreateAssetTx","initialState","name","symbol","denomination","mintOutputs","SECPMintOutput","SECPMintOutputError","CAtx","CreateAssetTx","buildSECPMintTx","mintOwner","transferOwner","mintUTXOID","ops","mintOp","SECPMintOperation","getUTXO","UTXOError","SECPMINTOUTPUTID","out","Error","transferableOperation","TransferableOperation","push","operationTx","OperationTx","buildCreateNFTAssetTx","minterSets","InitialStates","nftMintOutput","NFTMintOutput","getMinters","getThreshold","NFTFXID","buildCreateNFTMintTx","owners","utxoids","groupID","payload","nftMintOperation","NFTMintOperation","buildNFTTransferTx","outbound","NFTTransferOutput","getGroupID","getPayload","op","NFTTransferOperation","xferop","OpTx","buildImportTx","atomics","sourceChain","clone","importIns","feepaid","feeAssetStr","amt","infeeamount","assetStr","lt","add","sub","from","getAddresses","feeRemaining","importTx","ImportTx","buildExportTx","destinationChain","exportouts","PlatformChainID","getChangeOutputs","getOutputs","exportTx","ExportTx","utxos","utxoid","utxoidCleaned","decoder","addressUTXOs","address","addressCleaned","utxobalance","utxovar","args","newset","create","allUTXOs","addArray","Buffer","constants","_reverse","map","res","keys","forEach","key","der","credentials_1","credentials_2","input_1","serializer","EVMBaseTx","DefaultNetworkID","alloc","sourceChainID","EVMConstants","IMPORTTX","numIns","numOuts","inputsPassed","outputsPassed","Array","isArray","importIn","TransferableInputError","EVMOutput","EVMOutputError","sort","comparator","validateOuts","serialize","assign","encoder","ii","writeUInt32BE","anIn","anOut","ChainIdError","barr","bsize","concat","newImportTx","msg","kc","creds","sign","cred","SelectCredentialClass","getCredentialID","sigidxs","getSigIdxs","sigidx","keypair","getKey","getSource","signval","sig","Signature","addSignature","seenAssetSends","Map","evmOutput","getAddressString","assetId","has","assetsSentToAddress","get","includes","errorMessage","set","selectedNetwork","getNetworkID","feeDiff","djtxAssetID","Defaults","network","X","StandardAmountInput","ui","iadd","isub","EVMFeeError","_codecID","OPERATIONTX","OPERATIONTX_CODECONE","numOps","OperationError","o","CodecIdError","getOperation","newbase","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","EVMAPI","jrpcapi_1","keychain_1","utils_1","JRPCAPI","core","baseURL","keychain","KeyChain","blockchainAlias","DJTXAssetID","txFee","getBlockchainAlias","netID","setBlockchainAlias","alias","getBlockchainID","refreshBlockchainID","C","parseAddress","addr","ADDRESSLENGTH","addressFromBuffer","chainID","type","bufferToType","getHRP","getAssetDescription","asset","params","tmpBaseURL","getBaseURL","setBaseURL","response","callMethod","data","parseInt","getDJTXAssetID","refresh","PrimaryAssetAlias","setDJTXAssetID","getDefaultTxFee","getAssetBalance","hexAddress","blockHeight","method","path","getAtomicTxStatus","txID","status","getAtomicTx","tx","getTxFee","export","username","password","to","exportDJTX","getUTXOs","addresses","limit","startIndex","substring","cb58Strs","str","slice","import","importDJTX","importKey","privateKey","issueTx","Transaction","txobj","Tx","toStringHex","TransactionError","exportKey","utxoset","toAddress","ownerAddresses","_cleanAddressArray","a","stringToAddress","srcChain","utxoResponse","atomicUTXOs","djtxAssetIDBuf","NoAtomicUTXOsError","builtUnsignedTx","fromAddressHex","fromAddressBech","nonce","prefixes","split","assetDescription","evmInputs","evmInput","EVMInput","evmDJTXInput","evmANTInput","exportedOuts","secpTransferOutput","SECPTransferOutput","transferableOutput","unsignedTx","keyChain","newKeyChain","getBaseFee","getMaxPriorityFeePerGas","caller","addrs","chainid","decoders","pem","SelectTxClass","create_hash_1","txtype","BASETX","CREATEASSETTX","EXPORTTX","StandardUnsignedTx","transaction","readUInt16BE","txbuff","update","digest","StandardTx","credentials","numcreds","credid","evmtx_1","txTypeID","EVMStandardUnsignedTx","EVMStandardTx","NFTCredential","SECPCredential","SECPCREDENTIAL","SECPCREDENTIAL_CODECONE","NFTCREDENTIAL","NFTCREDENTIAL_CODECONE","CredIdError","Credential","id","newbasetx","encoders","AVMAPI","payload_1","output_1","creationTxFee","mintTxFee","netid","hrp","setTxFee","getDefaultCreationTxFee","getDefaultMintTxFee","getMintTxFee","getCreationTxFee","setMintTxFee","setCreationTxFee","checkGooseEgg","utx","outTotal","outputTotal","getOutputTotal","getBurn","lte","ONEDJTX","mul","getBalance","includePartial","createAddress","createFixedCapAsset","initialHolders","createVariableCapAsset","createNFTAsset","changeAddr","minterSet","mint","minters","amnt","mintNFT","sendNFT","listAddresses","getAllBalances","balances","getTx","getTxStatus","persistOpts","db","getName","selfArray","utxoSet","mergeByRule","getMergeRule","getAllUTXOStrings","getOverwrite","PayloadBase","blockchainIDBuf","GooseEggCheckError","utxoidArray","join","assetIDBuf","initialStates","SYMBOLMAXLEN","SymbolError","ASSETNAMELEN","NameError","OutputOwners","signTx","getAddressTxs","cursor","pageSize","pageSizeNum","send","sendMultiple","sendOutputs","sOutputs","outputs","buildGenesis","genesisData","inherits","Node","DEREncoder","entity","enc","tree","DERNode","_init","body","parent","call","two","num","encodeTag","tag","primitive","cls","reporter","tagByName","hasOwnProperty","error","tagClassByName","module","prototype","encode","_encode","_encodeComposite","content","encodedTag","header","_createEncoderBuffer","lenOctets","_encodeStr","unused","buf","writeUInt16BE","charCodeAt","_isNumstr","_isPrintstr","test","_encodeObjid","values","relative","JSON","stringify","splice","size","ident","objid","_encodeTime","time","date","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","_encodeNull","_encodeInt","isBuffer","numArray","toArray","unshift","copy","_encodeBool","_use","obj","_getEncoder","_skipDefault","dataBuffer","state","_baseState","defaultBuffer","_encodeValue","base","Reporter","DecoderBuffer","EncoderBuffer","AmountInput","SelectInputClass","inputID","SECPINPUTID","InputIdError","StandardTransferableInput","getCost","numSigs","costPerSignature","ASSETIDLEN","inputid","newout","nonceValue","sigCount","sigIdxs","addressIdx","SigIdx","b","setSource","getNonce","n","fromBNToBuffer","superbuff","bufferToB58","newEVMInput","SECPINPUTID_CODECONE","cb58","buffer","IMPORTTX_CODECONE","UTXOID","Operation","SelectOperationClass","nbytes_1","hex","decimalString","opid","SECPMINTOPID","SECPMINTOPID_CODECONE","NFTMINTOPID","NFTMINTOPID_CODECONE","NFTXFEROPID","NFTXFEROPID_CODECONE","InvalidOperationIdError","Serializable","s","sidx","sigbuff","aoutid","getOperationID","abuff","boutid","bbuff","asort","bsort","compare","operation","utxoIDs","getUTXOIDs","fromString","numutxoIDs","mintOutput","transferOutput","transferOutputs","mintoutBuff","transferOutBuff","outputOwners","getPayloadBuffer","payloadlen","getOutputOwners","oo","payloadLen","numoutputs","outputOwner","outputownerslen","outbuff","NBytes","utxoidbuff","b58ToBuffer","validateChecksum","newbuff","ChecksumError","getSize","credential","utf8","CREATEASSETTX_CODECONE","writeUInt8","readUInt8","namesize","symsize","inits","initstatebuff","namebuff","write","symbuff","options","item","isEncoderBuffer","byteLength","isDecoderBuffer","isCompatible","constructor","save","restore","isEmpty","skip","raw","fail","_reporterState","GenesisAsset","assetAlias","getAssetAlias","assetAliasSize","assetAliasbuffSize","assetAliasbuff","networkIDBuff","toNumber","getMemo","memobuffSize","namebuffSize","getSymbol","symbolbuffSize","symbolbuff","getDenomination","denominationbuffSize","fxs","flatfxs","fxid","unflat","SECPFXID","klen","klennum","fxidbuff","statelenbuff","statelen","buff","k","Output","writeInt32BE","uniqNoSet","arr","ret","indexOf","uniqSet","seen","Set","filter","el","uniqSetWithForEach","doesForEachActuallyWork","global","asn1","bignum","define","assert","tags","methods","overrided","children","reverseArgs","choice","optional","any","use","useDecoder","explicit","implicit","contains","_wrap","stateProps","cstate","prop","child","equal","_useArgs","arg","def","val","newKey","_decode","wrapResult","prevObj","present","prevKey","enterKey","_peekTag","isError","_decodeGeneric","_decodeChoice","enterObject","_decodeTag","start","track","_getUse","leaveObject","exitKey","leaveKey","_decodeList","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeBool","_decodeInt","match","some","node","_encodeChoice","_encodePrimitive","Vertex","height","epoch","parentIDs","txs","restrictions","numParentIDs","numTxs","numRestrictions","VERTEX","VERTEX_CODECONE","h","fromBufferToBN","readInt32BE","nPIDs","parentID","nTxs","nRs","codec","getCodecID","codecBuf","epochBuf","numParentIDsBuf","getTxs","txSize","vertex","PEMEncoder","p","label","reverse","tagClass","0","1","2","3","KeyPair","secp256k1_1","SECP256k1KeyPair","newkp","getPrivateKey","SECP256k1KeyChain","makeKey","addKey","setChainID","privk","pk","getAddress","newkc","DERDecoder","PEMDecoder","decode","lines","toUpperCase","re","end","base64","replace","SECPMINTOUTPUTID_CODECONE","SECPXFEROUTPUTID","SECPXFEROUTPUTID_CODECONE","NFTXFEROUTPUTID","NFTXFEROUTPUTID_CODECONE","NFTMINTOUTPUTID","NFTMINTOUTPUTID_CODECONE","BASETX_CODECONE","EXPORTTX_CODECONE","BLOCKCHAINIDLEN","AuthAPI","newToken","endpoints","token","revokeToken","changePassword","oldPassword","newPassword","__createBinding","m","k2","desc","getOwnPropertyDescriptor","writable","configurable","enumerable","__exportStar","NFTOutput","OutputIdError","StandardTransferableOutput","StandardAmountOutput","BaseNFTOutput","utxobuff","sizePayload","psize","inputs","exportedOutputs","numInputs","numExportedOutputs","EVMInputError","exportedOutput","TransferableOutputError","eo","MinterSet","_cleanAddresses","ctor","superCtor","super_","TempCtor","BN","number","endian","isBN","negative","words","red","wordSize","window","parseHex4Bits","string","index","c","parseHexByte","lowerBound","r","parseBase","len","Math","min","max","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","ceil","w","off","strip","parseLength","limbLen","limbPow","total","word","imuln","_iaddn","pow","dest","_expand","_normSign","inspect","zeros","groupSizes","groupBases","toBitArray","bitLength","bit","wbit","smallMulTo","self","lo","carry","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toJSON","toArrayLike","ArrayType","reqLength","littleEndian","q","andln","iushrn","clz32","_countBits","t","_zeroBits","hi","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","imul","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","bigMulTo","hncarry","jumboMulTo","fftm","FFTM","mulp","x","y","mulTo","makeRBT","N","l","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","iushln","bits","carryMask","newCarry","ishln","hint","extended","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","mode","bhi","bhiBits","diff","qj","div","divmod","positive","divn","umod","divRound","dm","half","r2","acc","egcd","A","B","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","gte","ltn","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","_strip","outLen","prev","mod3","one","nOne","lpow","z","inv","windowSize","wnd","current","currentLen","mont","EVMStandardBaseTx","newEVMBaseTx","GenesisData","_1","genesisAssets","getGenesisAssets","genesisAsset","numGenesisAssets","assetCount","codecbuffSize","numAssetsbuffSize","derDecodeTag","oct","tagStr","derDecodeLen","decodedTag","_skipUntilEnd","possibleEnd","String","fromCharCode","numstr","printstr","identifiers","subident","first","second","year","mon","day","hour","sec","UTC","_getDecoder","errors","ReporterError","rethrow","pathLen","now","err","inherited","elem","message","stack","partial","captureStackTrace","exportOuts","getOuts","getExportOutputs","outputID","amountValue","prefix","newEVMOutput","sorta","sortb","equals","api","Entity","_createNamed","Base","Generated","_initNamed","tx_2","display","StandardBaseTx","newOut","newIn","numouts","numins","outcount","incount","memolen","AdminAPI","endpoint","aliasChain","chain","getChainAliases","aliases","getLoggerLevel","loggerName","loadVMs","lockProfile","memoryProfile","setLoggerLevel","logLevel","displayLevel","startCPUProfiler","stopCPUProfiler","spender","atomic","FeeAssetError"],"mappings":"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","file":"js/chunk-vendors~5fcfb518.1145966e.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.UTXO = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-UTXOs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst inputs_1 = require(\"./inputs\");\nconst ops_1 = require(\"./ops\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst initialstates_1 = require(\"./initialstates\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst createassettx_1 = require(\"./createassettx\");\nconst operationtx_1 = require(\"./operationtx\");\nconst basetx_1 = require(\"./basetx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst importtx_1 = require(\"./importtx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst assetamount_1 = require(\"../../common/assetamount\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXO\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = (0, outputs_1.SelectOutputClass)(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.output = (0, outputs_1.SelectOutputClass)(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.AVMConstants.LATESTCODEC, txid = undefined, outputidx = undefined, assetID = undefined, output = undefined) {\n        return new UTXO(codecID, txid, outputidx, assetID, output);\n    }\n}\nexports.UTXO = UTXO;\nclass AssetAmountDestination extends assetamount_1.StandardAssetAmountDestination {\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXOSet\";\n        this._typeID = undefined;\n        this.getMinimumSpendable = (aad, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const utxoArray = this.getAllUTXOs();\n            const outids = {};\n            for (let i = 0; i < utxoArray.length && !aad.canComplete(); i++) {\n                const u = utxoArray[`${i}`];\n                const assetKey = u.getAssetID().toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                if (u.getOutput() instanceof outputs_1.AmountOutput &&\n                    aad.assetExists(assetKey) &&\n                    u.getOutput().meetsThreshold(fromAddresses, asOf)) {\n                    const am = aad.getAssetAmount(assetKey);\n                    if (!am.isFinished()) {\n                        const uout = u.getOutput();\n                        outids[`${assetKey}`] = uout.getOutputID();\n                        const amount = uout.getAmount();\n                        am.spendAmount(amount);\n                        const txid = u.getTxID();\n                        const outputidx = u.getOutputIdx();\n                        const input = new inputs_1.SECPTransferInput(amount);\n                        const xferin = new inputs_1.TransferableInput(txid, outputidx, u.getAssetID(), input);\n                        const spenders = uout.getSpenders(fromAddresses, asOf);\n                        for (let j = 0; j < spenders.length; j++) {\n                            const idx = uout.getAddressIdx(spenders[`${j}`]);\n                            if (idx === -1) {\n                                /* istanbul ignore next */\n                                throw new errors_1.AddressError(\"Error - UTXOSet.getMinimumSpendable: no such \" +\n                                    `address in output: ${spenders[`${j}`]}`);\n                            }\n                            xferin.getInput().addSignatureIdx(idx, spenders[`${j}`]);\n                        }\n                        aad.addInput(xferin);\n                    }\n                    else if (aad.assetExists(assetKey) &&\n                        !(u.getOutput() instanceof outputs_1.AmountOutput)) {\n                        /**\n                         * Leaving the below lines, not simply for posterity, but for clarification.\n                         * AssetIDs may have mixed OutputTypes.\n                         * Some of those OutputTypes may implement AmountOutput.\n                         * Others may not.\n                         * Simply continue in this condition.\n                         */\n                        /*return new Error('Error - UTXOSet.getMinimumSpendable: outputID does not '\n                          + `implement AmountOutput: ${u.getOutput().getOutputID}`)*/\n                        continue;\n                    }\n                }\n            }\n            if (!aad.canComplete()) {\n                return new errors_1.InsufficientFundsError(\"Error - UTXOSet.getMinimumSpendable: insufficient \" +\n                    \"funds to create the transaction\");\n            }\n            const amounts = aad.getAmounts();\n            const zero = new bn_js_1.default(0);\n            for (let i = 0; i < amounts.length; i++) {\n                const assetKey = amounts[`${i}`].getAssetIDString();\n                const amount = amounts[`${i}`].getAmount();\n                if (amount.gt(zero)) {\n                    const spendout = (0, outputs_1.SelectOutputClass)(outids[`${assetKey}`], amount, aad.getDestinations(), locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(amounts[`${i}`].getAssetID(), spendout);\n                    aad.addOutput(xferout);\n                }\n                const change = amounts[`${i}`].getChange();\n                if (change.gt(zero)) {\n                    const changeout = (0, outputs_1.SelectOutputClass)(outids[`${assetKey}`], change, aad.getChangeAddresses());\n                    const chgxferout = new outputs_1.TransferableOutput(amounts[`${i}`].getAssetID(), changeout);\n                    aad.addChange(chgxferout);\n                }\n            }\n            return undefined;\n        };\n        /**\n         * Creates an [[UnsignedTx]] wrapping a [[BaseTx]]. For more granular control, you may create your own\n         * [[UnsignedTx]] wrapping a [[BaseTx]] manually (with their corresponding [[TransferableInput]]s and [[TransferableOutput]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount of the asset to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs. Default: toAddresses\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned. Default: assetID\n         * @param memo Optional. Contains arbitrary data, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildBaseTx = (networkID, blockchainID, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            if (threshold > toAddresses.length) {\n                /* istanbul ignore next */\n                throw new errors_1.ThresholdError(\"Error - UTXOSet.buildBaseTx: threshold is greater than number of addresses\");\n            }\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            let ins = [];\n            let outs = [];\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getAllOutputs();\n            }\n            else {\n                throw success;\n            }\n            const baseTx = new basetx_1.BaseTx(networkID, blockchainID, outs, ins, memo);\n            return new tx_1.UnsignedTx(baseTx);\n        };\n        /**\n         * Creates an unsigned Create Asset transaction. For more granular control, you may create your own\n         * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs\n         * @param initialState The [[InitialStates]] that represent the intial state of a created asset\n         * @param name String for the descriptive name of the asset\n         * @param symbol String for the ticker symbol of the asset\n         * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 DJTX = 10^9 $nDJTX\n         * @param mintOutputs Optional. Array of [[SECPMintOutput]]s to be included in the transaction. These outputs can be spent to mint more tokens.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildCreateAssetTx = (networkID, blockchainID, fromAddresses, changeAddresses, initialState, name, symbol, denomination, mintOutputs = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            if (typeof mintOutputs !== \"undefined\") {\n                for (let i = 0; i < mintOutputs.length; i++) {\n                    if (mintOutputs[`${i}`] instanceof outputs_1.SECPMintOutput) {\n                        initialState.addOutput(mintOutputs[`${i}`]);\n                    }\n                    else {\n                        throw new errors_1.SECPMintOutputError(\"Error - UTXOSet.buildCreateAssetTx: A submitted mintOutput was not of type SECPMintOutput\");\n                    }\n                }\n            }\n            let CAtx = new createassettx_1.CreateAssetTx(networkID, blockchainID, outs, ins, memo, name, symbol, denomination, initialState);\n            return new tx_1.UnsignedTx(CAtx);\n        };\n        /**\n         * Creates an unsigned Secp mint transaction. For more granular control, you may create your own\n         * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param mintOwner A [[SECPMintOutput]] which specifies the new set of minters\n         * @param transferOwner A [[SECPTransferOutput]] which specifies where the minted tokens will go\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param mintUTXOID The UTXOID for the [[SCPMintOutput]] being spent to produce more tokens\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.buildSECPMintTx = (networkID, blockchainID, mintOwner, transferOwner, fromAddresses, changeAddresses, mintUTXOID, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let ops = [];\n            let mintOp = new ops_1.SECPMintOperation(mintOwner, transferOwner);\n            let utxo = this.getUTXO(mintUTXOID);\n            if (typeof utxo === \"undefined\") {\n                throw new errors_1.UTXOError(\"Error - UTXOSet.buildSECPMintTx: UTXOID not found\");\n            }\n            if (utxo.getOutput().getOutputID() !== constants_1.AVMConstants.SECPMINTOUTPUTID) {\n                throw new errors_1.SECPMintOutputError(\"Error - UTXOSet.buildSECPMintTx: UTXO is not a SECPMINTOUTPUTID\");\n            }\n            let out = utxo.getOutput();\n            let spenders = out.getSpenders(fromAddresses, asOf);\n            for (let j = 0; j < spenders.length; j++) {\n                let idx = out.getAddressIdx(spenders[`${j}`]);\n                if (idx == -1) {\n                    /* istanbul ignore next */\n                    throw new Error(\"Error - UTXOSet.buildSECPMintTx: no such address in output\");\n                }\n                mintOp.addSignatureIdx(idx, spenders[`${j}`]);\n            }\n            let transferableOperation = new ops_1.TransferableOperation(utxo.getAssetID(), [`${mintUTXOID}`], mintOp);\n            ops.push(transferableOperation);\n            let operationTx = new operationtx_1.OperationTx(networkID, blockchainID, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(operationTx);\n        };\n        /**\n         * Creates an unsigned Create Asset transaction. For more granular control, you may create your own\n         * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n         * @param minterSets The minters and thresholds required to mint this nft asset\n         * @param name String for the descriptive name of the nft asset\n         * @param symbol String for the ticker symbol of the nft asset\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting mint output\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildCreateNFTAssetTx = (networkID, blockchainID, fromAddresses, changeAddresses, minterSets, name, symbol, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = undefined) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let initialState = new initialstates_1.InitialStates();\n            for (let i = 0; i < minterSets.length; i++) {\n                let nftMintOutput = new outputs_1.NFTMintOutput(i, minterSets[`${i}`].getMinters(), locktime, minterSets[`${i}`].getThreshold());\n                initialState.addOutput(nftMintOutput, constants_1.AVMConstants.NFTFXID);\n            }\n            let denomination = 0; // NFTs are non-fungible\n            let CAtx = new createassettx_1.CreateAssetTx(networkID, blockchainID, outs, ins, memo, name, symbol, denomination, initialState);\n            return new tx_1.UnsignedTx(CAtx);\n        };\n        /**\n         * Creates an unsigned NFT mint transaction. For more granular control, you may create your own\n         * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param owners An array of [[OutputOwners]] who will be given the NFTs.\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n         * @param utxoids An array of strings for the NFTs being transferred\n         * @param groupID Optional. The group this NFT is issued to.\n         * @param payload Optional. Data for NFT Payload.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildCreateNFTMintTx = (networkID, blockchainID, owners, fromAddresses, changeAddresses, utxoids, groupID = 0, payload = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            let ops = [];\n            let nftMintOperation = new ops_1.NFTMintOperation(groupID, payload, owners);\n            for (let i = 0; i < utxoids.length; i++) {\n                let utxo = this.getUTXO(utxoids[`${i}`]);\n                let out = utxo.getOutput();\n                let spenders = out.getSpenders(fromAddresses, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    let idx;\n                    idx = out.getAddressIdx(spenders[`${j}`]);\n                    if (idx == -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - UTXOSet.buildCreateNFTMintTx: no such address in output\");\n                    }\n                    nftMintOperation.addSignatureIdx(idx, spenders[`${j}`]);\n                }\n                let transferableOperation = new ops_1.TransferableOperation(utxo.getAssetID(), utxoids, nftMintOperation);\n                ops.push(transferableOperation);\n            }\n            let operationTx = new operationtx_1.OperationTx(networkID, blockchainID, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(operationTx);\n        };\n        /**\n         * Creates an unsigned NFT transfer transaction. For more granular control, you may create your own\n         * [[OperationTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param toAddresses An array of {@link https://github.com/feross/buffer|Buffer}s which indicate who recieves the NFT\n         * @param fromAddresses An array for {@link https://github.com/feross/buffer|Buffer} who owns the NFT\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n         * @param utxoids An array of strings for the NFTs being transferred\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildNFTTransferTx = (networkID, blockchainID, toAddresses, fromAddresses, changeAddresses, utxoids, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (this._feeCheck(fee, feeAssetID)) {\n                const aad = new AssetAmountDestination(fromAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, fee);\n                const success = this.getMinimumSpendable(aad, asOf);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            const ops = [];\n            for (let i = 0; i < utxoids.length; i++) {\n                const utxo = this.getUTXO(utxoids[`${i}`]);\n                const out = utxo.getOutput();\n                const spenders = out.getSpenders(fromAddresses, asOf);\n                const outbound = new outputs_1.NFTTransferOutput(out.getGroupID(), out.getPayload(), toAddresses, locktime, threshold);\n                const op = new ops_1.NFTTransferOperation(outbound);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = out.getAddressIdx(spenders[`${j}`]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - UTXOSet.buildNFTTransferTx: \" +\n                            `no such address in output: ${spenders[`${j}`]}`);\n                    }\n                    op.addSignatureIdx(idx, spenders[`${j}`]);\n                }\n                const xferop = new ops_1.TransferableOperation(utxo.getAssetID(), [utxoids[`${i}`]], op);\n                ops.push(xferop);\n            }\n            const OpTx = new operationtx_1.OperationTx(networkID, blockchainID, outs, ins, memo, ops);\n            return new tx_1.UnsignedTx(OpTx);\n        };\n        /**\n         * Creates an unsigned ImportTx transaction.\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n         * @param importIns An array of [[TransferableInput]]s being imported\n         * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}. Fee will come from the inputs first, if they can.\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildImportTx = (networkID, blockchainID, toAddresses, fromAddresses, changeAddresses, atomics, sourceChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const zero = new bn_js_1.default(0);\n            let ins = [];\n            let outs = [];\n            if (typeof fee === \"undefined\") {\n                fee = zero.clone();\n            }\n            const importIns = [];\n            let feepaid = new bn_js_1.default(0);\n            let feeAssetStr = feeAssetID.toString(\"hex\");\n            for (let i = 0; i < atomics.length; i++) {\n                const utxo = atomics[`${i}`];\n                const assetID = utxo.getAssetID();\n                const output = utxo.getOutput();\n                let amt = output.getAmount().clone();\n                let infeeamount = amt.clone();\n                let assetStr = assetID.toString(\"hex\");\n                if (typeof feeAssetID !== \"undefined\" &&\n                    fee.gt(zero) &&\n                    feepaid.lt(fee) &&\n                    assetStr === feeAssetStr) {\n                    feepaid = feepaid.add(infeeamount);\n                    if (feepaid.gt(fee)) {\n                        infeeamount = feepaid.sub(fee);\n                        feepaid = fee.clone();\n                    }\n                    else {\n                        infeeamount = zero.clone();\n                    }\n                }\n                const txid = utxo.getTxID();\n                const outputidx = utxo.getOutputIdx();\n                const input = new inputs_1.SECPTransferInput(amt);\n                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);\n                const from = output.getAddresses();\n                const spenders = output.getSpenders(from, asOf);\n                for (let j = 0; j < spenders.length; j++) {\n                    const idx = output.getAddressIdx(spenders[`${j}`]);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - UTXOSet.buildImportTx: no such \" +\n                            `address in output: ${spenders[`${j}`]}`);\n                    }\n                    xferin.getInput().addSignatureIdx(idx, spenders[`${j}`]);\n                }\n                importIns.push(xferin);\n                //add extra outputs for each amount (calculated from the imported inputs), minus fees\n                if (infeeamount.gt(zero)) {\n                    const spendout = (0, outputs_1.SelectOutputClass)(output.getOutputID(), infeeamount, toAddresses, locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(assetID, spendout);\n                    outs.push(xferout);\n                }\n            }\n            // get remaining fees from the provided addresses\n            let feeRemaining = fee.sub(feepaid);\n            if (feeRemaining.gt(zero) && this._feeCheck(feeRemaining, feeAssetID)) {\n                const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n                aad.addAssetAmount(feeAssetID, zero, feeRemaining);\n                const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n                if (typeof success === \"undefined\") {\n                    ins = aad.getInputs();\n                    outs = aad.getAllOutputs();\n                }\n                else {\n                    throw success;\n                }\n            }\n            const importTx = new importtx_1.ImportTx(networkID, blockchainID, outs, ins, memo, sourceChain, importIns);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n         * Creates an unsigned ExportTx transaction.\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param djtxAssetID {@link https://github.com/feross/buffer|Buffer} of the asset ID for DJTX\n         * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the DJTX\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the DJTX\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param memo Optional contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildExportTx = (networkID, blockchainID, amount, assetID, toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let outs = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = assetID;\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (assetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(assetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(assetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                ins = aad.getInputs();\n                outs = aad.getChangeOutputs();\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw success;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkID, blockchainID, outs, ins, memo, destinationChain, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        let utxos = {};\n        for (let utxoid in fields[\"utxos\"]) {\n            let utxoidCleaned = serialization.decoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[`${utxoidCleaned}`] = new UTXO();\n            utxos[`${utxoidCleaned}`].deserialize(fields[\"utxos\"][`${utxoid}`], encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in fields[\"addressUTXOs\"]) {\n            let addressCleaned = serialization.decoder(address, encoding, \"cb58\", \"hex\");\n            let utxobalance = {};\n            for (let utxoid in fields[\"addressUTXOs\"][`${address}`]) {\n                let utxoidCleaned = serialization.decoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[`${utxoidCleaned}`] = serialization.decoder(fields[\"addressUTXOs\"][`${address}`][`${utxoid}`], encoding, \"decimalString\", \"BN\");\n            }\n            addressUTXOs[`${addressCleaned}`] = utxobalance;\n        }\n        this.utxos = utxos;\n        this.addressUTXOs = addressUTXOs;\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === \"string\") {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof UTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.UTXOError(\"Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string\");\n        }\n        return utxovar;\n    }\n    create(...args) {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) &&\n            feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst constants = exports;\n\n// Helper\nconstants._reverse = function reverse(map) {\n  const res = {};\n\n  Object.keys(map).forEach(function(key) {\n    // Convert key to integer if it is stringified\n    if ((key | 0) == key)\n      key = key | 0;\n\n    const value = map[key];\n    res[value] = key;\n  });\n\n  return res;\n};\n\nconstants.der = require('./der');\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-ImportTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst basetx_1 = require(\"./basetx\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst input_1 = require(\"../../common/input\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.EVMBaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param sourceChainID Optional chainID for the source inputs to import. Default Buffer.alloc(32, 16)\n     * @param importIns Optional array of [[TransferableInput]]s used in the transaction\n     * @param outs Optional array of the [[EVMOutput]]s\n     * @param fee Optional the fee as a BN\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), sourceChainID = buffer_1.Buffer.alloc(32, 16), importIns = undefined, outs = undefined, fee = new bn_js_1.default(0)) {\n        super(networkID, blockchainID);\n        this._typeName = \"ImportTx\";\n        this._typeID = constants_1.EVMConstants.IMPORTTX;\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.outs = [];\n        this.sourceChain = sourceChainID;\n        let inputsPassed = false;\n        let outputsPassed = false;\n        if (typeof importIns !== \"undefined\" &&\n            Array.isArray(importIns) &&\n            importIns.length > 0) {\n            importIns.forEach((importIn) => {\n                if (!(importIn instanceof inputs_1.TransferableInput)) {\n                    throw new errors_1.TransferableInputError(\"Error - ImportTx.constructor: invalid TransferableInput in array parameter 'importIns'\");\n                }\n            });\n            inputsPassed = true;\n            this.importIns = importIns;\n        }\n        if (typeof outs !== \"undefined\" && Array.isArray(outs) && outs.length > 0) {\n            outs.forEach((out) => {\n                if (!(out instanceof outputs_1.EVMOutput)) {\n                    throw new errors_1.EVMOutputError(\"Error - ImportTx.constructor: invalid EVMOutput in array parameter 'outs'\");\n                }\n            });\n            if (outs.length > 1) {\n                outs = outs.sort(outputs_1.EVMOutput.comparator());\n            }\n            outputsPassed = true;\n            this.outs = outs;\n        }\n        if (inputsPassed && outputsPassed) {\n            this.validateOuts(fee);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sourceChain: serializer.encoder(this.sourceChain, encoding, \"Buffer\", \"cb58\"), importIns: this.importIns.map((i) => i.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sourceChain = serializer.decoder(fields[\"sourceChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.importIns = fields[\"importIns\"].map((i) => {\n            let ii = new inputs_1.TransferableInput();\n            ii.deserialize(i, encoding);\n            return ii;\n        });\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n    }\n    /**\n     * Returns the id of the [[ImportTx]]\n     */\n    getTxType() {\n        return this._typeID;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the source chainid.\n     */\n    getSourceChain() {\n        return this.sourceChain;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it,\n     * populates the class, and returns the length of the [[ImportTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n     * @param offset A number representing the byte offset. Defaults to 0.\n     *\n     * @returns The length of the raw [[ImportTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.EVMOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.outs.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        this.numOuts.writeUInt32BE(this.outs.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        let bsize = super.toBuffer().length + this.sourceChain.length + this.numIns.length;\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        this.importIns.forEach((importIn) => {\n            bsize += importIn.toBuffer().length;\n            barr.push(importIn.toBuffer());\n        });\n        bsize += this.numOuts.length;\n        barr.push(this.numOuts);\n        this.outs.forEach((out) => {\n            bsize += out.toBuffer().length;\n            barr.push(out.toBuffer());\n        });\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns an array of [[TransferableInput]]s in this transaction.\n     */\n    getImportInputs() {\n        return this.importIns;\n    }\n    /**\n     * Returns an array of [[EVMOutput]]s in this transaction.\n     */\n    getOuts() {\n        return this.outs;\n    }\n    clone() {\n        let newImportTx = new ImportTx();\n        newImportTx.fromBuffer(this.toBuffer());\n        return newImportTx;\n    }\n    create(...args) {\n        return new ImportTx(...args);\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const creds = super.sign(msg, kc);\n        this.importIns.forEach((importIn) => {\n            const cred = (0, credentials_1.SelectCredentialClass)(importIn.getInput().getCredentialID());\n            const sigidxs = importIn.getInput().getSigIdxs();\n            sigidxs.forEach((sigidx) => {\n                const keypair = kc.getKey(sigidx.getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            });\n            creds.push(cred);\n        });\n        return creds;\n    }\n    validateOuts(fee) {\n        // This Map enforces uniqueness of pair(address, assetId) for each EVMOutput.\n        // For each imported assetID, each ETH-style C-Chain address can\n        // have exactly 1 EVMOutput.\n        // Map(2) {\n        //   '0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC' => [\n        //     'wjcHr7ng1qPXeJm5Mh3HzQxqz2S9AGo9UVP78jxh5zfirZxY7',\n        //     'F4MyJcUvq3Rxbqgd4Zs8sUpvwLHApyrp4yxJXe2bAV86Vvp38'\n        //   ],\n        //   '0xecC3B2968B277b837a81A7181e0b94EB1Ca54EdE' => [\n        //     'wjcHr7ng1qPXeJm5Mh3HzQxqz2S9AGo9UVP78jxh5zfirZxY7',\n        //     '2Df96yHyhNc3vooieNNhyKwrjEfTsV2ReMo5FKjMpr8vwN4Jqy',\n        //     'SfSXBzDb9GZ9R2uH61qZKe8nxQHW9KERW9Kq9WRe4vHJZRN3e'\n        //   ]\n        // }\n        const seenAssetSends = new Map();\n        this.outs.forEach((evmOutput) => {\n            const address = evmOutput.getAddressString();\n            const assetId = bintools.cb58Encode(evmOutput.getAssetID());\n            if (seenAssetSends.has(address)) {\n                const assetsSentToAddress = seenAssetSends.get(address);\n                if (assetsSentToAddress.includes(assetId)) {\n                    const errorMessage = `Error - ImportTx: duplicate (address, assetId) pair found in outputs: (0x${address}, ${assetId})`;\n                    throw new errors_1.EVMOutputError(errorMessage);\n                }\n                assetsSentToAddress.push(assetId);\n            }\n            else {\n                seenAssetSends.set(address, [assetId]);\n            }\n        });\n        // make sure this transaction pays the required djtx fee\n        const selectedNetwork = this.getNetworkID();\n        const feeDiff = new bn_js_1.default(0);\n        const djtxAssetID = constants_2.Defaults.network[`${selectedNetwork}`].X.djtxAssetID;\n        // sum incoming DJTX\n        this.importIns.forEach((input) => {\n            // only check StandardAmountInputs\n            if (input.getInput() instanceof input_1.StandardAmountInput &&\n                djtxAssetID === bintools.cb58Encode(input.getAssetID())) {\n                const ui = input.getInput();\n                const i = ui;\n                feeDiff.iadd(i.getAmount());\n            }\n        });\n        // subtract all outgoing DJTX\n        this.outs.forEach((evmOutput) => {\n            if (djtxAssetID === bintools.cb58Encode(evmOutput.getAssetID())) {\n                feeDiff.isub(evmOutput.getAmount());\n            }\n        });\n        if (feeDiff.lt(fee)) {\n            const errorMessage = `Error - ${fee} nDJTX required for fee and only ${feeDiff} nDJTX provided`;\n            throw new errors_1.EVMFeeError(errorMessage);\n        }\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OperationTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-OperationTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst ops_1 = require(\"./ops\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing an unsigned Operation transaction.\n */\nclass OperationTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Operation transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param ops Array of [[Operation]]s used in the transaction\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, ops = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"OperationTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.OPERATIONTX\n            : constants_1.AVMConstants.OPERATIONTX_CODECONE;\n        this.numOps = buffer_1.Buffer.alloc(4);\n        this.ops = [];\n        if (typeof ops !== \"undefined\" && Array.isArray(ops)) {\n            for (let i = 0; i < ops.length; i++) {\n                if (!(ops[`${i}`] instanceof ops_1.TransferableOperation)) {\n                    throw new errors_1.OperationError(`Error - OperationTx.constructor: invalid op in array parameter ${ops}`);\n                }\n            }\n            this.ops = ops;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { ops: this.ops.map((o) => o.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.ops = fields[\"ops\"].map((o) => {\n            let op = new ops_1.TransferableOperation();\n            op.deserialize(o, encoding);\n            return op;\n        });\n        this.numOps = buffer_1.Buffer.alloc(4);\n        this.numOps.writeUInt32BE(this.ops.length, 0);\n    }\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - OperationTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.OPERATIONTX\n                : constants_1.AVMConstants.OPERATIONTX_CODECONE;\n    }\n    /**\n     * Returns the id of the [[OperationTx]]\n     */\n    getTxType() {\n        return this._typeID;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[OperationTx]], parses it, populates the class, and returns the length of the [[OperationTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[OperationTx]]\n     *\n     * @returns The length of the raw [[OperationTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.numOps = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOps = this.numOps.readUInt32BE(0);\n        for (let i = 0; i < numOps; i++) {\n            const op = new ops_1.TransferableOperation();\n            offset = op.fromBuffer(bytes, offset);\n            this.ops.push(op);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[OperationTx]].\n     */\n    toBuffer() {\n        this.numOps.writeUInt32BE(this.ops.length, 0);\n        let barr = [super.toBuffer(), this.numOps];\n        this.ops = this.ops.sort(ops_1.TransferableOperation.comparator());\n        for (let i = 0; i < this.ops.length; i++) {\n            barr.push(this.ops[`${i}`].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n     * Returns an array of [[TransferableOperation]]s in this transaction.\n     */\n    getOperations() {\n        return this.ops;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const creds = super.sign(msg, kc);\n        for (let i = 0; i < this.ops.length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(this.ops[`${i}`].getOperation().getCredentialID());\n            const sigidxs = this.ops[`${i}`].getOperation().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[`${j}`].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            creds.push(cred);\n        }\n        return creds;\n    }\n    clone() {\n        const newbase = new OperationTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new OperationTx(...args);\n    }\n}\nexports.OperationTx = OperationTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMAPI = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst utxos_1 = require(\"./utxos\");\nconst keychain_1 = require(\"./keychain\");\nconst constants_1 = require(\"../../utils/constants\");\nconst tx_1 = require(\"./tx\");\nconst constants_2 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst outputs_1 = require(\"./outputs\");\nconst exporttx_1 = require(\"./exporttx\");\nconst errors_1 = require(\"../../utils/errors\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for interacting with a node's EVMAPI\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass EVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly.\n     * Instead use the [[Avalanche.addAPI]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/bc/C/djtx\" as the path to blockchain's baseURL\n     * @param blockchainID The Blockchain's ID. Defaults to an empty string: \"\"\n     */\n    constructor(core, baseURL = \"/ext/bc/C/djtx\", blockchainID = \"\") {\n        super(core, baseURL);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.KeyChain(\"\", \"\");\n        this.blockchainID = \"\";\n        this.blockchainAlias = undefined;\n        this.DJTXAssetID = undefined;\n        this.txFee = undefined;\n        /**\n         * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n         *\n         * @returns The alias for the blockchainID\n         */\n        this.getBlockchainAlias = () => {\n            if (typeof this.blockchainAlias === \"undefined\") {\n                const netID = this.core.getNetworkID();\n                if (netID in constants_1.Defaults.network &&\n                    this.blockchainID in constants_1.Defaults.network[`${netID}`]) {\n                    this.blockchainAlias =\n                        constants_1.Defaults.network[`${netID}`][this.blockchainID][\"alias\"];\n                    return this.blockchainAlias;\n                }\n                else {\n                    /* istanbul ignore next */\n                    return undefined;\n                }\n            }\n            return this.blockchainAlias;\n        };\n        /**\n         * Sets the alias for the blockchainID.\n         *\n         * @param alias The alias for the blockchainID.\n         *\n         */\n        this.setBlockchainAlias = (alias) => {\n            this.blockchainAlias = alias;\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n         * Gets the blockchainID and returns it.\n         *\n         * @returns The blockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Refresh blockchainID, and if a blockchainID is passed in, use that.\n         *\n         * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n         *\n         * @returns A boolean if the blockchainID was successfully refreshed.\n         */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netID = this.core.getNetworkID();\n            if (typeof blockchainID === \"undefined\" &&\n                typeof constants_1.Defaults.network[`${netID}`] !== \"undefined\") {\n                this.blockchainID = constants_1.Defaults.network[`${netID}`].C.blockchainID; //default to C-Chain\n                return true;\n            }\n            if (typeof blockchainID === \"string\") {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n         */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_2.EVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainID = this.getBlockchainAlias()\n                ? this.getBlockchainAlias()\n                : this.getBlockchainID();\n            const type = \"bech32\";\n            return serialization.bufferToType(address, type, this.core.getHRP(), chainID);\n        };\n        /**\n         * Retrieves an assets name and symbol.\n         *\n         * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an b58 serialized string for the AssetID or its alias.\n         *\n         * @returns Returns a Promise Asset with keys \"name\", \"symbol\", \"assetID\" and \"denomination\".\n         */\n        this.getAssetDescription = (assetID) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            const params = {\n                assetID: asset\n            };\n            const tmpBaseURL = this.getBaseURL();\n            // set base url to get asset description\n            this.setBaseURL(\"/ext/bc/X\");\n            const response = yield this.callMethod(\"avm.getAssetDescription\", params);\n            // set base url back what it originally was\n            this.setBaseURL(tmpBaseURL);\n            return {\n                name: response.data.result.name,\n                symbol: response.data.result.symbol,\n                assetID: bintools.cb58Decode(response.data.result.assetID),\n                denomination: parseInt(response.data.result.denomination, 10)\n            };\n        });\n        /**\n         * Fetches the DJTX AssetID and returns it in a Promise.\n         *\n         * @param refresh This function caches the response. Refresh = true will bust the cache.\n         *\n         * @returns The the provided string representing the DJTX AssetID\n         */\n        this.getDJTXAssetID = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.DJTXAssetID === \"undefined\" || refresh) {\n                const asset = yield this.getAssetDescription(constants_1.PrimaryAssetAlias);\n                this.DJTXAssetID = asset.assetID;\n            }\n            return this.DJTXAssetID;\n        });\n        /**\n         * Overrides the defaults and sets the cache to a specific DJTX AssetID\n         *\n         * @param djtxAssetID A cb58 string or Buffer representing the DJTX AssetID\n         *\n         * @returns The the provided string representing the DJTX AssetID\n         */\n        this.setDJTXAssetID = (djtxAssetID) => {\n            if (typeof djtxAssetID === \"string\") {\n                djtxAssetID = bintools.cb58Decode(djtxAssetID);\n            }\n            this.DJTXAssetID = djtxAssetID;\n        };\n        /**\n         * Gets the default tx fee for this chain.\n         *\n         * @returns The default tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultTxFee = () => {\n            return this.core.getNetworkID() in constants_1.Defaults.network\n                ? new bn_js_1.default(constants_1.Defaults.network[this.core.getNetworkID()][\"C\"][\"txFee\"])\n                : new bn_js_1.default(0);\n        };\n        /**\n         * returns the amount of [assetID] for the given address in the state of the given block number.\n         * \"latest\", \"pending\", and \"accepted\" meta block numbers are also allowed.\n         *\n         * @param hexAddress The hex representation of the address\n         * @param blockHeight The block height\n         * @param assetID The asset ID\n         *\n         * @returns Returns a Promise object containing the balance\n         */\n        this.getAssetBalance = (hexAddress, blockHeight, assetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = [hexAddress, blockHeight, assetID];\n            const method = \"eth_getAssetBalance\";\n            const path = \"ext/bc/C/rpc\";\n            const response = yield this.callMethod(method, params, path);\n            return response.data;\n        });\n        /**\n         * Returns the status of a provided atomic transaction ID by calling the node's `getAtomicTxStatus` method.\n         *\n         * @param txID The string representation of the transaction ID\n         *\n         * @returns Returns a Promise string containing the status retrieved from the node\n         */\n        this.getAtomicTxStatus = (txID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID\n            };\n            const response = yield this.callMethod(\"djtx.getAtomicTxStatus\", params);\n            return response.data.result.status\n                ? response.data.result.status\n                : response.data.result;\n        });\n        /**\n         * Returns the transaction data of a provided transaction ID by calling the node's `getAtomicTx` method.\n         *\n         * @param txID The string representation of the transaction ID\n         *\n         * @returns Returns a Promise string containing the bytes retrieved from the node\n         */\n        this.getAtomicTx = (txID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID\n            };\n            const response = yield this.callMethod(\"djtx.getAtomicTx\", params);\n            return response.data.result.tx;\n        });\n        /**\n         * Gets the tx fee for this chain.\n         *\n         * @returns The tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getTxFee = () => {\n            if (typeof this.txFee === \"undefined\") {\n                this.txFee = this.getDefaultTxFee();\n            }\n            return this.txFee;\n        };\n        /**\n         * Send ANT (Avalanche Native Token) assets including DJTX from the C-Chain to an account on the X-Chain.\n         *\n         * After calling this method, you must call the X-Chain’s import method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the X-Chain account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The account on the X-Chain to send the DJTX to.\n         * @param amount Amount of asset to export as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param assetID The asset id which is being sent\n         *\n         * @returns String representing the transaction id\n         */\n        this.export = (username, password, to, amount, assetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                amount: amount.toString(10),\n                username,\n                password,\n                assetID\n            };\n            const response = yield this.callMethod(\"djtx.export\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Send DJTX from the C-Chain to an account on the X-Chain.\n         *\n         * After calling this method, you must call the X-Chain’s importDJTX method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the X-Chain account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The account on the X-Chain to send the DJTX to.\n         * @param amount Amount of DJTX to export as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns String representing the transaction id\n         */\n        this.exportDJTX = (username, password, to, amount) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                amount: amount.toString(10),\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"djtx.exportDJTX\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param sourceChain A string for the chain to look for the UTXO's. Default is to use this chain, but if exported UTXOs exist\n         * from other chains, this can used to pull them instead.\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         */\n        this.getUTXOs = (addresses, sourceChain = undefined, limit = 0, startIndex = undefined, encoding = \"hex\") => __awaiter(this, void 0, void 0, function* () {\n            if (typeof addresses === \"string\") {\n                addresses = [addresses];\n            }\n            const params = {\n                addresses: addresses,\n                limit,\n                encoding\n            };\n            if (typeof startIndex !== \"undefined\" && startIndex) {\n                params.startIndex = startIndex;\n            }\n            if (typeof sourceChain !== \"undefined\") {\n                params.sourceChain = sourceChain;\n            }\n            const response = yield this.callMethod(\"djtx.getUTXOs\", params);\n            const utxos = new utxos_1.UTXOSet();\n            const data = response.data.result.utxos;\n            if (data.length > 0 && data[0].substring(0, 2) === \"0x\") {\n                const cb58Strs = [];\n                data.forEach((str) => {\n                    cb58Strs.push(bintools.cb58Encode(new buffer_1.Buffer(str.slice(2), \"hex\")));\n                });\n                utxos.addArray(cb58Strs, false);\n            }\n            else {\n                utxos.addArray(data, false);\n            }\n            response.data.result.utxos = utxos;\n            return response.data.result;\n        });\n        /**\n         * Send ANT (Avalanche Native Token) assets including DJTX from an account on the X-Chain to an address on the C-Chain. This transaction\n         * must be signed with the key of the account that the asset is sent from and which pays\n         * the transaction fee.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address of the account the asset is sent to.\n         * @param sourceChain The chainID where the funds are coming from. Ex: \"X\"\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.import = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"djtx.import\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Send DJTX from an account on the X-Chain to an address on the C-Chain. This transaction\n         * must be signed with the key of the account that the DJTX is sent from and which pays\n         * the transaction fee.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address of the account the DJTX is sent to. This must be the same as the to\n         * argument in the corresponding call to the X-Chain’s exportDJTX\n         * @param sourceChain The chainID where the funds are coming from.\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.importDJTX = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                to,\n                sourceChain,\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"djtx.importDJTX\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Give a user control over an address by providing the private key that controls the address.\n         *\n         * @param username The name of the user to store the private key\n         * @param password The password that unlocks the user\n         * @param privateKey A string representing the private key in the vm\"s format\n         *\n         * @returns The address for the imported private key.\n         */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey\n            };\n            const response = yield this.callMethod(\"djtx.importKey\", params);\n            return response.data.result.address\n                ? response.data.result.address\n                : response.data.result;\n        });\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise string representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = \"\";\n            if (typeof tx === \"string\") {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toStringHex();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toStringHex();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new errors_1.TransactionError(\"Error - djtx.issueTx: provided tx is not expected type of string, Buffer, or Tx\");\n            }\n            const params = {\n                tx: Transaction.toString(),\n                encoding: \"hex\"\n            };\n            const response = yield this.callMethod(\"djtx.issueTx\", params);\n            return response.data.result.txID\n                ? response.data.result.txID\n                : response.data.result;\n        });\n        /**\n         * Exports the private key for an address.\n         *\n         * @param username The name of the user with the private key\n         * @param password The password used to decrypt the private key\n         * @param address The address whose private key should be exported\n         *\n         * @returns Promise with the decrypted private key and private key hex as store in the database\n         */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                address\n            };\n            const response = yield this.callMethod(\"djtx.exportKey\", params);\n            return response.data.result;\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param toAddress The address to send the funds\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, toAddress, ownerAddresses, sourceChain, fromAddresses, fee = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            const from = this._cleanAddressArray(fromAddresses, \"buildImportTx\").map((a) => bintools.stringToAddress(a));\n            let srcChain = undefined;\n            if (typeof sourceChain === \"string\") {\n                // if there is a sourceChain passed in and it's a string then save the string value and cast the original\n                // variable from a string to a Buffer\n                srcChain = sourceChain;\n                sourceChain = bintools.cb58Decode(sourceChain);\n            }\n            else if (typeof sourceChain === \"undefined\" ||\n                !(sourceChain instanceof buffer_1.Buffer)) {\n                // if there is no sourceChain passed in or the sourceChain is any data type other than a Buffer then throw an error\n                throw new errors_1.ChainIdError(\"Error - EVMAPI.buildImportTx: sourceChain is undefined or invalid sourceChain type.\");\n            }\n            const utxoResponse = yield this.getUTXOs(ownerAddresses, srcChain, 0, undefined);\n            const atomicUTXOs = utxoResponse.utxos;\n            const networkID = this.core.getNetworkID();\n            const djtxAssetID = constants_1.Defaults.network[`${networkID}`].X.djtxAssetID;\n            const djtxAssetIDBuf = bintools.cb58Decode(djtxAssetID);\n            const atomics = atomicUTXOs.getAllUTXOs();\n            if (atomics.length === 0) {\n                throw new errors_1.NoAtomicUTXOsError(\"Error - EVMAPI.buildImportTx: no atomic utxos to import\");\n            }\n            const builtUnsignedTx = utxoset.buildImportTx(networkID, bintools.cb58Decode(this.blockchainID), toAddress, atomics, sourceChain, fee, djtxAssetIDBuf);\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).\n         *\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param assetID The asset id which is being sent\n         * @param destinationChain The chainid for where the assets will be sent.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (amount, assetID, destinationChain, fromAddressHex, fromAddressBech, toAddresses, nonce = 0, locktime = new bn_js_1.default(0), threshold = 1, fee = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            const prefixes = {};\n            toAddresses.map((address) => {\n                prefixes[address.split(\"-\")[0]] = true;\n            });\n            if (Object.keys(prefixes).length !== 1) {\n                throw new errors_1.AddressError(\"Error - EVMAPI.buildExportTx: To addresses must have the same chainID prefix.\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - EVMAPI.buildExportTx: Destination ChainID is undefined.\");\n            }\n            else if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(destinationChain);\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new errors_1.ChainIdError(\"Error - EVMAPI.buildExportTx: Invalid destinationChain type\");\n            }\n            if (destinationChain.length !== 32) {\n                throw new errors_1.ChainIdError(\"Error - EVMAPI.buildExportTx: Destination ChainID must be 32 bytes in length.\");\n            }\n            const assetDescription = yield this.getAssetDescription(\"DJTX\");\n            let evmInputs = [];\n            if (bintools.cb58Encode(assetDescription.assetID) === assetID) {\n                const evmInput = new inputs_1.EVMInput(fromAddressHex, amount.add(fee), assetID, nonce);\n                evmInput.addSignatureIdx(0, bintools.stringToAddress(fromAddressBech));\n                evmInputs.push(evmInput);\n            }\n            else {\n                // if asset id isn't DJTX asset id then create 2 inputs\n                // first input will be DJTX and will be for the amount of the fee\n                // second input will be the ANT\n                const evmDJTXInput = new inputs_1.EVMInput(fromAddressHex, fee, assetDescription.assetID, nonce);\n                evmDJTXInput.addSignatureIdx(0, bintools.stringToAddress(fromAddressBech));\n                evmInputs.push(evmDJTXInput);\n                const evmANTInput = new inputs_1.EVMInput(fromAddressHex, amount, assetID, nonce);\n                evmANTInput.addSignatureIdx(0, bintools.stringToAddress(fromAddressBech));\n                evmInputs.push(evmANTInput);\n            }\n            const to = [];\n            toAddresses.map((address) => {\n                to.push(bintools.stringToAddress(address));\n            });\n            let exportedOuts = [];\n            const secpTransferOutput = new outputs_1.SECPTransferOutput(amount, to, locktime, threshold);\n            const transferableOutput = new outputs_1.TransferableOutput(bintools.cb58Decode(assetID), secpTransferOutput);\n            exportedOuts.push(transferableOutput);\n            // lexicographically sort ins and outs\n            evmInputs = evmInputs.sort(inputs_1.EVMInput.comparator());\n            exportedOuts = exportedOuts.sort(outputs_1.TransferableOutput.comparator());\n            const exportTx = new exporttx_1.ExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), destinationChain, evmInputs, exportedOuts);\n            const unsignedTx = new tx_1.UnsignedTx(exportTx);\n            return unsignedTx;\n        });\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[KeyChain]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        /**\n         *\n         * @returns new instance of [[KeyChain]]\n         */\n        this.newKeyChain = () => {\n            // warning, overwrites the old keychain\n            const alias = this.getBlockchainAlias();\n            if (alias) {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n            }\n            else {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n            }\n            return this.keychain;\n        };\n        /**\n         * @returns a Promise string containing the base fee for the next block.\n         */\n        this.getBaseFee = () => __awaiter(this, void 0, void 0, function* () {\n            const params = [];\n            const method = \"eth_baseFee\";\n            const path = \"ext/bc/C/rpc\";\n            const response = yield this.callMethod(method, params, path);\n            return response.data.result;\n        });\n        /**\n         * returns the priority fee needed to be included in a block.\n         *\n         * @returns Returns a Promise string containing the priority fee needed to be included in a block.\n         */\n        this.getMaxPriorityFeePerGas = () => __awaiter(this, void 0, void 0, function* () {\n            const params = [];\n            const method = \"eth_maxPriorityFeePerGas\";\n            const path = \"ext/bc/C/rpc\";\n            const response = yield this.callMethod(method, params, path);\n            return response.data.result;\n        });\n        this.blockchainID = blockchainID;\n        const netID = core.getNetworkID();\n        if (netID in constants_1.Defaults.network &&\n            blockchainID in constants_1.Defaults.network[`${netID}`]) {\n            const alias = constants_1.Defaults.network[`${netID}`][`${blockchainID}`][\"alias\"];\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainid = this.getBlockchainAlias()\n            ? this.getBlockchainAlias()\n            : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            addresses.forEach((address) => {\n                if (typeof address === \"string\") {\n                    if (typeof this.parseAddress(address) === \"undefined\") {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - Invalid address format\");\n                    }\n                    addrs.push(address);\n                }\n                else {\n                    const type = \"bech32\";\n                    addrs.push(serialization.bufferToType(address, type, this.core.getHRP(), chainid));\n                }\n            });\n        }\n        return addrs;\n    }\n}\nexports.EVMAPI = EVMAPI;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst decoders = exports;\n\ndecoders.der = require('./der');\ndecoders.pem = require('./pem');\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tx = exports.UnsignedTx = exports.SelectTxClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Transactions\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst basetx_1 = require(\"./basetx\");\nconst createassettx_1 = require(\"./createassettx\");\nconst operationtx_1 = require(\"./operationtx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[BaseTx]] instance.\n *\n * @param txtype The id of the transaction type\n *\n * @returns An instance of an [[BaseTx]]-extended class.\n */\nconst SelectTxClass = (txtype, ...args) => {\n    if (txtype === constants_1.AVMConstants.BASETX) {\n        return new basetx_1.BaseTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.CREATEASSETTX) {\n        return new createassettx_1.CreateAssetTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.OPERATIONTX) {\n        return new operationtx_1.OperationTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.IMPORTTX) {\n        return new importtx_1.ImportTx(...args);\n    }\n    else if (txtype === constants_1.AVMConstants.EXPORTTX) {\n        return new exporttx_1.ExportTx(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.TransactionError(\"Error - SelectTxClass: unknown txtype\");\n};\nexports.SelectTxClass = SelectTxClass;\nclass UnsignedTx extends tx_1.StandardUnsignedTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UnsignedTx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.transaction = (0, exports.SelectTxClass)(fields[\"transaction\"][\"_typeID\"]);\n        this.transaction.deserialize(fields[\"transaction\"], encoding);\n    }\n    getTransaction() {\n        return this.transaction;\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.transaction = (0, exports.SelectTxClass)(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from((0, create_hash_1.default)(\"sha256\").update(txbuff).digest());\n        const creds = this.transaction.sign(msg, kc);\n        return new Tx(this, creds);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends tx_1.StandardTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Tx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.unsignedTx = new UnsignedTx();\n        this.unsignedTx.deserialize(fields[\"unsignedTx\"], encoding);\n        this.credentials = [];\n        for (let i = 0; i < fields[\"credentials\"].length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(fields[\"credentials\"][`${i}`][\"_typeID\"]);\n            cred.deserialize(fields[\"credentials\"][`${i}`], encoding);\n            this.credentials.push(cred);\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools\n                .copyFrom(bytes, offset, offset + 4)\n                .readUInt32BE(0);\n            offset += 4;\n            const cred = (0, credentials_1.SelectCredentialClass)(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-Transactions\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tx = exports.UnsignedTx = exports.SelectTxClass = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"./credentials\");\nconst evmtx_1 = require(\"../../common/evmtx\");\nconst create_hash_1 = __importDefault(require(\"create-hash\"));\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[EVMBaseTx]] instance.\n *\n * @param txTypeID The id of the transaction type\n *\n * @returns An instance of an [[EVMBaseTx]]-extended class.\n */\nconst SelectTxClass = (txTypeID, ...args) => {\n    if (txTypeID === constants_1.EVMConstants.IMPORTTX) {\n        return new importtx_1.ImportTx(...args);\n    }\n    else if (txTypeID === constants_1.EVMConstants.EXPORTTX) {\n        return new exporttx_1.ExportTx(...args);\n    }\n    /* istanbul ignore next */\n    throw new Error(\"TransactionError - SelectTxClass: unknown txType\");\n};\nexports.SelectTxClass = SelectTxClass;\nclass UnsignedTx extends evmtx_1.EVMStandardUnsignedTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UnsignedTx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.transaction = (0, exports.SelectTxClass)(fields[\"transaction\"][\"_typeID\"]);\n        this.transaction.deserialize(fields[\"transaction\"], encoding);\n    }\n    getTransaction() {\n        return this.transaction;\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const txtype = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.transaction = (0, exports.SelectTxClass)(txtype);\n        return this.transaction.fromBuffer(bytes, offset);\n    }\n    /**\n     * Signs this [[UnsignedTx]] and returns signed [[StandardTx]]\n     *\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns A signed [[StandardTx]]\n     */\n    sign(kc) {\n        const txbuff = this.toBuffer();\n        const msg = buffer_1.Buffer.from((0, create_hash_1.default)(\"sha256\").update(txbuff).digest());\n        const creds = this.transaction.sign(msg, kc);\n        return new Tx(this, creds);\n    }\n}\nexports.UnsignedTx = UnsignedTx;\nclass Tx extends evmtx_1.EVMStandardTx {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Tx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.unsignedTx = new UnsignedTx();\n        this.unsignedTx.deserialize(fields[\"unsignedTx\"], encoding);\n        this.credentials = [];\n        for (let i = 0; i < fields[\"credentials\"].length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(fields[\"credentials\"][`${i}`][\"_typeID\"]);\n            cred.deserialize(fields[\"credentials\"][`${i}`], encoding);\n            this.credentials.push(cred);\n        }\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it,\n     * populates the class, and returns the length of the Tx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]\n     * @param offset A number representing the starting point of the bytes to begin parsing\n     *\n     * @returns The length of the raw [[Tx]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.unsignedTx = new UnsignedTx();\n        offset = this.unsignedTx.fromBuffer(bytes, offset);\n        const numcreds = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.credentials = [];\n        for (let i = 0; i < numcreds; i++) {\n            const credid = bintools\n                .copyFrom(bytes, offset, offset + 4)\n                .readUInt32BE(0);\n            offset += 4;\n            const cred = (0, credentials_1.SelectCredentialClass)(credid);\n            offset = cred.fromBuffer(bytes, offset);\n            this.credentials.push(cred);\n        }\n        return offset;\n    }\n}\nexports.Tx = Tx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-Credentials\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NFTCredential = exports.SECPCredential = exports.SelectCredentialClass = void 0;\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nconst SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.AVMConstants.SECPCREDENTIAL ||\n        credid === constants_1.AVMConstants.SECPCREDENTIAL_CODECONE) {\n        return new SECPCredential(...args);\n    }\n    if (credid === constants_1.AVMConstants.NFTCREDENTIAL ||\n        credid === constants_1.AVMConstants.NFTCREDENTIAL_CODECONE) {\n        return new NFTCredential(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.CredIdError(\"Error - SelectCredentialClass: unknown credid\");\n};\nexports.SelectCredentialClass = SelectCredentialClass;\nclass SECPCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPCredential\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.SECPCREDENTIAL\n            : constants_1.AVMConstants.SECPCREDENTIAL_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPCredential.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.SECPCREDENTIAL\n                : constants_1.AVMConstants.SECPCREDENTIAL_CODECONE;\n    }\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new SECPCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SECPCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = (0, exports.SelectCredentialClass)(id, ...args);\n        return newbasetx;\n    }\n}\nexports.SECPCredential = SECPCredential;\nclass NFTCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"NFTCredential\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.NFTCREDENTIAL\n            : constants_1.AVMConstants.NFTCREDENTIAL_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTCredential.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.NFTCREDENTIAL\n                : constants_1.AVMConstants.NFTCREDENTIAL_CODECONE;\n    }\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new NFTCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new NFTCredential(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = (0, exports.SelectCredentialClass)(id, ...args);\n        return newbasetx;\n    }\n}\nexports.NFTCredential = NFTCredential;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst encoders = exports;\n\nencoders.der = require('./der');\nencoders.pem = require('./pem');\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AVMAPI = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM\n */\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst utxos_1 = require(\"./utxos\");\nconst constants_1 = require(\"./constants\");\nconst keychain_1 = require(\"./keychain\");\nconst tx_1 = require(\"./tx\");\nconst payload_1 = require(\"../../utils/payload\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\nconst constants_2 = require(\"../../utils/constants\");\nconst output_1 = require(\"../../common/output\");\nconst errors_1 = require(\"../../utils/errors\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for interacting with a node endpoint that is using the AVM.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AVMAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAP`${I}`]] method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/bc/X\" as the path to blockchain's baseURL\n     * @param blockchainID The Blockchain\"s ID. Defaults to an empty string: \"\"\n     */\n    constructor(core, baseURL = \"/ext/bc/X\", blockchainID = \"\") {\n        super(core, baseURL);\n        /**\n         * @ignore\n         */\n        this.keychain = new keychain_1.KeyChain(\"\", \"\");\n        this.blockchainID = \"\";\n        this.blockchainAlias = undefined;\n        this.DJTXAssetID = undefined;\n        this.txFee = undefined;\n        this.creationTxFee = undefined;\n        this.mintTxFee = undefined;\n        /**\n         * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.\n         *\n         * @returns The alias for the blockchainID\n         */\n        this.getBlockchainAlias = () => {\n            if (typeof this.blockchainAlias === \"undefined\") {\n                const netid = this.core.getNetworkID();\n                if (netid in constants_2.Defaults.network &&\n                    this.blockchainID in constants_2.Defaults.network[`${netid}`]) {\n                    this.blockchainAlias =\n                        constants_2.Defaults.network[`${netid}`][this.blockchainID][\"alias\"];\n                    return this.blockchainAlias;\n                }\n                else {\n                    /* istanbul ignore next */\n                    return undefined;\n                }\n            }\n            return this.blockchainAlias;\n        };\n        /**\n         * Sets the alias for the blockchainID.\n         *\n         * @param alias The alias for the blockchainID.\n         *\n         */\n        this.setBlockchainAlias = (alias) => {\n            this.blockchainAlias = alias;\n            /* istanbul ignore next */\n            return undefined;\n        };\n        /**\n         * Gets the blockchainID and returns it.\n         *\n         * @returns The blockchainID\n         */\n        this.getBlockchainID = () => this.blockchainID;\n        /**\n         * Refresh blockchainID, and if a blockchainID is passed in, use that.\n         *\n         * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.\n         *\n         * @returns The blockchainID\n         */\n        this.refreshBlockchainID = (blockchainID = undefined) => {\n            const netid = this.core.getNetworkID();\n            if (typeof blockchainID === \"undefined\" &&\n                typeof constants_2.Defaults.network[`${netid}`] !== \"undefined\") {\n                this.blockchainID = constants_2.Defaults.network[`${netid}`].X.blockchainID; //default to X-Chain\n                return true;\n            }\n            if (typeof blockchainID === \"string\") {\n                this.blockchainID = blockchainID;\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.\n         *\n         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.\n         */\n        this.parseAddress = (addr) => {\n            const alias = this.getBlockchainAlias();\n            const blockchainID = this.getBlockchainID();\n            return bintools.parseAddress(addr, blockchainID, alias, constants_1.AVMConstants.ADDRESSLENGTH);\n        };\n        this.addressFromBuffer = (address) => {\n            const chainID = this.getBlockchainAlias()\n                ? this.getBlockchainAlias()\n                : this.getBlockchainID();\n            const type = \"bech32\";\n            const hrp = this.core.getHRP();\n            return serialization.bufferToType(address, type, hrp, chainID);\n        };\n        /**\n         * Fetches the DJTX AssetID and returns it in a Promise.\n         *\n         * @param refresh This function caches the response. Refresh = true will bust the cache.\n         *\n         * @returns The the provided string representing the DJTX AssetID\n         */\n        this.getDJTXAssetID = (refresh = false) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.DJTXAssetID === \"undefined\" || refresh) {\n                const asset = yield this.getAssetDescription(constants_2.PrimaryAssetAlias);\n                this.DJTXAssetID = asset.assetID;\n            }\n            return this.DJTXAssetID;\n        });\n        /**\n         * Overrides the defaults and sets the cache to a specific DJTX AssetID\n         *\n         * @param djtxAssetID A cb58 string or Buffer representing the DJTX AssetID\n         *\n         * @returns The the provided string representing the DJTX AssetID\n         */\n        this.setDJTXAssetID = (djtxAssetID) => {\n            if (typeof djtxAssetID === \"string\") {\n                djtxAssetID = bintools.cb58Decode(djtxAssetID);\n            }\n            this.DJTXAssetID = djtxAssetID;\n        };\n        /**\n         * Gets the default tx fee for this chain.\n         *\n         * @returns The default tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultTxFee = () => {\n            return this.core.getNetworkID() in constants_2.Defaults.network\n                ? new bn_js_1.default(constants_2.Defaults.network[this.core.getNetworkID()][\"X\"][\"txFee\"])\n                : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the tx fee for this chain.\n         *\n         * @returns The tx fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getTxFee = () => {\n            if (typeof this.txFee === \"undefined\") {\n                this.txFee = this.getDefaultTxFee();\n            }\n            return this.txFee;\n        };\n        /**\n         * Sets the tx fee for this chain.\n         *\n         * @param fee The tx fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setTxFee = (fee) => {\n            this.txFee = fee;\n        };\n        /**\n         * Gets the default creation fee for this chain.\n         *\n         * @returns The default creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultCreationTxFee = () => {\n            return this.core.getNetworkID() in constants_2.Defaults.network\n                ? new bn_js_1.default(constants_2.Defaults.network[this.core.getNetworkID()][\"X\"][\"creationTxFee\"])\n                : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the default mint fee for this chain.\n         *\n         * @returns The default mint fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getDefaultMintTxFee = () => {\n            return this.core.getNetworkID() in constants_2.Defaults.network\n                ? new bn_js_1.default(constants_2.Defaults.network[this.core.getNetworkID()][\"X\"][\"mintTxFee\"])\n                : new bn_js_1.default(0);\n        };\n        /**\n         * Gets the mint fee for this chain.\n         *\n         * @returns The mint fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getMintTxFee = () => {\n            if (typeof this.mintTxFee === \"undefined\") {\n                this.mintTxFee = this.getDefaultMintTxFee();\n            }\n            return this.mintTxFee;\n        };\n        /**\n         * Gets the creation fee for this chain.\n         *\n         * @returns The creation fee as a {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.getCreationTxFee = () => {\n            if (typeof this.creationTxFee === \"undefined\") {\n                this.creationTxFee = this.getDefaultCreationTxFee();\n            }\n            return this.creationTxFee;\n        };\n        /**\n         * Sets the mint fee for this chain.\n         *\n         * @param fee The mint fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setMintTxFee = (fee) => {\n            this.mintTxFee = fee;\n        };\n        /**\n         * Sets the creation fee for this chain.\n         *\n         * @param fee The creation fee amount to set as {@link https://github.com/indutny/bn.js/|BN}\n         */\n        this.setCreationTxFee = (fee) => {\n            this.creationTxFee = fee;\n        };\n        /**\n         * Gets a reference to the keychain for this class.\n         *\n         * @returns The instance of [[KeyChain]] for this class\n         */\n        this.keyChain = () => this.keychain;\n        /**\n         * @ignore\n         */\n        this.newKeyChain = () => {\n            // warning, overwrites the old keychain\n            const alias = this.getBlockchainAlias();\n            if (alias) {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n            }\n            else {\n                this.keychain = new keychain_1.KeyChain(this.core.getHRP(), this.blockchainID);\n            }\n            return this.keychain;\n        };\n        /**\n         * Helper function which determines if a tx is a goose egg transaction.\n         *\n         * @param utx An UnsignedTx\n         *\n         * @returns boolean true if passes goose egg test and false if fails.\n         *\n         * @remarks\n         * A \"Goose Egg Transaction\" is when the fee far exceeds a reasonable amount\n         */\n        this.checkGooseEgg = (utx, outTotal = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const outputTotal = outTotal.gt(new bn_js_1.default(0))\n                ? outTotal\n                : utx.getOutputTotal(djtxAssetID);\n            const fee = utx.getBurn(djtxAssetID);\n            if (fee.lte(constants_2.ONEDJTX.mul(new bn_js_1.default(10))) || fee.lte(outputTotal)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        /**\n         * Gets the balance of a particular asset on a blockchain.\n         *\n         * @param address The address to pull the asset balance from\n         * @param assetID The assetID to pull the balance from\n         * @param includePartial If includePartial=false, returns only the balance held solely\n         *\n         * @returns Promise with the balance of the assetID as a {@link https://github.com/indutny/bn.js/|BN} on the provided address for the blockchain.\n         */\n        this.getBalance = (address, assetID, includePartial = false) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - AVMAPI.getBalance: Invalid address format\");\n            }\n            const params = {\n                address,\n                assetID,\n                includePartial\n            };\n            const response = yield this.callMethod(\"avm.getBalance\", params);\n            return response.data.result;\n        });\n        /**\n         * Creates an address (and associated private keys) on a user on a blockchain.\n         *\n         * @param username Name of the user to create the address under\n         * @param password Password to unlock the user and encrypt the private key\n         *\n         * @returns Promise for a string representing the address created by the vm.\n         */\n        this.createAddress = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"avm.createAddress\", params);\n            return response.data.result.address;\n        });\n        /**\n         * Create a new fixed-cap, fungible asset. A quantity of it is created at initialization and there no more is ever created.\n         *\n         * @param username The user paying the transaction fee (in $DJTX) for asset creation\n         * @param password The password for the user paying the transaction fee (in $DJTX) for asset creation\n         * @param name The human-readable name for the asset\n         * @param symbol Optional. The shorthand symbol for the asset. Between 0 and 4 characters\n         * @param denomination Optional. Determines how balances of this asset are displayed by user interfaces. Default is 0\n         * @param initialHolders An array of objects containing the field \"address\" and \"amount\" to establish the genesis values for the new asset\n         *\n         * ```js\n         * Example initialHolders:\n         * [\n         *   {\n         *     \"address\": \"X-djtx1kj06lhgx84h39snsljcey3tpc046ze68mek3g5\",\n         *     \"amount\": 10000\n         *   },\n         *   {\n         *     \"address\": \"X-djtx1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\",\n         *     \"amount\": 50000\n         *   }\n         * ]\n         * ```\n         *\n         * @returns Returns a Promise string containing the base 58 string representation of the ID of the newly created asset.\n         */\n        this.createFixedCapAsset = (username, password, name, symbol, denomination, initialHolders) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                name,\n                symbol,\n                denomination,\n                username,\n                password,\n                initialHolders\n            };\n            const response = yield this.callMethod(\"avm.createFixedCapAsset\", params);\n            return response.data.result.assetID;\n        });\n        /**\n         * Create a new variable-cap, fungible asset. No units of the asset exist at initialization. Minters can mint units of this asset using createMintTx, signMintTx and sendMintTx.\n         *\n         * @param username The user paying the transaction fee (in $DJTX) for asset creation\n         * @param password The password for the user paying the transaction fee (in $DJTX) for asset creation\n         * @param name The human-readable name for the asset\n         * @param symbol Optional. The shorthand symbol for the asset -- between 0 and 4 characters\n         * @param denomination Optional. Determines how balances of this asset are displayed by user interfaces. Default is 0\n         * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction\n         *\n         * ```js\n         * Example minterSets:\n         * [\n         *    {\n         *      \"minters\":[\n         *        \"X-djtx1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\"\n         *      ],\n         *      \"threshold\": 1\n         *     },\n         *     {\n         *      \"minters\": [\n         *        \"X-djtx1am4w6hfrvmh3akduzkjthrtgtqafalce6an8cr\",\n         *        \"X-djtx1kj06lhgx84h39snsljcey3tpc046ze68mek3g5\",\n         *        \"X-djtx1yell3e4nln0m39cfpdhgqprsd87jkh4qnakklx\"\n         *      ],\n         *      \"threshold\": 2\n         *     }\n         * ]\n         * ```\n         *\n         * @returns Returns a Promise string containing the base 58 string representation of the ID of the newly created asset.\n         */\n        this.createVariableCapAsset = (username, password, name, symbol, denomination, minterSets) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                name,\n                symbol,\n                denomination,\n                username,\n                password,\n                minterSets\n            };\n            const response = yield this.callMethod(\"avm.createVariableCapAsset\", params);\n            return response.data.result.assetID;\n        });\n        /**\n         * Creates a family of NFT Asset. No units of the asset exist at initialization. Minters can mint units of this asset using createMintTx, signMintTx and sendMintTx.\n         *\n         * @param username The user paying the transaction fee (in $DJTX) for asset creation\n         * @param password The password for the user paying the transaction fee (in $DJTX) for asset creation\n         * @param from Optional. An array of addresses managed by the node's keystore for this blockchain which will fund this transaction\n         * @param changeAddr Optional. An address to send the change\n         * @param name The human-readable name for the asset\n         * @param symbol Optional. The shorthand symbol for the asset -- between 0 and 4 characters\n         * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction\n         *\n         * @returns Returns a Promise string containing the base 58 string representation of the ID of the newly created asset.\n         */\n        this.createNFTAsset = (username, password, from = undefined, changeAddr, name, symbol, minterSet) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                name,\n                symbol,\n                minterSet\n            };\n            const caller = \"createNFTAsset\";\n            from = this._cleanAddressArray(from, caller);\n            if (typeof from !== \"undefined\") {\n                params[\"from\"] = from;\n            }\n            if (typeof changeAddr !== \"undefined\") {\n                if (typeof this.parseAddress(changeAddr) === \"undefined\") {\n                    /* istanbul ignore next */\n                    throw new errors_1.AddressError(\"Error - AVMAPI.createNFTAsset: Invalid address format\");\n                }\n                params[\"changeAddr\"] = changeAddr;\n            }\n            const response = yield this.callMethod(\"avm.createNFTAsset\", params);\n            return response.data.result.assetID;\n        });\n        /**\n         * Create an unsigned transaction to mint more of an asset.\n         *\n         * @param amount The units of the asset to mint\n         * @param assetID The ID of the asset to mint\n         * @param to The address to assign the units of the minted asset\n         * @param minters Addresses of the minters responsible for signing the transaction\n         *\n         * @returns Returns a Promise string containing the base 58 string representation of the unsigned transaction.\n         */\n        this.mint = (username, password, amount, assetID, to, minters) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            if (typeof amount === \"number\") {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            const params = {\n                username: username,\n                password: password,\n                amount: amnt,\n                assetID: asset,\n                to,\n                minters\n            };\n            const response = yield this.callMethod(\"avm.mint\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Mint non-fungible tokens which were created with AVMAPI.createNFTAsset\n         *\n         * @param username The user paying the transaction fee (in $DJTX) for asset creation\n         * @param password The password for the user paying the transaction fee (in $DJTX) for asset creation\n         * @param from Optional. An array of addresses managed by the node's keystore for this blockchain which will fund this transaction\n         * @param changeAddr Optional. An address to send the change\n         * @param assetID The asset id which is being sent\n         * @param to Address on X-Chain of the account to which this NFT is being sent\n         * @param encoding Optional.  is the encoding format to use for the payload argument. Can be either \"cb58\" or \"hex\". Defaults to \"hex\".\n         *\n         * @returns ID of the transaction\n         */\n        this.mintNFT = (username, password, from = undefined, changeAddr = undefined, payload, assetID, to, encoding = \"hex\") => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            if (typeof this.parseAddress(to) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - AVMAPI.mintNFT: Invalid address format\");\n            }\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            const params = {\n                username,\n                password,\n                assetID: asset,\n                payload,\n                to,\n                encoding\n            };\n            const caller = \"mintNFT\";\n            from = this._cleanAddressArray(from, caller);\n            if (typeof from !== \"undefined\") {\n                params[\"from\"] = from;\n            }\n            if (typeof changeAddr !== \"undefined\") {\n                if (typeof this.parseAddress(changeAddr) === \"undefined\") {\n                    /* istanbul ignore next */\n                    throw new errors_1.AddressError(\"Error - AVMAPI.mintNFT: Invalid address format\");\n                }\n                params[\"changeAddr\"] = changeAddr;\n            }\n            const response = yield this.callMethod(\"avm.mintNFT\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Send NFT from one account to another on X-Chain\n         *\n         * @param username The user paying the transaction fee (in $DJTX) for asset creation\n         * @param password The password for the user paying the transaction fee (in $DJTX) for asset creation\n         * @param from Optional. An array of addresses managed by the node's keystore for this blockchain which will fund this transaction\n         * @param changeAddr Optional. An address to send the change\n         * @param assetID The asset id which is being sent\n         * @param groupID The group this NFT is issued to.\n         * @param to Address on X-Chain of the account to which this NFT is being sent\n         *\n         * @returns ID of the transaction\n         */\n        this.sendNFT = (username, password, from = undefined, changeAddr = undefined, assetID, groupID, to) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            if (typeof this.parseAddress(to) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - AVMAPI.sendNFT: Invalid address format\");\n            }\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            const params = {\n                username,\n                password,\n                assetID: asset,\n                groupID,\n                to\n            };\n            const caller = \"sendNFT\";\n            from = this._cleanAddressArray(from, caller);\n            if (typeof from !== \"undefined\") {\n                params[\"from\"] = from;\n            }\n            if (typeof changeAddr !== \"undefined\") {\n                if (typeof this.parseAddress(changeAddr) === \"undefined\") {\n                    /* istanbul ignore next */\n                    throw new errors_1.AddressError(\"Error - AVMAPI.sendNFT: Invalid address format\");\n                }\n                params[\"changeAddr\"] = changeAddr;\n            }\n            const response = yield this.callMethod(\"avm.sendNFT\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Exports the private key for an address.\n         *\n         * @param username The name of the user with the private key\n         * @param password The password used to decrypt the private key\n         * @param address The address whose private key should be exported\n         *\n         * @returns Promise with the decrypted private key as store in the database\n         */\n        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - AVMAPI.exportKey: Invalid address format\");\n            }\n            const params = {\n                username,\n                password,\n                address\n            };\n            const response = yield this.callMethod(\"avm.exportKey\", params);\n            return response.data.result.privateKey;\n        });\n        /**\n         * Imports a private key into the node's keystore under an user and for a blockchain.\n         *\n         * @param username The name of the user to store the private key\n         * @param password The password that unlocks the user\n         * @param privateKey A string representing the private key in the vm's format\n         *\n         * @returns The address for the imported private key.\n         */\n        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                privateKey\n            };\n            const response = yield this.callMethod(\"avm.importKey\", params);\n            return response.data.result.address;\n        });\n        /**\n         * Send ANT (Avalanche Native Token) assets including DJTX from the X-Chain to an account on the P-Chain or C-Chain.\n         *\n         * After calling this method, you must call the P-Chain's `import` or the C-Chain’s `import` method to complete the transfer.\n         *\n         * @param username The Keystore user that controls the P-Chain or C-Chain account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The account on the P-Chain or C-Chain to send the asset to.\n         * @param amount Amount of asset to export as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param assetID The asset id which is being sent\n         *\n         * @returns String representing the transaction id\n         */\n        this.export = (username, password, to, amount, assetID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                to,\n                amount: amount,\n                assetID\n            };\n            const response = yield this.callMethod(\"avm.export\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Send ANT (Avalanche Native Token) assets including DJTX from an account on the P-Chain or C-Chain to an address on the X-Chain. This transaction\n         * must be signed with the key of the account that the asset is sent from and which pays\n         * the transaction fee.\n         *\n         * @param username The Keystore user that controls the account specified in `to`\n         * @param password The password of the Keystore user\n         * @param to The address of the account the asset is sent to.\n         * @param sourceChain The chainID where the funds are coming from. Ex: \"C\"\n         *\n         * @returns Promise for a string for the transaction, which should be sent to the network\n         * by calling issueTx.\n         */\n        this.import = (username, password, to, sourceChain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password,\n                to,\n                sourceChain\n            };\n            const response = yield this.callMethod(\"avm.import\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Lists all the addresses under a user.\n         *\n         * @param username The user to list addresses\n         * @param password The password of the user to list the addresses\n         *\n         * @returns Promise of an array of address strings in the format specified by the blockchain.\n         */\n        this.listAddresses = (username, password) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                username,\n                password\n            };\n            const response = yield this.callMethod(\"avm.listAddresses\", params);\n            return response.data.result.addresses;\n        });\n        /**\n         * Retrieves all assets for an address on a server and their associated balances.\n         *\n         * @param address The address to get a list of assets\n         *\n         * @returns Promise of an object mapping assetID strings with {@link https://github.com/indutny/bn.js/|BN} balance for the address on the blockchain.\n         */\n        this.getAllBalances = (address) => __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.parseAddress(address) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - AVMAPI.getAllBalances: Invalid address format\");\n            }\n            const params = {\n                address\n            };\n            const response = yield this.callMethod(\"avm.getAllBalances\", params);\n            return response.data.result.balances;\n        });\n        /**\n         * Retrieves an assets name and symbol.\n         *\n         * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an b58 serialized string for the AssetID or its alias.\n         *\n         * @returns Returns a Promise object with keys \"name\" and \"symbol\".\n         */\n        this.getAssetDescription = (assetID) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            const params = {\n                assetID: asset\n            };\n            const response = yield this.callMethod(\"avm.getAssetDescription\", params);\n            return {\n                name: response.data.result.name,\n                symbol: response.data.result.symbol,\n                assetID: bintools.cb58Decode(response.data.result.assetID),\n                denomination: parseInt(response.data.result.denomination, 10)\n            };\n        });\n        /**\n         * Returns the transaction data of a provided transaction ID by calling the node's `getTx` method.\n         *\n         * @param txID The string representation of the transaction ID\n         * @param encoding sets the format of the returned transaction. Can be, \"cb58\", \"hex\" or \"json\". Defaults to \"cb58\".\n         *\n         * @returns Returns a Promise string or object containing the bytes retrieved from the node\n         */\n        this.getTx = (txID, encoding = \"hex\") => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID,\n                encoding\n            };\n            const response = yield this.callMethod(\"avm.getTx\", params);\n            return response.data.result.tx;\n        });\n        /**\n         * Returns the status of a provided transaction ID by calling the node's `getTxStatus` method.\n         *\n         * @param txID The string representation of the transaction ID\n         *\n         * @returns Returns a Promise string containing the status retrieved from the node\n         */\n        this.getTxStatus = (txID) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                txID\n            };\n            const response = yield this.callMethod(\"avm.getTxStatus\", params);\n            return response.data.result.status;\n        });\n        /**\n         * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.\n         *\n         * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s\n         * @param sourceChain A string for the chain to look for the UTXO's. Default is to use this chain, but if exported UTXOs exist from other chains, this can used to pull them instead.\n         * @param limit Optional. Returns at most [limit] addresses. If [limit] == 0 or > [maxUTXOsToFetch], fetches up to [maxUTXOsToFetch].\n         * @param startIndex Optional. [StartIndex] defines where to start fetching UTXOs (for pagination.)\n         * UTXOs fetched are from addresses equal to or greater than [StartIndex.Address]\n         * For address [StartIndex.Address], only UTXOs with IDs greater than [StartIndex.Utxo] will be returned.\n         * @param persistOpts Options available to persist these UTXOs in local storage\n         *\n         * @remarks\n         * persistOpts is optional and must be of type [[PersistanceOptions]]\n         *\n         */\n        this.getUTXOs = (addresses, sourceChain = undefined, limit = 0, startIndex = undefined, persistOpts = undefined, encoding = \"hex\") => __awaiter(this, void 0, void 0, function* () {\n            if (typeof addresses === \"string\") {\n                addresses = [addresses];\n            }\n            const params = {\n                addresses: addresses,\n                limit,\n                encoding\n            };\n            if (typeof startIndex !== \"undefined\" && startIndex) {\n                params.startIndex = startIndex;\n            }\n            if (typeof sourceChain !== \"undefined\") {\n                params.sourceChain = sourceChain;\n            }\n            const response = yield this.callMethod(\"avm.getUTXOs\", params);\n            const utxos = new utxos_1.UTXOSet();\n            let data = response.data.result.utxos;\n            if (persistOpts && typeof persistOpts === \"object\") {\n                if (this.db.has(persistOpts.getName())) {\n                    const selfArray = this.db.get(persistOpts.getName());\n                    if (Array.isArray(selfArray)) {\n                        utxos.addArray(data);\n                        const utxoSet = new utxos_1.UTXOSet();\n                        utxoSet.addArray(selfArray);\n                        utxoSet.mergeByRule(utxos, persistOpts.getMergeRule());\n                        data = utxoSet.getAllUTXOStrings();\n                    }\n                }\n                this.db.set(persistOpts.getName(), data, persistOpts.getOverwrite());\n            }\n            if (data.length > 0 && data[0].substring(0, 2) === \"0x\") {\n                const cb58Strs = [];\n                data.forEach((str) => {\n                    cb58Strs.push(bintools.cb58Encode(new buffer_1.Buffer(str.slice(2), \"hex\")));\n                });\n                utxos.addArray(cb58Strs, false);\n            }\n            else {\n                utxos.addArray(data, false);\n            }\n            response.data.result.utxos = utxos;\n            return response.data.result;\n        });\n        /**\n         * Helper function which creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount of AssetID to be spent in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}.\n         * @param assetID The assetID of the value being sent\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[BaseTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildBaseTx = (utxoset, amount, assetID = undefined, toAddresses, fromAddresses, changeAddresses, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const caller = \"buildBaseTx\";\n            const to = this._cleanAddressArray(toAddresses, caller).map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, caller).map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, caller).map((a) => bintools.stringToAddress(a));\n            if (typeof assetID === \"string\") {\n                assetID = bintools.cb58Decode(assetID);\n            }\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const networkID = this.core.getNetworkID();\n            const blockchainIDBuf = bintools.cb58Decode(this.blockchainID);\n            const fee = this.getTxFee();\n            const feeAssetID = yield this.getDJTXAssetID();\n            const builtUnsignedTx = utxoset.buildBaseTx(networkID, blockchainIDBuf, amount, assetID, to, from, change, fee, feeAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildBaseTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned NFT Transfer. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset  A set of UTXOs that the transaction is built on\n         * @param toAddresses The addresses to send the NFT\n         * @param fromAddresses The addresses being used to send the NFT from the utxoID provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the nfts this transaction is sending\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[NFTTransferTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildNFTTransferTx = (utxoset, toAddresses, fromAddresses, changeAddresses, utxoid, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const caller = \"buildNFTTransferTx\";\n            const to = this._cleanAddressArray(toAddresses, caller).map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, caller).map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, caller).map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            let utxoidArray = [];\n            if (typeof utxoid === \"string\") {\n                utxoidArray = [utxoid];\n            }\n            else if (Array.isArray(utxoid)) {\n                utxoidArray = utxoid;\n            }\n            const builtUnsignedTx = utxoset.buildNFTTransferTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, utxoidArray, this.getTxFee(), djtxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildNFTTransferTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Import Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset  A set of UTXOs that the transaction is built on\n         * @param ownerAddresses The addresses being used to import\n         * @param sourceChain The chainid for where the import is coming from\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].\n         *\n         * @remarks\n         * This helper exists because the endpoint API should be the primary point of entry for most functionality.\n         */\n        this.buildImportTx = (utxoset, ownerAddresses, sourceChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {\n            const caller = \"buildImportTx\";\n            const to = this._cleanAddressArray(toAddresses, caller).map((a) => bintools.stringToAddress(a));\n            const from = this._cleanAddressArray(fromAddresses, caller).map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, caller).map((a) => bintools.stringToAddress(a));\n            let srcChain = undefined;\n            if (typeof sourceChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildImportTx: Source ChainID is undefined.\");\n            }\n            else if (typeof sourceChain === \"string\") {\n                srcChain = sourceChain;\n                sourceChain = bintools.cb58Decode(sourceChain);\n            }\n            else if (!(sourceChain instanceof buffer_1.Buffer)) {\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildImportTx: Invalid destinationChain type: \" +\n                    typeof sourceChain);\n            }\n            const atomicUTXOs = (yield this.getUTXOs(ownerAddresses, srcChain, 0, undefined)).utxos;\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const atomics = atomicUTXOs.getAllUTXOs();\n            if (atomics.length === 0) {\n                throw new errors_1.NoAtomicUTXOsError(\"Error - AVMAPI.buildImportTx: No atomic UTXOs to import from \" +\n                    srcChain +\n                    \" using addresses: \" +\n                    ownerAddresses.join(\", \"));\n            }\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const builtUnsignedTx = utxoset.buildImportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), to, from, change, atomics, sourceChain, this.getTxFee(), djtxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildImportTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which creates an unsigned Export Tx. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param destinationChain The chainid for where the assets will be sent.\n         * @param toAddresses The addresses to send the funds\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         * @param assetID Optional. The assetID of the asset to send. Defaults to DJTX assetID.\n         * Regardless of the asset which you\"re exporting, all fees are paid in DJTX.\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].\n         */\n        this.buildExportTx = (utxoset, amount, destinationChain, toAddresses, fromAddresses, changeAddresses = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1, assetID = undefined) => __awaiter(this, void 0, void 0, function* () {\n            const prefixes = {};\n            toAddresses.map((a) => {\n                prefixes[a.split(\"-\")[0]] = true;\n            });\n            if (Object.keys(prefixes).length !== 1) {\n                throw new errors_1.AddressError(\"Error - AVMAPI.buildExportTx: To addresses must have the same chainID prefix.\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildExportTx: Destination ChainID is undefined.\");\n            }\n            else if (typeof destinationChain === \"string\") {\n                destinationChain = bintools.cb58Decode(destinationChain); //\n            }\n            else if (!(destinationChain instanceof buffer_1.Buffer)) {\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildExportTx: Invalid destinationChain type: \" +\n                    typeof destinationChain);\n            }\n            if (destinationChain.length !== 32) {\n                throw new errors_1.ChainIdError(\"Error - AVMAPI.buildExportTx: Destination ChainID must be 32 bytes in length.\");\n            }\n            const to = [];\n            toAddresses.map((a) => {\n                to.push(bintools.stringToAddress(a));\n            });\n            const caller = \"buildExportTx\";\n            const from = this._cleanAddressArray(fromAddresses, caller).map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, caller).map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            if (typeof assetID === \"undefined\") {\n                assetID = bintools.cb58Encode(djtxAssetID);\n            }\n            const networkID = this.core.getNetworkID();\n            const blockchainID = bintools.cb58Decode(this.blockchainID);\n            const assetIDBuf = bintools.cb58Decode(assetID);\n            const fee = this.getTxFee();\n            const builtUnsignedTx = utxoset.buildExportTx(networkID, blockchainID, amount, assetIDBuf, to, from, change, destinationChain, fee, djtxAssetID, memo, asOf, locktime, threshold);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildExportTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param initialState The [[InitialStates]] that represent the intial state of a created asset\n         * @param name String for the descriptive name of the asset\n         * @param symbol String for the ticker symbol of the asset\n         * @param denomination Number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 DJTX = 10^9 $nDJTX\n         * @param mintOutputs Optional. Array of [[SECPMintOutput]]s to be included in the transaction. These outputs can be spent to mint more tokens.\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[CreateAssetTx]].\n         *\n         */\n        this.buildCreateAssetTx = (utxoset, fromAddresses, changeAddresses, initialStates, name, symbol, denomination, mintOutputs = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => __awaiter(this, void 0, void 0, function* () {\n            const caller = \"buildCreateAssetTx\";\n            const from = this._cleanAddressArray(fromAddresses, caller).map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, caller).map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (symbol.length > constants_1.AVMConstants.SYMBOLMAXLEN) {\n                throw new errors_1.SymbolError(\"Error - AVMAPI.buildCreateAssetTx: Symbols may not exceed length of \" +\n                    constants_1.AVMConstants.SYMBOLMAXLEN);\n            }\n            if (name.length > constants_1.AVMConstants.ASSETNAMELEN) {\n                throw new errors_1.NameError(\"Error - AVMAPI.buildCreateAssetTx: Names may not exceed length of \" +\n                    constants_1.AVMConstants.ASSETNAMELEN);\n            }\n            const networkID = this.core.getNetworkID();\n            const blockchainID = bintools.cb58Decode(this.blockchainID);\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const fee = this.getDefaultCreationTxFee();\n            const builtUnsignedTx = utxoset.buildCreateAssetTx(networkID, blockchainID, from, change, initialStates, name, symbol, denomination, mintOutputs, fee, djtxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx, fee))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildCreateAssetTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        this.buildSECPMintTx = (utxoset, mintOwner, transferOwner, fromAddresses, changeAddresses, mintUTXOID, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => __awaiter(this, void 0, void 0, function* () {\n            const caller = \"buildSECPMintTx\";\n            const from = this._cleanAddressArray(fromAddresses, caller).map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, caller).map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            const networkID = this.core.getNetworkID();\n            const blockchainID = bintools.cb58Decode(this.blockchainID);\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const fee = this.getMintTxFee();\n            const builtUnsignedTx = utxoset.buildSECPMintTx(networkID, blockchainID, mintOwner, transferOwner, from, change, mintUTXOID, fee, djtxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildSECPMintTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset A set of UTXOs that the transaction is built on\n         * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction\n         * @param name String for the descriptive name of the asset\n         * @param symbol String for the ticker symbol of the asset\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting mint output\n         *\n         * ```js\n         * Example minterSets:\n         * [\n         *      {\n         *          \"minters\":[\n         *              \"X-djtx1ghstjukrtw8935lryqtnh643xe9a94u3tc75c7\"\n         *          ],\n         *          \"threshold\": 1\n         *      },\n         *      {\n         *          \"minters\": [\n         *              \"X-djtx1yell3e4nln0m39cfpdhgqprsd87jkh4qnakklx\",\n         *              \"X-djtx1k4nr26c80jaquzm9369j5a4shmwcjn0vmemcjz\",\n         *              \"X-djtx1ztkzsrjnkn0cek5ryvhqswdtcg23nhge3nnr5e\"\n         *          ],\n         *          \"threshold\": 2\n         *      }\n         * ]\n         * ```\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[CreateAssetTx]].\n         *\n         */\n        this.buildCreateNFTAssetTx = (utxoset, fromAddresses, changeAddresses, minterSets, name, symbol, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {\n            const caller = \"buildCreateNFTAssetTx\";\n            const from = this._cleanAddressArray(fromAddresses, caller).map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, caller).map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (name.length > constants_1.AVMConstants.ASSETNAMELEN) {\n                /* istanbul ignore next */\n                throw new errors_1.NameError(\"Error - AVMAPI.buildCreateNFTAssetTx: Names may not exceed length of \" +\n                    constants_1.AVMConstants.ASSETNAMELEN);\n            }\n            if (symbol.length > constants_1.AVMConstants.SYMBOLMAXLEN) {\n                /* istanbul ignore next */\n                throw new errors_1.SymbolError(\"Error - AVMAPI.buildCreateNFTAssetTx: Symbols may not exceed length of \" +\n                    constants_1.AVMConstants.SYMBOLMAXLEN);\n            }\n            const networkID = this.core.getNetworkID();\n            const blockchainID = bintools.cb58Decode(this.blockchainID);\n            const creationTxFee = this.getCreationTxFee();\n            const djtxAssetID = yield this.getDJTXAssetID();\n            const builtUnsignedTx = utxoset.buildCreateNFTAssetTx(networkID, blockchainID, from, change, minterSets, name, symbol, creationTxFee, djtxAssetID, memo, asOf, locktime);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx, creationTxFee))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildCreateNFTAssetTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Creates an unsigned transaction. For more granular control, you may create your own\n         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).\n         *\n         * @param utxoset  A set of UTXOs that the transaction is built on\n         * @param owners Either a single or an array of [[OutputOwners]] to send the nft output\n         * @param fromAddresses The addresses being used to send the NFT from the utxoID provided\n         * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs\n         * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the nft mint output this transaction is sending\n         * @param groupID Optional. The group this NFT is issued to.\n         * @param payload Optional. Data for NFT Payload as either a [[PayloadBase]] or a {@link https://github.com/feross/buffer|Buffer}\n         * @param memo Optional CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         *\n         * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[OperationTx]].\n         *\n         */\n        this.buildCreateNFTMintTx = (utxoset, owners, fromAddresses, changeAddresses, utxoid, groupID = 0, payload = undefined, memo = undefined, asOf = (0, helperfunctions_1.UnixNow)()) => __awaiter(this, void 0, void 0, function* () {\n            const caller = \"buildCreateNFTMintTx\";\n            const from = this._cleanAddressArray(fromAddresses, caller).map((a) => bintools.stringToAddress(a));\n            const change = this._cleanAddressArray(changeAddresses, caller).map((a) => bintools.stringToAddress(a));\n            if (memo instanceof payload_1.PayloadBase) {\n                memo = memo.getPayload();\n            }\n            if (payload instanceof payload_1.PayloadBase) {\n                payload = payload.getPayload();\n            }\n            if (typeof utxoid === \"string\") {\n                utxoid = [utxoid];\n            }\n            const djtxAssetID = yield this.getDJTXAssetID();\n            if (owners instanceof output_1.OutputOwners) {\n                owners = [owners];\n            }\n            const networkID = this.core.getNetworkID();\n            const blockchainID = bintools.cb58Decode(this.blockchainID);\n            const txFee = this.getTxFee();\n            const builtUnsignedTx = utxoset.buildCreateNFTMintTx(networkID, blockchainID, owners, from, change, utxoid, groupID, payload, txFee, djtxAssetID, memo, asOf);\n            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {\n                /* istanbul ignore next */\n                throw new errors_1.GooseEggCheckError(\"Error - AVMAPI.buildCreateNFTMintTx:Failed Goose Egg Check\");\n            }\n            return builtUnsignedTx;\n        });\n        /**\n         * Helper function which takes an unsigned transaction and signs it, returning the resulting [[Tx]].\n         *\n         * @param utx The unsigned transaction of type [[UnsignedTx]]\n         *\n         * @returns A signed transaction of type [[Tx]]\n         */\n        this.signTx = (utx) => utx.sign(this.keychain);\n        /**\n         * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.\n         *\n         * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction\n         *\n         * @returns A Promise string representing the transaction ID of the posted transaction.\n         */\n        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {\n            let Transaction = \"\";\n            if (typeof tx === \"string\") {\n                Transaction = tx;\n            }\n            else if (tx instanceof buffer_1.Buffer) {\n                const txobj = new tx_1.Tx();\n                txobj.fromBuffer(tx);\n                Transaction = txobj.toStringHex();\n            }\n            else if (tx instanceof tx_1.Tx) {\n                Transaction = tx.toStringHex();\n            }\n            else {\n                /* istanbul ignore next */\n                throw new errors_1.TransactionError(\"Error - AVMAPI.issueTx: provided tx is not expected type of string, Buffer, or Tx\");\n            }\n            const params = {\n                tx: Transaction.toString(),\n                encoding: \"hex\"\n            };\n            const response = yield this.callMethod(\"avm.issueTx\", params);\n            return response.data.result.txID;\n        });\n        /**\n         * Calls the node's getAddressTxs method from the API and returns transactions corresponding to the provided address and assetID\n         *\n         * @param address The address for which we're fetching related transactions.\n         * @param cursor Page number or offset.\n         * @param pageSize  Number of items to return per page. Optional. Defaults to 1024. If [pageSize] == 0 or [pageSize] > [maxPageSize], then it fetches at max [maxPageSize] transactions\n         * @param assetID Only return transactions that changed the balance of this asset. Must be an ID or an alias for an asset.\n         *\n         * @returns A promise object representing the array of transaction IDs and page offset\n         */\n        this.getAddressTxs = (address, cursor, pageSize, assetID) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let pageSizeNum;\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            if (typeof pageSize !== \"number\") {\n                pageSizeNum = 0;\n            }\n            else {\n                pageSizeNum = pageSize;\n            }\n            const params = {\n                address,\n                cursor,\n                pageSize: pageSizeNum,\n                assetID: asset\n            };\n            const response = yield this.callMethod(\"avm.getAddressTxs\", params);\n            return response.data.result;\n        });\n        /**\n         * Sends an amount of assetID to the specified address from a list of owned of addresses.\n         *\n         * @param username The user that owns the private keys associated with the `from` addresses\n         * @param password The password unlocking the user\n         * @param assetID The assetID of the asset to send\n         * @param amount The amount of the asset to be sent\n         * @param to The address of the recipient\n         * @param from Optional. An array of addresses managed by the node's keystore for this blockchain which will fund this transaction\n         * @param changeAddr Optional. An address to send the change\n         * @param memo Optional. CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         *\n         * @returns Promise for the string representing the transaction's ID.\n         */\n        this.send = (username, password, assetID, amount, to, from = undefined, changeAddr = undefined, memo = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            if (typeof this.parseAddress(to) === \"undefined\") {\n                /* istanbul ignore next */\n                throw new errors_1.AddressError(\"Error - AVMAPI.send: Invalid address format\");\n            }\n            if (typeof assetID !== \"string\") {\n                asset = bintools.cb58Encode(assetID);\n            }\n            else {\n                asset = assetID;\n            }\n            if (typeof amount === \"number\") {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            const params = {\n                username: username,\n                password: password,\n                assetID: asset,\n                amount: amnt.toString(10),\n                to: to\n            };\n            const caller = \"send\";\n            from = this._cleanAddressArray(from, caller);\n            if (typeof from !== \"undefined\") {\n                params[\"from\"] = from;\n            }\n            if (typeof changeAddr !== \"undefined\") {\n                if (typeof this.parseAddress(changeAddr) === \"undefined\") {\n                    /* istanbul ignore next */\n                    throw new errors_1.AddressError(\"Error - AVMAPI.send: Invalid address format\");\n                }\n                params[\"changeAddr\"] = changeAddr;\n            }\n            if (typeof memo !== \"undefined\") {\n                if (typeof memo !== \"string\") {\n                    params[\"memo\"] = bintools.cb58Encode(memo);\n                }\n                else {\n                    params[\"memo\"] = memo;\n                }\n            }\n            const response = yield this.callMethod(\"avm.send\", params);\n            return response.data.result;\n        });\n        /**\n         * Sends an amount of assetID to an array of specified addresses from a list of owned of addresses.\n         *\n         * @param username The user that owns the private keys associated with the `from` addresses\n         * @param password The password unlocking the user\n         * @param sendOutputs The array of SendOutputs. A SendOutput is an object literal which contains an assetID, amount, and to.\n         * @param from Optional. An array of addresses managed by the node's keystore for this blockchain which will fund this transaction\n         * @param changeAddr Optional. An address to send the change\n         * @param memo Optional. CB58 Buffer or String which contains arbitrary bytes, up to 256 bytes\n         *\n         * @returns Promise for the string representing the transaction\"s ID.\n         */\n        this.sendMultiple = (username, password, sendOutputs, from = undefined, changeAddr = undefined, memo = undefined) => __awaiter(this, void 0, void 0, function* () {\n            let asset;\n            let amnt;\n            const sOutputs = [];\n            sendOutputs.forEach((output) => {\n                if (typeof this.parseAddress(output.to) === \"undefined\") {\n                    /* istanbul ignore next */\n                    throw new errors_1.AddressError(\"Error - AVMAPI.sendMultiple: Invalid address format\");\n                }\n                if (typeof output.assetID !== \"string\") {\n                    asset = bintools.cb58Encode(output.assetID);\n                }\n                else {\n                    asset = output.assetID;\n                }\n                if (typeof output.amount === \"number\") {\n                    amnt = new bn_js_1.default(output.amount);\n                }\n                else {\n                    amnt = output.amount;\n                }\n                sOutputs.push({\n                    to: output.to,\n                    assetID: asset,\n                    amount: amnt.toString(10)\n                });\n            });\n            const params = {\n                username: username,\n                password: password,\n                outputs: sOutputs\n            };\n            const caller = \"send\";\n            from = this._cleanAddressArray(from, caller);\n            if (typeof from !== \"undefined\") {\n                params.from = from;\n            }\n            if (typeof changeAddr !== \"undefined\") {\n                if (typeof this.parseAddress(changeAddr) === \"undefined\") {\n                    /* istanbul ignore next */\n                    throw new errors_1.AddressError(\"Error - AVMAPI.send: Invalid address format\");\n                }\n                params.changeAddr = changeAddr;\n            }\n            if (typeof memo !== \"undefined\") {\n                if (typeof memo !== \"string\") {\n                    params.memo = bintools.cb58Encode(memo);\n                }\n                else {\n                    params.memo = memo;\n                }\n            }\n            const response = yield this.callMethod(\"avm.sendMultiple\", params);\n            return response.data.result;\n        });\n        /**\n         * Given a JSON representation of this Virtual Machine’s genesis state, create the byte representation of that state.\n         *\n         * @param genesisData The blockchain's genesis data object\n         *\n         * @returns Promise of a string of bytes\n         */\n        this.buildGenesis = (genesisData) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                genesisData\n            };\n            const response = yield this.callMethod(\"avm.buildGenesis\", params);\n            return response.data.result.bytes;\n        });\n        this.blockchainID = blockchainID;\n        const netID = core.getNetworkID();\n        if (netID in constants_2.Defaults.network &&\n            blockchainID in constants_2.Defaults.network[`${netID}`]) {\n            const alias = constants_2.Defaults.network[`${netID}`][`${blockchainID}`][\"alias\"];\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), alias);\n        }\n        else {\n            this.keychain = new keychain_1.KeyChain(this.core.getHRP(), blockchainID);\n        }\n    }\n    /**\n     * @ignore\n     */\n    _cleanAddressArray(addresses, caller) {\n        const addrs = [];\n        const chainID = this.getBlockchainAlias()\n            ? this.getBlockchainAlias()\n            : this.getBlockchainID();\n        if (addresses && addresses.length > 0) {\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[`${i}`] === \"string\") {\n                    if (typeof this.parseAddress(addresses[`${i}`]) ===\n                        \"undefined\") {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - AVMAPI.${caller}: Invalid address format\");\n                    }\n                    addrs.push(addresses[`${i}`]);\n                }\n                else {\n                    const type = \"bech32\";\n                    addrs.push(serialization.bufferToType(addresses[`${i}`], type, this.core.getHRP(), chainID));\n                }\n            }\n        }\n        return addrs;\n    }\n}\nexports.AVMAPI = AVMAPI;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\nconst Buffer = require('safer-buffer').Buffer;\nconst Node = require('../base/node');\n\n// Import DER constants\nconst der = require('../constants/der');\n\nfunction DEREncoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n}\nmodule.exports = DEREncoder;\n\nDEREncoder.prototype.encode = function encode(data, reporter) {\n  return this.tree._encode(data, reporter).join();\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  Node.call(this, 'der', parent);\n}\ninherits(DERNode, Node);\n\nDERNode.prototype._encodeComposite = function encodeComposite(tag,\n  primitive,\n  cls,\n  content) {\n  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);\n\n  // Short form\n  if (content.length < 0x80) {\n    const header = Buffer.alloc(2);\n    header[0] = encodedTag;\n    header[1] = content.length;\n    return this._createEncoderBuffer([ header, content ]);\n  }\n\n  // Long form\n  // Count octets required to store length\n  let lenOctets = 1;\n  for (let i = content.length; i >= 0x100; i >>= 8)\n    lenOctets++;\n\n  const header = Buffer.alloc(1 + 1 + lenOctets);\n  header[0] = encodedTag;\n  header[1] = 0x80 | lenOctets;\n\n  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)\n    header[i] = j & 0xff;\n\n  return this._createEncoderBuffer([ header, content ]);\n};\n\nDERNode.prototype._encodeStr = function encodeStr(str, tag) {\n  if (tag === 'bitstr') {\n    return this._createEncoderBuffer([ str.unused | 0, str.data ]);\n  } else if (tag === 'bmpstr') {\n    const buf = Buffer.alloc(str.length * 2);\n    for (let i = 0; i < str.length; i++) {\n      buf.writeUInt16BE(str.charCodeAt(i), i * 2);\n    }\n    return this._createEncoderBuffer(buf);\n  } else if (tag === 'numstr') {\n    if (!this._isNumstr(str)) {\n      return this.reporter.error('Encoding of string type: numstr supports ' +\n                                 'only digits and space');\n    }\n    return this._createEncoderBuffer(str);\n  } else if (tag === 'printstr') {\n    if (!this._isPrintstr(str)) {\n      return this.reporter.error('Encoding of string type: printstr supports ' +\n                                 'only latin upper and lower case letters, ' +\n                                 'digits, space, apostrophe, left and rigth ' +\n                                 'parenthesis, plus sign, comma, hyphen, ' +\n                                 'dot, slash, colon, equal sign, ' +\n                                 'question mark');\n    }\n    return this._createEncoderBuffer(str);\n  } else if (/str$/.test(tag)) {\n    return this._createEncoderBuffer(str);\n  } else if (tag === 'objDesc') {\n    return this._createEncoderBuffer(str);\n  } else {\n    return this.reporter.error('Encoding of string type: ' + tag +\n                               ' unsupported');\n  }\n};\n\nDERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {\n  if (typeof id === 'string') {\n    if (!values)\n      return this.reporter.error('string objid given, but no values map found');\n    if (!values.hasOwnProperty(id))\n      return this.reporter.error('objid not found in values map');\n    id = values[id].split(/[\\s.]+/g);\n    for (let i = 0; i < id.length; i++)\n      id[i] |= 0;\n  } else if (Array.isArray(id)) {\n    id = id.slice();\n    for (let i = 0; i < id.length; i++)\n      id[i] |= 0;\n  }\n\n  if (!Array.isArray(id)) {\n    return this.reporter.error('objid() should be either array or string, ' +\n                               'got: ' + JSON.stringify(id));\n  }\n\n  if (!relative) {\n    if (id[1] >= 40)\n      return this.reporter.error('Second objid identifier OOB');\n    id.splice(0, 2, id[0] * 40 + id[1]);\n  }\n\n  // Count number of octets\n  let size = 0;\n  for (let i = 0; i < id.length; i++) {\n    let ident = id[i];\n    for (size++; ident >= 0x80; ident >>= 7)\n      size++;\n  }\n\n  const objid = Buffer.alloc(size);\n  let offset = objid.length - 1;\n  for (let i = id.length - 1; i >= 0; i--) {\n    let ident = id[i];\n    objid[offset--] = ident & 0x7f;\n    while ((ident >>= 7) > 0)\n      objid[offset--] = 0x80 | (ident & 0x7f);\n  }\n\n  return this._createEncoderBuffer(objid);\n};\n\nfunction two(num) {\n  if (num < 10)\n    return '0' + num;\n  else\n    return num;\n}\n\nDERNode.prototype._encodeTime = function encodeTime(time, tag) {\n  let str;\n  const date = new Date(time);\n\n  if (tag === 'gentime') {\n    str = [\n      two(date.getUTCFullYear()),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else if (tag === 'utctime') {\n    str = [\n      two(date.getUTCFullYear() % 100),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else {\n    this.reporter.error('Encoding ' + tag + ' time is not supported yet');\n  }\n\n  return this._encodeStr(str, 'octstr');\n};\n\nDERNode.prototype._encodeNull = function encodeNull() {\n  return this._createEncoderBuffer('');\n};\n\nDERNode.prototype._encodeInt = function encodeInt(num, values) {\n  if (typeof num === 'string') {\n    if (!values)\n      return this.reporter.error('String int or enum given, but no values map');\n    if (!values.hasOwnProperty(num)) {\n      return this.reporter.error('Values map doesn\\'t contain: ' +\n                                 JSON.stringify(num));\n    }\n    num = values[num];\n  }\n\n  // Bignum, assume big endian\n  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {\n    const numArray = num.toArray();\n    if (!num.sign && numArray[0] & 0x80) {\n      numArray.unshift(0);\n    }\n    num = Buffer.from(numArray);\n  }\n\n  if (Buffer.isBuffer(num)) {\n    let size = num.length;\n    if (num.length === 0)\n      size++;\n\n    const out = Buffer.alloc(size);\n    num.copy(out);\n    if (num.length === 0)\n      out[0] = 0;\n    return this._createEncoderBuffer(out);\n  }\n\n  if (num < 0x80)\n    return this._createEncoderBuffer(num);\n\n  if (num < 0x100)\n    return this._createEncoderBuffer([0, num]);\n\n  let size = 1;\n  for (let i = num; i >= 0x100; i >>= 8)\n    size++;\n\n  const out = new Array(size);\n  for (let i = out.length - 1; i >= 0; i--) {\n    out[i] = num & 0xff;\n    num >>= 8;\n  }\n  if(out[0] & 0x80) {\n    out.unshift(0);\n  }\n\n  return this._createEncoderBuffer(Buffer.from(out));\n};\n\nDERNode.prototype._encodeBool = function encodeBool(value) {\n  return this._createEncoderBuffer(value ? 0xff : 0);\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getEncoder('der').tree;\n};\n\nDERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {\n  const state = this._baseState;\n  let i;\n  if (state['default'] === null)\n    return false;\n\n  const data = dataBuffer.join();\n  if (state.defaultBuffer === undefined)\n    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();\n\n  if (data.length !== state.defaultBuffer.length)\n    return false;\n\n  for (i=0; i < data.length; i++)\n    if (data[i] !== state.defaultBuffer[i])\n      return false;\n\n  return true;\n};\n\n// Utility methods\n\nfunction encodeTag(tag, primitive, cls, reporter) {\n  let res;\n\n  if (tag === 'seqof')\n    tag = 'seq';\n  else if (tag === 'setof')\n    tag = 'set';\n\n  if (der.tagByName.hasOwnProperty(tag))\n    res = der.tagByName[tag];\n  else if (typeof tag === 'number' && (tag | 0) === tag)\n    res = tag;\n  else\n    return reporter.error('Unknown tag: ' + tag);\n\n  if (res >= 0x1f)\n    return reporter.error('Multi-octet tag encoding unsupported');\n\n  if (!primitive)\n    res |= 0x20;\n\n  res |= (der.tagClassByName[cls || 'universal'] << 6);\n\n  return res;\n}\n","'use strict';\n\nconst base = exports;\n\nbase.Reporter = require('./reporter').Reporter;\nbase.DecoderBuffer = require('./buffer').DecoderBuffer;\nbase.EncoderBuffer = require('./buffer').EncoderBuffer;\nbase.Node = require('./node');\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMInput = exports.SECPTransferInput = exports.AmountInput = exports.TransferableInput = exports.SelectInputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-EVM-Inputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\nconst outputs_1 = require(\"./outputs\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst credentials_1 = require(\"../../common/credentials\");\nconst errors_1 = require(\"../../utils/errors\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputID A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nconst SelectInputClass = (inputID, ...args) => {\n    if (inputID === constants_1.EVMConstants.SECPINPUTID) {\n        return new SECPTransferInput(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.InputIdError(\"Error - SelectInputClass: unknown inputID\");\n};\nexports.SelectInputClass = SelectInputClass;\nclass TransferableInput extends input_1.StandardTransferableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableInput\";\n        this._typeID = undefined;\n        /**\n         *\n         * Assesses the amount to be paid based on the number of signatures required\n         * @returns the amount to be paid\n         */\n        this.getCost = () => {\n            const numSigs = this.getInput().getSigIdxs().length;\n            return numSigs * utils_1.Defaults.network[1].C.costPerSignature;\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = (0, exports.SelectInputClass)(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.EVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.input = (0, exports.SelectInputClass)(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountInput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    select(id, ...args) {\n        return (0, exports.SelectInputClass)(id, ...args);\n    }\n}\nexports.AmountInput = AmountInput;\nclass SECPTransferInput extends AmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferInput\";\n        this._typeID = constants_1.EVMConstants.SECPINPUTID;\n        this.getCredentialID = () => constants_1.EVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the inputID for this input\n     */\n    getInputID() {\n        return constants_1.EVMConstants.SECPINPUTID;\n    }\n    create(...args) {\n        return new SECPTransferInput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferInput = SECPTransferInput;\nclass EVMInput extends outputs_1.EVMOutput {\n    /**\n     * An [[EVMInput]] class which contains address, amount, assetID, nonce.\n     *\n     * @param address is the EVM address from which to transfer funds.\n     * @param amount is the amount of the asset to be transferred (specified in nDJTX for DJTX and the smallest denomination for all other assets).\n     * @param assetID The assetID which is being sent as a {@link https://github.com/feross/buffer|Buffer} or as a string.\n     * @param nonce A {@link https://github.com/indutny/bn.js/|BN} or a number representing the nonce.\n     */\n    constructor(address = undefined, amount = undefined, assetID = undefined, nonce = undefined) {\n        super(address, amount, assetID);\n        this.nonce = buffer_1.Buffer.alloc(8);\n        this.nonceValue = new bn_js_1.default(0);\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n         * Returns the array of [[SigIdx]] for this [[Input]]\n         */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n         * Creates and adds a [[SigIdx]] to the [[Input]].\n         *\n         * @param addressIdx The index of the address to reference in the signatures\n         * @param address The address of the source of the signature\n         */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n        /**\n         * Returns the nonce as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getNonce = () => this.nonceValue.clone();\n        this.getCredentialID = () => constants_1.EVMConstants.SECPCREDENTIAL;\n        if (typeof nonce !== \"undefined\") {\n            // convert number nonce to BN\n            let n;\n            if (typeof nonce === \"number\") {\n                n = new bn_js_1.default(nonce);\n            }\n            else {\n                n = nonce;\n            }\n            this.nonceValue = n.clone();\n            this.nonce = bintools.fromBNToBuffer(n, 8);\n        }\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[EVMOutput]].\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let bsize = superbuff.length + this.nonce.length;\n        let barr = [superbuff, this.nonce];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Decodes the [[EVMInput]] as a {@link https://github.com/feross/buffer|Buffer} and returns the size.\n     *\n     * @param bytes The bytes as a {@link https://github.com/feross/buffer|Buffer}.\n     * @param offset An offset as a number.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.nonce = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        return offset;\n    }\n    /**\n     * Returns a base-58 representation of the [[EVMInput]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n    create(...args) {\n        return new EVMInput(...args);\n    }\n    clone() {\n        const newEVMInput = this.create();\n        newEVMInput.fromBuffer(this.toBuffer());\n        return newEVMInput;\n    }\n}\nexports.EVMInput = EVMInput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module AVM-Interfaces\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGlzL2F2bS9pbnRlcmZhY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0ciLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBVk0tSW50ZXJmYWNlc1xuICovXG5cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXIvXCJcbmltcG9ydCBCTiBmcm9tIFwiYm4uanNcIlxuaW1wb3J0IHsgQ3JlZHNJbnRlcmZhY2UgfSBmcm9tIFwiLi4vLi4vY29tbW9uXCJcbmltcG9ydCB7IFVUWE9TZXQgfSBmcm9tIFwiLi91dHhvc1wiXG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0QVZBWEFzc2V0SURQYXJhbXMge1xuICBuYW1lOiBzdHJpbmdcbiAgc3ltYm9sOiBzdHJpbmdcbiAgYXNzZXRJRDogQnVmZmVyXG4gIGRlbm9taW5hdGlvbjogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0QmFsYW5jZVBhcmFtcyB7XG4gIGFkZHJlc3M6IHN0cmluZ1xuICBhc3NldElEOiBzdHJpbmdcbiAgaW5jbHVkZVBhcnRpYWw6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRCYWxhbmNlUmVzcG9uc2Uge1xuICBiYWxhbmNlOiBudW1iZXIgfCBCTlxuICB1dHhvSURzOiBpVVRYT0lEW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBpVVRYT0lEIHtcbiAgdHhJRDogc3RyaW5nXG4gIG91dHB1dEluZGV4OiBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVBZGRyZXNzUGFyYW1zIGV4dGVuZHMgQ3JlZHNJbnRlcmZhY2Uge31cblxuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVGaXhlZENhcEFzc2V0UGFyYW1zIGV4dGVuZHMgQ3JlZHNJbnRlcmZhY2Uge1xuICBuYW1lOiBzdHJpbmdcbiAgc3ltYm9sOiBzdHJpbmdcbiAgZGVub21pbmF0aW9uOiBudW1iZXJcbiAgaW5pdGlhbEhvbGRlcnM6IG9iamVjdFtdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlVmFyaWFibGVDYXBBc3NldFBhcmFtcyBleHRlbmRzIENyZWRzSW50ZXJmYWNlIHtcbiAgbmFtZTogc3RyaW5nXG4gIHN5bWJvbDogc3RyaW5nXG4gIGRlbm9taW5hdGlvbjogbnVtYmVyXG4gIG1pbnRlclNldHM6IG9iamVjdFtdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWludFBhcmFtcyBleHRlbmRzIENyZWRzSW50ZXJmYWNlIHtcbiAgYW1vdW50OiBudW1iZXIgfCBCTlxuICBhc3NldElEOiBCdWZmZXIgfCBzdHJpbmdcbiAgdG86IHN0cmluZ1xuICBtaW50ZXJzOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4cG9ydEtleVBhcmFtcyBleHRlbmRzIENyZWRzSW50ZXJmYWNlIHtcbiAgYWRkcmVzczogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1wb3J0S2V5UGFyYW1zIGV4dGVuZHMgQ3JlZHNJbnRlcmZhY2Uge1xuICBwcml2YXRlS2V5OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFeHBvcnRQYXJhbXMgZXh0ZW5kcyBDcmVkc0ludGVyZmFjZSB7XG4gIHRvOiBzdHJpbmdcbiAgYW1vdW50OiBCTlxuICBhc3NldElEOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbXBvcnRQYXJhbXMgZXh0ZW5kcyBDcmVkc0ludGVyZmFjZSB7XG4gIHRvOiBzdHJpbmdcbiAgc291cmNlQ2hhaW46IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExpc3RBZGRyZXNzZXNQYXJhbXMgZXh0ZW5kcyBDcmVkc0ludGVyZmFjZSB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldEFsbEJhbGFuY2VzUGFyYW1zIHtcbiAgYWRkcmVzczogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0QXNzZXREZXNjcmlwdGlvblBhcmFtcyB7XG4gIGFzc2V0SUQ6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldEFzc2V0RGVzY3JpcHRpb25SZXNwb25zZSB7XG4gIG5hbWU6IHN0cmluZ1xuICBzeW1ib2w6IHN0cmluZ1xuICBhc3NldElEOiBCdWZmZXJcbiAgZGVub21pbmF0aW9uOiBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRUeFBhcmFtcyB7XG4gIHR4SUQ6IHN0cmluZ1xuICBlbmNvZGluZzogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0VHhTdGF0dXNQYXJhbXMge1xuICB0eElEOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGFydEluZGV4SW50ZXJmYWNlIHtcbiAgYWRkcmVzczogc3RyaW5nXG4gIHV0eG86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFVUWE9zUGFyYW1zIHtcbiAgYWRkcmVzc2VzOiBzdHJpbmdbXSB8IHN0cmluZ1xuICBsaW1pdDogbnVtYmVyXG4gIHNvdXJjZUNoYWluPzogc3RyaW5nXG4gIHN0YXJ0SW5kZXg/OiBTdGFydEluZGV4SW50ZXJmYWNlXG4gIGVuY29kaW5nPzogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW5kSW5kZXgge1xuICBhZGRyZXNzOiBzdHJpbmdcbiAgdXR4bzogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0VVRYT3NSZXNwb25zZSB7XG4gIG51bUZldGNoZWQ6IG51bWJlclxuICB1dHhvczogVVRYT1NldFxuICBlbmRJbmRleDogRW5kSW5kZXhcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTT3V0cHV0c1BhcmFtcyB7XG4gIGFzc2V0SUQ6IHN0cmluZ1xuICBhbW91bnQ6IHN0cmluZ1xuICB0bzogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VuZFBhcmFtcyB7XG4gIHVzZXJuYW1lOiBzdHJpbmdcbiAgcGFzc3dvcmQ6IHN0cmluZ1xuICBhc3NldElEOiBzdHJpbmcgfCBCdWZmZXJcbiAgYW1vdW50OiBzdHJpbmdcbiAgdG86IHN0cmluZ1xuICBmcm9tPzogc3RyaW5nW10gfCBCdWZmZXJbXSB8IHVuZGVmaW5lZFxuICBjaGFuZ2VBZGRyPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIG1lbW8/OiBzdHJpbmcgfCBCdWZmZXIgfCB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZW5kUmVzcG9uc2Uge1xuICB0eElEOiBzdHJpbmdcbiAgY2hhbmdlQWRkcjogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VuZE11bHRpcGxlUGFyYW1zIGV4dGVuZHMgQ3JlZHNJbnRlcmZhY2Uge1xuICBvdXRwdXRzOiBTT3V0cHV0c1BhcmFtc1tdXG4gIGZyb20/OiBzdHJpbmdbXSB8IEJ1ZmZlcltdXG4gIGNoYW5nZUFkZHI/OiBzdHJpbmdcbiAgbWVtbz86IHN0cmluZyB8IEJ1ZmZlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlbmRNdWx0aXBsZVJlc3BvbnNlIHtcbiAgdHhJRDogc3RyaW5nXG4gIGNoYW5nZUFkZHI6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJ1aWxkR2VuZXNpc1BhcmFtcyB7XG4gIGdlbmVzaXNEYXRhOiBvYmplY3Rcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRBZGRyZXNzVHhzUGFyYW1zIHtcbiAgYWRkcmVzczogc3RyaW5nXG4gIGN1cnNvcjogbnVtYmVyXG4gIHBhZ2VTaXplOiBudW1iZXJcbiAgYXNzZXRJRDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0QWRkcmVzc1R4c1Jlc3BvbnNlIHtcbiAgdHhJRHM6IHN0cmluZ1tdXG4gIGN1cnNvcjogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlTkZUQXNzZXRQYXJhbXMge1xuICB1c2VybmFtZTogc3RyaW5nXG4gIHBhc3N3b3JkOiBzdHJpbmdcbiAgZnJvbT86IHN0cmluZ1tdXG4gIGNoYW5nZUFkZHI/OiBzdHJpbmdcbiAgbmFtZTogc3RyaW5nXG4gIHN5bWJvbDogc3RyaW5nXG4gIG1pbnRlclNldDogSU1pbnRlclNldFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlbmRORlRQYXJhbXMge1xuICB1c2VybmFtZTogc3RyaW5nXG4gIHBhc3N3b3JkOiBzdHJpbmdcbiAgZnJvbT86IHN0cmluZ1tdXG4gIGNoYW5nZUFkZHI/OiBzdHJpbmdcbiAgYXNzZXRJRDogc3RyaW5nXG4gIGdyb3VwSUQ6IG51bWJlclxuICB0bzogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWludE5GVFBhcmFtcyB7XG4gIHVzZXJuYW1lOiBzdHJpbmdcbiAgcGFzc3dvcmQ6IHN0cmluZ1xuICBmcm9tPzogc3RyaW5nW11cbiAgY2hhbmdlQWRkcj86IHN0cmluZ1xuICBhc3NldElEOiBzdHJpbmdcbiAgcGF5bG9hZDogc3RyaW5nXG4gIHRvOiBzdHJpbmdcbiAgZW5jb2Rpbmc6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElNaW50ZXJTZXQge1xuICB0aHJlc2hvbGQ6IG51bWJlclxuICBtaW50ZXJzOiBzdHJpbmdbXVxufVxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPTransferInput = exports.AmountInput = exports.TransferableInput = exports.SelectInputClass = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst input_1 = require(\"../../common/input\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper [[Input]] instance.\n *\n * @param inputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Input]]-extended class.\n */\nconst SelectInputClass = (inputid, ...args) => {\n    if (inputid === constants_1.AVMConstants.SECPINPUTID ||\n        inputid === constants_1.AVMConstants.SECPINPUTID_CODECONE) {\n        return new SECPTransferInput(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.InputIdError(\"Error - SelectInputClass: unknown inputid\");\n};\nexports.SelectInputClass = SelectInputClass;\nclass TransferableInput extends input_1.StandardTransferableInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableInput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.input = (0, exports.SelectInputClass)(fields[\"input\"][\"_typeID\"]);\n        this.input.deserialize(fields[\"input\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing a [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]\n     *\n     * @returns The length of the raw [[TransferableInput]]\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.AVMConstants.ASSETIDLEN);\n        offset += 32;\n        const inputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.input = (0, exports.SelectInputClass)(inputid);\n        return this.input.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableInput = TransferableInput;\nclass AmountInput extends input_1.StandardAmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountInput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    select(id, ...args) {\n        return (0, exports.SelectInputClass)(id, ...args);\n    }\n}\nexports.AmountInput = AmountInput;\nclass SECPTransferInput extends AmountInput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferInput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.SECPINPUTID\n            : constants_1.AVMConstants.SECPINPUTID_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPTransferInput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.SECPINPUTID\n                : constants_1.AVMConstants.SECPINPUTID_CODECONE;\n    }\n    /**\n     * Returns the inputID for this input\n     */\n    getInputID() {\n        return this._typeID;\n    }\n    getCredentialID() {\n        if (this._codecID === 0) {\n            return constants_1.AVMConstants.SECPCREDENTIAL;\n        }\n        else if (this._codecID === 1) {\n            return constants_1.AVMConstants.SECPCREDENTIAL_CODECONE;\n        }\n    }\n    create(...args) {\n        return new SECPTransferInput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferInput = SECPTransferInput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-ImportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst basetx_1 = require(\"./basetx\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst cb58 = \"cb58\";\nconst buffer = \"Buffer\";\n/**\n * Class representing an unsigned Import transaction.\n */\nclass ImportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Import transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param sourceChain Optional chainid for the source inputs to import. Default platform chainid.\n     * @param importIns Array of [[TransferableInput]]s used in the transaction\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, sourceChain = undefined, importIns = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ImportTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.IMPORTTX : constants_1.AVMConstants.IMPORTTX_CODECONE;\n        this.sourceChain = buffer_1.Buffer.alloc(32);\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.importIns = [];\n        this.sourceChain = sourceChain; // do not correct, if it's wrong it'll bomb on toBuffer\n        if (typeof importIns !== \"undefined\" && Array.isArray(importIns)) {\n            for (let i = 0; i < importIns.length; i++) {\n                if (!(importIns[`${i}`] instanceof inputs_1.TransferableInput)) {\n                    throw new errors_1.TransferableInputError(`Error - ImportTx.constructor: invalid TransferableInput in array parameter ${importIns}`);\n                }\n            }\n            this.importIns = importIns;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sourceChain: serialization.encoder(this.sourceChain, encoding, buffer, cb58), importIns: this.importIns.map((i) => i.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sourceChain = serialization.decoder(fields[\"sourceChain\"], encoding, cb58, buffer, 32);\n        this.importIns = fields[\"importIns\"].map((i) => {\n            let ii = new inputs_1.TransferableInput();\n            ii.deserialize(i, encoding);\n            return ii;\n        });\n        this.numIns = buffer_1.Buffer.alloc(4);\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - ImportTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.IMPORTTX\n                : constants_1.AVMConstants.IMPORTTX_CODECONE;\n    }\n    /**\n     * Returns the id of the [[ImportTx]]\n     */\n    getTxType() {\n        return this._typeID;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the source chainid.\n     */\n    getSourceChain() {\n        return this.sourceChain;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it, populates the class, and returns the length of the [[ImportTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]\n     *\n     * @returns The length of the raw [[ImportTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.sourceChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numIns = this.numIns.readUInt32BE(0);\n        for (let i = 0; i < numIns; i++) {\n            const anIn = new inputs_1.TransferableInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.importIns.push(anIn);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].\n     */\n    toBuffer() {\n        if (typeof this.sourceChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ImportTx.toBuffer -- this.sourceChain is undefined\");\n        }\n        this.numIns.writeUInt32BE(this.importIns.length, 0);\n        let barr = [super.toBuffer(), this.sourceChain, this.numIns];\n        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());\n        for (let i = 0; i < this.importIns.length; i++) {\n            barr.push(this.importIns[`${i}`].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    /**\n     * Returns an array of [[TransferableInput]]s in this transaction.\n     */\n    getImportInputs() {\n        return this.importIns;\n    }\n    clone() {\n        let newbase = new ImportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ImportTx(...args);\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const creds = super.sign(msg, kc);\n        for (let i = 0; i < this.importIns.length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(this.importIns[`${i}`].getInput().getCredentialID());\n            const sigidxs = this.importIns[`${i}`].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[`${j}`].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            creds.push(cred);\n        }\n        return creds;\n    }\n}\nexports.ImportTx = ImportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOID = exports.NFTTransferOperation = exports.NFTMintOperation = exports.SECPMintOperation = exports.TransferableOperation = exports.Operation = exports.SelectOperationClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Operations\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst nbytes_1 = require(\"../../common/nbytes\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst output_1 = require(\"../../common/output\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst cb58 = \"cb58\";\nconst buffer = \"Buffer\";\nconst hex = \"hex\";\nconst decimalString = \"decimalString\";\n/**\n * Takes a buffer representing the output and returns the proper [[Operation]] instance.\n *\n * @param opid A number representing the operation ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Operation]]-extended class.\n */\nconst SelectOperationClass = (opid, ...args) => {\n    if (opid === constants_1.AVMConstants.SECPMINTOPID ||\n        opid === constants_1.AVMConstants.SECPMINTOPID_CODECONE) {\n        return new SECPMintOperation(...args);\n    }\n    else if (opid === constants_1.AVMConstants.NFTMINTOPID ||\n        opid === constants_1.AVMConstants.NFTMINTOPID_CODECONE) {\n        return new NFTMintOperation(...args);\n    }\n    else if (opid === constants_1.AVMConstants.NFTXFEROPID ||\n        opid === constants_1.AVMConstants.NFTXFEROPID_CODECONE) {\n        return new NFTTransferOperation(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.InvalidOperationIdError(`Error - SelectOperationClass: unknown opid ${opid}`);\n};\nexports.SelectOperationClass = SelectOperationClass;\n/**\n * A class representing an operation. All operation types must extend on this class.\n */\nclass Operation extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"Operation\";\n        this._typeID = undefined;\n        this.sigCount = buffer_1.Buffer.alloc(4);\n        this.sigIdxs = []; // idxs of signers from utxo\n        /**\n         * Returns the array of [[SigIdx]] for this [[Operation]]\n         */\n        this.getSigIdxs = () => this.sigIdxs;\n        /**\n         * Creates and adds a [[SigIdx]] to the [[Operation]].\n         *\n         * @param addressIdx The index of the address to reference in the signatures\n         * @param address The address of the source of the signature\n         */\n        this.addSignatureIdx = (addressIdx, address) => {\n            const sigidx = new credentials_1.SigIdx();\n            const b = buffer_1.Buffer.alloc(4);\n            b.writeUInt32BE(addressIdx, 0);\n            sigidx.fromBuffer(b);\n            sigidx.setSource(address);\n            this.sigIdxs.push(sigidx);\n            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        };\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { sigIdxs: this.sigIdxs.map((s) => s.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.sigIdxs = fields[\"sigIdxs\"].map((s) => {\n            let sidx = new credentials_1.SigIdx();\n            sidx.deserialize(s, encoding);\n            return sidx;\n        });\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.sigCount = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const sigCount = this.sigCount.readUInt32BE(0);\n        this.sigIdxs = [];\n        for (let i = 0; i < sigCount; i++) {\n            const sigidx = new credentials_1.SigIdx();\n            const sigbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            sigidx.fromBuffer(sigbuff);\n            offset += 4;\n            this.sigIdxs.push(sigidx);\n        }\n        return offset;\n    }\n    toBuffer() {\n        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);\n        let bsize = this.sigCount.length;\n        const barr = [this.sigCount];\n        for (let i = 0; i < this.sigIdxs.length; i++) {\n            const b = this.sigIdxs[`${i}`].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[NFTMintOperation]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.Operation = Operation;\nOperation.comparator = () => (a, b) => {\n    const aoutid = buffer_1.Buffer.alloc(4);\n    aoutid.writeUInt32BE(a.getOperationID(), 0);\n    const abuff = a.toBuffer();\n    const boutid = buffer_1.Buffer.alloc(4);\n    boutid.writeUInt32BE(b.getOperationID(), 0);\n    const bbuff = b.toBuffer();\n    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);\n    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);\n    return buffer_1.Buffer.compare(asort, bsort);\n};\n/**\n * A class which contains an [[Operation]] for transfers.\n *\n */\nclass TransferableOperation extends serialization_1.Serializable {\n    constructor(assetID = undefined, utxoids = undefined, operation = undefined) {\n        super();\n        this._typeName = \"TransferableOperation\";\n        this._typeID = undefined;\n        this.assetID = buffer_1.Buffer.alloc(32);\n        this.utxoIDs = [];\n        /**\n         * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.\n         */\n        this.getAssetID = () => this.assetID;\n        /**\n         * Returns an array of UTXOIDs in this operation.\n         */\n        this.getUTXOIDs = () => this.utxoIDs;\n        /**\n         * Returns the operation\n         */\n        this.getOperation = () => this.operation;\n        if (typeof assetID !== \"undefined\" &&\n            assetID.length === constants_1.AVMConstants.ASSETIDLEN &&\n            operation instanceof Operation &&\n            typeof utxoids !== \"undefined\" &&\n            Array.isArray(utxoids)) {\n            this.assetID = assetID;\n            this.operation = operation;\n            for (let i = 0; i < utxoids.length; i++) {\n                const utxoid = new UTXOID();\n                if (typeof utxoids[`${i}`] === \"string\") {\n                    utxoid.fromString(utxoids[`${i}`]);\n                }\n                else if (utxoids[`${i}`] instanceof buffer_1.Buffer) {\n                    utxoid.fromBuffer(utxoids[`${i}`]);\n                }\n                else if (utxoids[`${i}`] instanceof UTXOID) {\n                    utxoid.fromString(utxoids[`${i}`].toString()); // clone\n                }\n                this.utxoIDs.push(utxoid);\n            }\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { assetID: serialization.encoder(this.assetID, encoding, buffer, cb58, 32), utxoIDs: this.utxoIDs.map((u) => u.serialize(encoding)), operation: this.operation.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.assetID = serialization.decoder(fields[\"assetID\"], encoding, cb58, buffer, 32);\n        this.utxoIDs = fields[\"utxoIDs\"].map((u) => {\n            let utxoid = new UTXOID();\n            utxoid.deserialize(u, encoding);\n            return utxoid;\n        });\n        this.operation = (0, exports.SelectOperationClass)(fields[\"operation\"][\"_typeID\"]);\n        this.operation.deserialize(fields[\"operation\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const numutxoIDs = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.utxoIDs = [];\n        for (let i = 0; i < numutxoIDs; i++) {\n            const utxoid = new UTXOID();\n            offset = utxoid.fromBuffer(bytes, offset);\n            this.utxoIDs.push(utxoid);\n        }\n        const opid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.operation = (0, exports.SelectOperationClass)(opid);\n        return this.operation.fromBuffer(bytes, offset);\n    }\n    toBuffer() {\n        const numutxoIDs = buffer_1.Buffer.alloc(4);\n        numutxoIDs.writeUInt32BE(this.utxoIDs.length, 0);\n        let bsize = this.assetID.length + numutxoIDs.length;\n        const barr = [this.assetID, numutxoIDs];\n        this.utxoIDs = this.utxoIDs.sort(UTXOID.comparator());\n        for (let i = 0; i < this.utxoIDs.length; i++) {\n            const b = this.utxoIDs[`${i}`].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        const opid = buffer_1.Buffer.alloc(4);\n        opid.writeUInt32BE(this.operation.getOperationID(), 0);\n        barr.push(opid);\n        bsize += opid.length;\n        const b = this.operation.toBuffer();\n        bsize += b.length;\n        barr.push(b);\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.TransferableOperation = TransferableOperation;\n/**\n * Returns a function used to sort an array of [[TransferableOperation]]s\n */\nTransferableOperation.comparator = () => {\n    return function (a, b) {\n        return buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n    };\n};\n/**\n * An [[Operation]] class which specifies a SECP256k1 Mint Op.\n */\nclass SECPMintOperation extends Operation {\n    /**\n     * An [[Operation]] class which mints new tokens on an assetID.\n     *\n     * @param mintOutput The [[SECPMintOutput]] that will be produced by this transaction.\n     * @param transferOutput A [[SECPTransferOutput]] that will be produced from this minting operation.\n     */\n    constructor(mintOutput = undefined, transferOutput = undefined) {\n        super();\n        this._typeName = \"SECPMintOperation\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.SECPMINTOPID\n            : constants_1.AVMConstants.SECPMINTOPID_CODECONE;\n        this.mintOutput = undefined;\n        this.transferOutput = undefined;\n        if (typeof mintOutput !== \"undefined\") {\n            this.mintOutput = mintOutput;\n        }\n        if (typeof transferOutput !== \"undefined\") {\n            this.transferOutput = transferOutput;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { mintOutput: this.mintOutput.serialize(encoding), transferOutputs: this.transferOutput.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.mintOutput = new outputs_1.SECPMintOutput();\n        this.mintOutput.deserialize(fields[\"mintOutput\"], encoding);\n        this.transferOutput = new outputs_1.SECPTransferOutput();\n        this.transferOutput.deserialize(fields[\"transferOutputs\"], encoding);\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPMintOperation.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.SECPMINTOPID\n                : constants_1.AVMConstants.SECPMINTOPID_CODECONE;\n    }\n    /**\n     * Returns the operation ID.\n     */\n    getOperationID() {\n        return this._typeID;\n    }\n    /**\n     * Returns the credential ID.\n     */\n    getCredentialID() {\n        if (this._codecID === 0) {\n            return constants_1.AVMConstants.SECPCREDENTIAL;\n        }\n        else if (this._codecID === 1) {\n            return constants_1.AVMConstants.SECPCREDENTIAL_CODECONE;\n        }\n    }\n    /**\n     * Returns the [[SECPMintOutput]] to be produced by this operation.\n     */\n    getMintOutput() {\n        return this.mintOutput;\n    }\n    /**\n     * Returns [[SECPTransferOutput]] to be produced by this operation.\n     */\n    getTransferOutput() {\n        return this.transferOutput;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[SECPMintOperation]] and returns the updated offset.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.mintOutput = new outputs_1.SECPMintOutput();\n        offset = this.mintOutput.fromBuffer(bytes, offset);\n        this.transferOutput = new outputs_1.SECPTransferOutput();\n        offset = this.transferOutput.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[SECPMintOperation]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const mintoutBuff = this.mintOutput.toBuffer();\n        const transferOutBuff = this.transferOutput.toBuffer();\n        const bsize = superbuff.length + mintoutBuff.length + transferOutBuff.length;\n        const barr = [superbuff, mintoutBuff, transferOutBuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.SECPMintOperation = SECPMintOperation;\n/**\n * An [[Operation]] class which specifies a NFT Mint Op.\n */\nclass NFTMintOperation extends Operation {\n    /**\n     * An [[Operation]] class which contains an NFT on an assetID.\n     *\n     * @param groupID The group to which to issue the NFT Output\n     * @param payload A {@link https://github.com/feross/buffer|Buffer} of the NFT payload\n     * @param outputOwners An array of outputOwners\n     */\n    constructor(groupID = undefined, payload = undefined, outputOwners = undefined) {\n        super();\n        this._typeName = \"NFTMintOperation\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.NFTMINTOPID\n            : constants_1.AVMConstants.NFTMINTOPID_CODECONE;\n        this.groupID = buffer_1.Buffer.alloc(4);\n        this.outputOwners = [];\n        /**\n         * Returns the credential ID.\n         */\n        this.getCredentialID = () => {\n            if (this._codecID === 0) {\n                return constants_1.AVMConstants.NFTCREDENTIAL;\n            }\n            else if (this._codecID === 1) {\n                return constants_1.AVMConstants.NFTCREDENTIAL_CODECONE;\n            }\n        };\n        /**\n         * Returns the payload.\n         */\n        this.getGroupID = () => {\n            return bintools.copyFrom(this.groupID, 0);\n        };\n        /**\n         * Returns the payload.\n         */\n        this.getPayload = () => {\n            return bintools.copyFrom(this.payload, 0);\n        };\n        /**\n         * Returns the payload's raw {@link https://github.com/feross/buffer|Buffer} with length prepended, for use with [[PayloadBase]]'s fromBuffer\n         */\n        this.getPayloadBuffer = () => {\n            let payloadlen = buffer_1.Buffer.alloc(4);\n            payloadlen.writeUInt32BE(this.payload.length, 0);\n            return buffer_1.Buffer.concat([payloadlen, bintools.copyFrom(this.payload, 0)]);\n        };\n        /**\n         * Returns the outputOwners.\n         */\n        this.getOutputOwners = () => {\n            return this.outputOwners;\n        };\n        if (typeof groupID !== \"undefined\" &&\n            typeof payload !== \"undefined\" &&\n            outputOwners.length) {\n            this.groupID.writeUInt32BE(groupID ? groupID : 0, 0);\n            this.payload = payload;\n            this.outputOwners = outputOwners;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { groupID: serialization.encoder(this.groupID, encoding, buffer, decimalString, 4), payload: serialization.encoder(this.payload, encoding, buffer, hex), outputOwners: this.outputOwners.map((o) => o.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.groupID = serialization.decoder(fields[\"groupID\"], encoding, decimalString, buffer, 4);\n        this.payload = serialization.decoder(fields[\"payload\"], encoding, hex, buffer);\n        // this.outputOwners = fields[\"outputOwners\"].map((o: NFTMintOutput) => {\n        //   let oo: NFTMintOutput = new NFTMintOutput()\n        //   oo.deserialize(o, encoding)\n        //   return oo\n        // })\n        this.outputOwners = fields[\"outputOwners\"].map((o) => {\n            let oo = new output_1.OutputOwners();\n            oo.deserialize(o, encoding);\n            return oo;\n        });\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTMintOperation.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.NFTMINTOPID\n                : constants_1.AVMConstants.NFTMINTOPID_CODECONE;\n    }\n    /**\n     * Returns the operation ID.\n     */\n    getOperationID() {\n        return this._typeID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOperation]] and returns the updated offset.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.groupID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        let payloadLen = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.payload = bintools.copyFrom(bytes, offset, offset + payloadLen);\n        offset += payloadLen;\n        let numoutputs = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.outputOwners = [];\n        for (let i = 0; i < numoutputs; i++) {\n            let outputOwner = new output_1.OutputOwners();\n            offset = outputOwner.fromBuffer(bytes, offset);\n            this.outputOwners.push(outputOwner);\n        }\n        return offset;\n    }\n    /**\n     * Returns the buffer representing the [[NFTMintOperation]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const payloadlen = buffer_1.Buffer.alloc(4);\n        payloadlen.writeUInt32BE(this.payload.length, 0);\n        const outputownerslen = buffer_1.Buffer.alloc(4);\n        outputownerslen.writeUInt32BE(this.outputOwners.length, 0);\n        let bsize = superbuff.length +\n            this.groupID.length +\n            payloadlen.length +\n            this.payload.length +\n            outputownerslen.length;\n        const barr = [\n            superbuff,\n            this.groupID,\n            payloadlen,\n            this.payload,\n            outputownerslen\n        ];\n        for (let i = 0; i < this.outputOwners.length; i++) {\n            let b = this.outputOwners[`${i}`].toBuffer();\n            barr.push(b);\n            bsize += b.length;\n        }\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[NFTMintOperation]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NFTMintOperation = NFTMintOperation;\n/**\n * A [[Operation]] class which specifies a NFT Transfer Op.\n */\nclass NFTTransferOperation extends Operation {\n    /**\n     * An [[Operation]] class which contains an NFT on an assetID.\n     *\n     * @param output An [[NFTTransferOutput]]\n     */\n    constructor(output = undefined) {\n        super();\n        this._typeName = \"NFTTransferOperation\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.NFTXFEROPID\n            : constants_1.AVMConstants.NFTXFEROPID_CODECONE;\n        this.getOutput = () => this.output;\n        if (typeof output !== \"undefined\") {\n            this.output = output;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { output: this.output.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = new outputs_1.NFTTransferOutput();\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTTransferOperation.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.NFTXFEROPID\n                : constants_1.AVMConstants.NFTXFEROPID_CODECONE;\n    }\n    /**\n     * Returns the operation ID.\n     */\n    getOperationID() {\n        return this._typeID;\n    }\n    /**\n     * Returns the credential ID.\n     */\n    getCredentialID() {\n        if (this._codecID === 0) {\n            return constants_1.AVMConstants.NFTCREDENTIAL;\n        }\n        else if (this._codecID === 1) {\n            return constants_1.AVMConstants.NFTCREDENTIAL_CODECONE;\n        }\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOperation]] and returns the updated offset.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.output = new outputs_1.NFTTransferOutput();\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Returns the buffer representing the [[NFTTransferOperation]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const outbuff = this.output.toBuffer();\n        const bsize = superbuff.length + outbuff.length;\n        const barr = [superbuff, outbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Returns a base-58 string representing the [[NFTTransferOperation]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n}\nexports.NFTTransferOperation = NFTTransferOperation;\n/**\n * Class for representing a UTXOID used in [[TransferableOp]] types\n */\nclass UTXOID extends nbytes_1.NBytes {\n    /**\n     * Class for representing a UTXOID used in [[TransferableOp]] types\n     */\n    constructor() {\n        super();\n        this._typeName = \"UTXOID\";\n        this._typeID = undefined;\n        //serialize and deserialize both are inherited\n        this.bytes = buffer_1.Buffer.alloc(36);\n        this.bsize = 36;\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXOID]].\n     */\n    toString() {\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    /**\n     * Takes a base-58 string containing an [[UTXOID]], parses it, populates the class, and returns the length of the UTXOID in bytes.\n     *\n     * @param bytes A base-58 string containing a raw [[UTXOID]]\n     *\n     * @returns The length of the raw [[UTXOID]]\n     */\n    fromString(utxoid) {\n        const utxoidbuff = bintools.b58ToBuffer(utxoid);\n        if (utxoidbuff.length === 40 && bintools.validateChecksum(utxoidbuff)) {\n            const newbuff = bintools.copyFrom(utxoidbuff, 0, utxoidbuff.length - 4);\n            if (newbuff.length === 36) {\n                this.bytes = newbuff;\n            }\n        }\n        else if (utxoidbuff.length === 40) {\n            throw new errors_1.ChecksumError(\"Error - UTXOID.fromString: invalid checksum on address\");\n        }\n        else if (utxoidbuff.length === 36) {\n            this.bytes = utxoidbuff;\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.AddressError(\"Error - UTXOID.fromString: invalid address\");\n        }\n        return this.getSize();\n    }\n    clone() {\n        const newbase = new UTXOID();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new UTXOID();\n    }\n}\nexports.UTXOID = UTXOID;\n/**\n * Returns a function used to sort an array of [[UTXOID]]s\n */\nUTXOID.comparator = () => (a, b) => buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-Credentials\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SECPCredential = exports.SelectCredentialClass = void 0;\nconst constants_1 = require(\"./constants\");\nconst credentials_1 = require(\"../../common/credentials\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * Takes a buffer representing the credential and returns the proper [[Credential]] instance.\n *\n * @param credid A number representing the credential ID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Credential]]-extended class.\n */\nconst SelectCredentialClass = (credid, ...args) => {\n    if (credid === constants_1.EVMConstants.SECPCREDENTIAL) {\n        return new SECPCredential(...args);\n    }\n    /* istanbul ignore next */\n    throw new errors_1.CredIdError(\"Error - SelectCredentialClass: unknown credid\");\n};\nexports.SelectCredentialClass = SelectCredentialClass;\nclass SECPCredential extends credentials_1.Credential {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPCredential\";\n        this._typeID = constants_1.EVMConstants.SECPCREDENTIAL;\n    }\n    //serialize and deserialize both are inherited\n    getCredentialID() {\n        return this._typeID;\n    }\n    clone() {\n        let newbase = new SECPCredential();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new SECPCredential(...args);\n    }\n    select(id, ...args) {\n        let credential = (0, exports.SelectCredentialClass)(id, ...args);\n        return credential;\n    }\n}\nexports.SECPCredential = SECPCredential;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9ldm0vY3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgsMkNBQTBDO0FBQzFDLDBEQUFxRDtBQUNyRCwrQ0FBZ0Q7QUFFaEQ7Ozs7OztHQU1HO0FBQ0ksTUFBTSxxQkFBcUIsR0FBRyxDQUNuQyxNQUFjLEVBQ2QsR0FBRyxJQUFXLEVBQ0YsRUFBRTtJQUNkLElBQUksTUFBTSxLQUFLLHdCQUFZLENBQUMsY0FBYyxFQUFFO1FBQzFDLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQTtLQUNuQztJQUNELDBCQUEwQjtJQUMxQixNQUFNLElBQUksb0JBQVcsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFBO0FBQ3hFLENBQUMsQ0FBQTtBQVRZLFFBQUEscUJBQXFCLHlCQVNqQztBQUVELE1BQWEsY0FBZSxTQUFRLHdCQUFVO0lBQTlDOztRQUNZLGNBQVMsR0FBVyxnQkFBZ0IsQ0FBQTtRQUNwQyxZQUFPLEdBQVcsd0JBQVksQ0FBQyxjQUFjLENBQUE7SUFzQnpELENBQUM7SUFwQkMsOENBQThDO0lBRTlDLGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7SUFDckIsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLE9BQU8sR0FBbUIsSUFBSSxjQUFjLEVBQUUsQ0FBQTtRQUNsRCxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQ25DLE9BQU8sT0FBZSxDQUFBO0lBQ3hCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxJQUFXO1FBQ25CLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQVMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQVUsRUFBRSxHQUFHLElBQVc7UUFDL0IsSUFBSSxVQUFVLEdBQWUsSUFBQSw2QkFBcUIsRUFBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUMvRCxPQUFPLFVBQVUsQ0FBQTtJQUNuQixDQUFDO0NBQ0Y7QUF4QkQsd0NBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUVWTS1DcmVkZW50aWFsc1xuICovXG5cbmltcG9ydCB7IEVWTUNvbnN0YW50cyB9IGZyb20gXCIuL2NvbnN0YW50c1wiXG5pbXBvcnQgeyBDcmVkZW50aWFsIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jcmVkZW50aWFsc1wiXG5pbXBvcnQgeyBDcmVkSWRFcnJvciB9IGZyb20gXCIuLi8uLi91dGlscy9lcnJvcnNcIlxuXG4vKipcbiAqIFRha2VzIGEgYnVmZmVyIHJlcHJlc2VudGluZyB0aGUgY3JlZGVudGlhbCBhbmQgcmV0dXJucyB0aGUgcHJvcGVyIFtbQ3JlZGVudGlhbF1dIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBjcmVkaWQgQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBjcmVkZW50aWFsIElEIHBhcnNlZCBwcmlvciB0byB0aGUgYnl0ZXMgcGFzc2VkIGluXG4gKlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYW4gW1tDcmVkZW50aWFsXV0tZXh0ZW5kZWQgY2xhc3MuXG4gKi9cbmV4cG9ydCBjb25zdCBTZWxlY3RDcmVkZW50aWFsQ2xhc3MgPSAoXG4gIGNyZWRpZDogbnVtYmVyLFxuICAuLi5hcmdzOiBhbnlbXVxuKTogQ3JlZGVudGlhbCA9PiB7XG4gIGlmIChjcmVkaWQgPT09IEVWTUNvbnN0YW50cy5TRUNQQ1JFREVOVElBTCkge1xuICAgIHJldHVybiBuZXcgU0VDUENyZWRlbnRpYWwoLi4uYXJncylcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB0aHJvdyBuZXcgQ3JlZElkRXJyb3IoXCJFcnJvciAtIFNlbGVjdENyZWRlbnRpYWxDbGFzczogdW5rbm93biBjcmVkaWRcIilcbn1cblxuZXhwb3J0IGNsYXNzIFNFQ1BDcmVkZW50aWFsIGV4dGVuZHMgQ3JlZGVudGlhbCB7XG4gIHByb3RlY3RlZCBfdHlwZU5hbWU6IHN0cmluZyA9IFwiU0VDUENyZWRlbnRpYWxcIlxuICBwcm90ZWN0ZWQgX3R5cGVJRDogbnVtYmVyID0gRVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMXG5cbiAgLy9zZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIGJvdGggYXJlIGluaGVyaXRlZFxuXG4gIGdldENyZWRlbnRpYWxJRCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl90eXBlSURcbiAgfVxuXG4gIGNsb25lKCk6IHRoaXMge1xuICAgIGxldCBuZXdiYXNlOiBTRUNQQ3JlZGVudGlhbCA9IG5ldyBTRUNQQ3JlZGVudGlhbCgpXG4gICAgbmV3YmFzZS5mcm9tQnVmZmVyKHRoaXMudG9CdWZmZXIoKSlcbiAgICByZXR1cm4gbmV3YmFzZSBhcyB0aGlzXG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczogYW55W10pOiB0aGlzIHtcbiAgICByZXR1cm4gbmV3IFNFQ1BDcmVkZW50aWFsKC4uLmFyZ3MpIGFzIHRoaXNcbiAgfVxuXG4gIHNlbGVjdChpZDogbnVtYmVyLCAuLi5hcmdzOiBhbnlbXSk6IENyZWRlbnRpYWwge1xuICAgIGxldCBjcmVkZW50aWFsOiBDcmVkZW50aWFsID0gU2VsZWN0Q3JlZGVudGlhbENsYXNzKGlkLCAuLi5hcmdzKVxuICAgIHJldHVybiBjcmVkZW50aWFsXG4gIH1cbn1cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateAssetTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-CreateAssetTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst initialstates_1 = require(\"./initialstates\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst utf8 = \"utf8\";\nconst decimalString = \"decimalString\";\nconst buffer = \"Buffer\";\nclass CreateAssetTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Create Asset transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param name String for the descriptive name of the asset\n     * @param symbol String for the ticker symbol of the asset\n     * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 DJTX = 10^9 $nDJTX\n     * @param initialState Optional [[InitialStates]] that represent the intial state of a created asset\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, name = undefined, symbol = undefined, denomination = undefined, initialState = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"CreateAssetTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.CREATEASSETTX\n            : constants_1.AVMConstants.CREATEASSETTX_CODECONE;\n        this.name = \"\";\n        this.symbol = \"\";\n        this.denomination = buffer_1.Buffer.alloc(1);\n        this.initialState = new initialstates_1.InitialStates();\n        if (typeof name === \"string\" &&\n            typeof symbol === \"string\" &&\n            typeof denomination === \"number\" &&\n            denomination >= 0 &&\n            denomination <= 32 &&\n            typeof initialState !== \"undefined\") {\n            this.initialState = initialState;\n            this.name = name;\n            this.symbol = symbol;\n            this.denomination.writeUInt8(denomination, 0);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { name: serialization.encoder(this.name, encoding, utf8, utf8), symbol: serialization.encoder(this.symbol, encoding, utf8, utf8), denomination: serialization.encoder(this.denomination, encoding, buffer, decimalString, 1), initialState: this.initialState.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.name = serialization.decoder(fields[\"name\"], encoding, utf8, utf8);\n        this.symbol = serialization.decoder(fields[\"symbol\"], encoding, utf8, utf8);\n        this.denomination = serialization.decoder(fields[\"denomination\"], encoding, decimalString, buffer, 1);\n        this.initialState = new initialstates_1.InitialStates();\n        this.initialState.deserialize(fields[\"initialState\"], encoding);\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - CreateAssetTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.CREATEASSETTX\n                : constants_1.AVMConstants.CREATEASSETTX_CODECONE;\n    }\n    /**\n     * Returns the id of the [[CreateAssetTx]]\n     */\n    getTxType() {\n        return this._typeID;\n    }\n    /**\n     * Returns the array of array of [[Output]]s for the initial state\n     */\n    getInitialStates() {\n        return this.initialState;\n    }\n    /**\n     * Returns the string representation of the name\n     */\n    getName() {\n        return this.name;\n    }\n    /**\n     * Returns the string representation of the symbol\n     */\n    getSymbol() {\n        return this.symbol;\n    }\n    /**\n     * Returns the numeric representation of the denomination\n     */\n    getDenomination() {\n        return this.denomination.readUInt8(0);\n    }\n    /**\n     * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the denomination\n     */\n    getDenominationBuffer() {\n        return this.denomination;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[CreateAssetTx]], parses it, populates the class, and returns the length of the [[CreateAssetTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[CreateAssetTx]]\n     *\n     * @returns The length of the raw [[CreateAssetTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        const namesize = bintools\n            .copyFrom(bytes, offset, offset + 2)\n            .readUInt16BE(0);\n        offset += 2;\n        this.name = bintools\n            .copyFrom(bytes, offset, offset + namesize)\n            .toString(\"utf8\");\n        offset += namesize;\n        const symsize = bintools\n            .copyFrom(bytes, offset, offset + 2)\n            .readUInt16BE(0);\n        offset += 2;\n        this.symbol = bintools\n            .copyFrom(bytes, offset, offset + symsize)\n            .toString(\"utf8\");\n        offset += symsize;\n        this.denomination = bintools.copyFrom(bytes, offset, offset + 1);\n        offset += 1;\n        const inits = new initialstates_1.InitialStates();\n        offset = inits.fromBuffer(bytes, offset);\n        this.initialState = inits;\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateAssetTx]].\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const initstatebuff = this.initialState.toBuffer();\n        const namebuff = buffer_1.Buffer.alloc(this.name.length);\n        namebuff.write(this.name, 0, this.name.length, utf8);\n        const namesize = buffer_1.Buffer.alloc(2);\n        namesize.writeUInt16BE(this.name.length, 0);\n        const symbuff = buffer_1.Buffer.alloc(this.symbol.length);\n        symbuff.write(this.symbol, 0, this.symbol.length, utf8);\n        const symsize = buffer_1.Buffer.alloc(2);\n        symsize.writeUInt16BE(this.symbol.length, 0);\n        const bsize = superbuff.length +\n            namesize.length +\n            namebuff.length +\n            symsize.length +\n            symbuff.length +\n            this.denomination.length +\n            initstatebuff.length;\n        const barr = [\n            superbuff,\n            namesize,\n            namebuff,\n            symsize,\n            symbuff,\n            this.denomination,\n            initstatebuff\n        ];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    clone() {\n        let newbase = new CreateAssetTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new CreateAssetTx(...args);\n    }\n}\nexports.CreateAssetTx = CreateAssetTx;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\nconst Reporter = require('../base/reporter').Reporter;\nconst Buffer = require('safer-buffer').Buffer;\n\nfunction DecoderBuffer(base, options) {\n  Reporter.call(this, options);\n  if (!Buffer.isBuffer(base)) {\n    this.error('Input not Buffer');\n    return;\n  }\n\n  this.base = base;\n  this.offset = 0;\n  this.length = base.length;\n}\ninherits(DecoderBuffer, Reporter);\nexports.DecoderBuffer = DecoderBuffer;\n\nDecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {\n  if (data instanceof DecoderBuffer) {\n    return true;\n  }\n\n  // Or accept compatible API\n  const isCompatible = typeof data === 'object' &&\n    Buffer.isBuffer(data.base) &&\n    data.constructor.name === 'DecoderBuffer' &&\n    typeof data.offset === 'number' &&\n    typeof data.length === 'number' &&\n    typeof data.save === 'function' &&\n    typeof data.restore === 'function' &&\n    typeof data.isEmpty === 'function' &&\n    typeof data.readUInt8 === 'function' &&\n    typeof data.skip === 'function' &&\n    typeof data.raw === 'function';\n\n  return isCompatible;\n};\n\nDecoderBuffer.prototype.save = function save() {\n  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };\n};\n\nDecoderBuffer.prototype.restore = function restore(save) {\n  // Return skipped data\n  const res = new DecoderBuffer(this.base);\n  res.offset = save.offset;\n  res.length = this.offset;\n\n  this.offset = save.offset;\n  Reporter.prototype.restore.call(this, save.reporter);\n\n  return res;\n};\n\nDecoderBuffer.prototype.isEmpty = function isEmpty() {\n  return this.offset === this.length;\n};\n\nDecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {\n  if (this.offset + 1 <= this.length)\n    return this.base.readUInt8(this.offset++, true);\n  else\n    return this.error(fail || 'DecoderBuffer overrun');\n};\n\nDecoderBuffer.prototype.skip = function skip(bytes, fail) {\n  if (!(this.offset + bytes <= this.length))\n    return this.error(fail || 'DecoderBuffer overrun');\n\n  const res = new DecoderBuffer(this.base);\n\n  // Share reporter state\n  res._reporterState = this._reporterState;\n\n  res.offset = this.offset;\n  res.length = this.offset + bytes;\n  this.offset += bytes;\n  return res;\n};\n\nDecoderBuffer.prototype.raw = function raw(save) {\n  return this.base.slice(save ? save.offset : this.offset, this.length);\n};\n\nfunction EncoderBuffer(value, reporter) {\n  if (Array.isArray(value)) {\n    this.length = 0;\n    this.value = value.map(function(item) {\n      if (!EncoderBuffer.isEncoderBuffer(item))\n        item = new EncoderBuffer(item, reporter);\n      this.length += item.length;\n      return item;\n    }, this);\n  } else if (typeof value === 'number') {\n    if (!(0 <= value && value <= 0xff))\n      return reporter.error('non-byte EncoderBuffer value');\n    this.value = value;\n    this.length = 1;\n  } else if (typeof value === 'string') {\n    this.value = value;\n    this.length = Buffer.byteLength(value);\n  } else if (Buffer.isBuffer(value)) {\n    this.value = value;\n    this.length = value.length;\n  } else {\n    return reporter.error('Unsupported type: ' + typeof value);\n  }\n}\nexports.EncoderBuffer = EncoderBuffer;\n\nEncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {\n  if (data instanceof EncoderBuffer) {\n    return true;\n  }\n\n  // Or accept compatible API\n  const isCompatible = typeof data === 'object' &&\n    data.constructor.name === 'EncoderBuffer' &&\n    typeof data.length === 'number' &&\n    typeof data.join === 'function';\n\n  return isCompatible;\n};\n\nEncoderBuffer.prototype.join = function join(out, offset) {\n  if (!out)\n    out = Buffer.alloc(this.length);\n  if (!offset)\n    offset = 0;\n\n  if (this.length === 0)\n    return out;\n\n  if (Array.isArray(this.value)) {\n    this.value.forEach(function(item) {\n      item.join(out, offset);\n      offset += item.length;\n    });\n  } else {\n    if (typeof this.value === 'number')\n      out[offset] = this.value;\n    else if (typeof this.value === 'string')\n      out.write(this.value, offset);\n    else if (Buffer.isBuffer(this.value))\n      this.value.copy(out, offset);\n    offset += this.length;\n  }\n\n  return out;\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GenesisAsset = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-GenesisAsset\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst initialstates_1 = require(\"./initialstates\");\nconst constants_1 = require(\"../../utils/constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst createassettx_1 = require(\"./createassettx\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * @ignore\n */\nconst serialization = serialization_1.Serialization.getInstance();\nconst bintools = bintools_1.default.getInstance();\nconst utf8 = \"utf8\";\nconst buffer = \"Buffer\";\nconst decimalString = \"decimalString\";\nclass GenesisAsset extends createassettx_1.CreateAssetTx {\n    /**\n     * Class representing a GenesisAsset\n     *\n     * @param assetAlias Optional String for the asset alias\n     * @param name Optional String for the descriptive name of the asset\n     * @param symbol Optional String for the ticker symbol of the asset\n     * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 DJTX = 10^9 $nDJTX\n     * @param initialState Optional [[InitialStates]] that represent the intial state of a created asset\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(assetAlias = undefined, name = undefined, symbol = undefined, denomination = undefined, initialState = undefined, memo = undefined) {\n        super(constants_1.DefaultNetworkID, buffer_1.Buffer.alloc(32), [], [], memo);\n        this._typeName = \"GenesisAsset\";\n        this._codecID = undefined;\n        this._typeID = undefined;\n        this.assetAlias = \"\";\n        /**\n         * Returns the string representation of the assetAlias\n         */\n        this.getAssetAlias = () => this.assetAlias;\n        if (typeof assetAlias === \"string\" &&\n            typeof name === \"string\" &&\n            typeof symbol === \"string\" &&\n            typeof denomination === \"number\" &&\n            denomination >= 0 &&\n            denomination <= 32 &&\n            typeof initialState !== \"undefined\") {\n            this.assetAlias = assetAlias;\n            this.name = name;\n            this.symbol = symbol;\n            this.denomination.writeUInt8(denomination, 0);\n            this.initialState = initialState;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        delete fields[\"blockchainID\"];\n        delete fields[\"outs\"];\n        delete fields[\"ins\"];\n        return Object.assign(Object.assign({}, fields), { assetAlias: serialization.encoder(this.assetAlias, encoding, utf8, utf8), name: serialization.encoder(this.name, encoding, utf8, utf8), symbol: serialization.encoder(this.symbol, encoding, utf8, utf8), denomination: serialization.encoder(this.denomination, encoding, buffer, decimalString, 1), initialState: this.initialState.serialize(encoding) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        fields[\"blockchainID\"] = buffer_1.Buffer.alloc(32, 16).toString(\"hex\");\n        fields[\"outs\"] = [];\n        fields[\"ins\"] = [];\n        super.deserialize(fields, encoding);\n        this.assetAlias = serialization.decoder(fields[\"assetAlias\"], encoding, utf8, utf8);\n        this.name = serialization.decoder(fields[\"name\"], encoding, utf8, utf8);\n        this.symbol = serialization.decoder(fields[\"symbol\"], encoding, utf8, utf8);\n        this.denomination = serialization.decoder(fields[\"denomination\"], encoding, decimalString, buffer, 1);\n        this.initialState = new initialstates_1.InitialStates();\n        this.initialState.deserialize(fields[\"initialState\"], encoding);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[GenesisAsset]], parses it, populates the class, and returns the length of the [[GenesisAsset]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[GenesisAsset]]\n     *\n     * @returns The length of the raw [[GenesisAsset]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        const assetAliasSize = bintools\n            .copyFrom(bytes, offset, offset + 2)\n            .readUInt16BE(0);\n        offset += 2;\n        this.assetAlias = bintools\n            .copyFrom(bytes, offset, offset + assetAliasSize)\n            .toString(\"utf8\");\n        offset += assetAliasSize;\n        offset += super.fromBuffer(bytes, offset);\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[GenesisAsset]].\n     */\n    toBuffer(networkID = constants_1.DefaultNetworkID) {\n        // asset alias\n        const assetAlias = this.getAssetAlias();\n        const assetAliasbuffSize = buffer_1.Buffer.alloc(2);\n        assetAliasbuffSize.writeUInt16BE(assetAlias.length, 0);\n        let bsize = assetAliasbuffSize.length;\n        let barr = [assetAliasbuffSize];\n        const assetAliasbuff = buffer_1.Buffer.alloc(assetAlias.length);\n        assetAliasbuff.write(assetAlias, 0, assetAlias.length, utf8);\n        bsize += assetAliasbuff.length;\n        barr.push(assetAliasbuff);\n        const networkIDBuff = buffer_1.Buffer.alloc(4);\n        networkIDBuff.writeUInt32BE(new bn_js_1.default(networkID).toNumber(), 0);\n        bsize += networkIDBuff.length;\n        barr.push(networkIDBuff);\n        // Blockchain ID\n        bsize += 32;\n        barr.push(buffer_1.Buffer.alloc(32));\n        // num Outputs\n        bsize += 4;\n        barr.push(buffer_1.Buffer.alloc(4));\n        // num Inputs\n        bsize += 4;\n        barr.push(buffer_1.Buffer.alloc(4));\n        // memo\n        const memo = this.getMemo();\n        const memobuffSize = buffer_1.Buffer.alloc(4);\n        memobuffSize.writeUInt32BE(memo.length, 0);\n        bsize += memobuffSize.length;\n        barr.push(memobuffSize);\n        bsize += memo.length;\n        barr.push(memo);\n        // asset name\n        const name = this.getName();\n        const namebuffSize = buffer_1.Buffer.alloc(2);\n        namebuffSize.writeUInt16BE(name.length, 0);\n        bsize += namebuffSize.length;\n        barr.push(namebuffSize);\n        const namebuff = buffer_1.Buffer.alloc(name.length);\n        namebuff.write(name, 0, name.length, utf8);\n        bsize += namebuff.length;\n        barr.push(namebuff);\n        // symbol\n        const symbol = this.getSymbol();\n        const symbolbuffSize = buffer_1.Buffer.alloc(2);\n        symbolbuffSize.writeUInt16BE(symbol.length, 0);\n        bsize += symbolbuffSize.length;\n        barr.push(symbolbuffSize);\n        const symbolbuff = buffer_1.Buffer.alloc(symbol.length);\n        symbolbuff.write(symbol, 0, symbol.length, utf8);\n        bsize += symbolbuff.length;\n        barr.push(symbolbuff);\n        // denomination\n        const denomination = this.getDenomination();\n        const denominationbuffSize = buffer_1.Buffer.alloc(1);\n        denominationbuffSize.writeUInt8(denomination, 0);\n        bsize += denominationbuffSize.length;\n        barr.push(denominationbuffSize);\n        bsize += this.initialState.toBuffer().length;\n        barr.push(this.initialState.toBuffer());\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.GenesisAsset = GenesisAsset;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-InitialStates\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InitialStates = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst output_1 = require(\"../../common/output\");\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class for creating initial output states used in asset creation\n */\nclass InitialStates extends serialization_1.Serializable {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"InitialStates\";\n        this._typeID = undefined;\n        this.fxs = {};\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        const flatfxs = {};\n        for (let fxid in this.fxs) {\n            flatfxs[`${fxid}`] = this.fxs[`${fxid}`].map((o) => o.serialize(encoding));\n        }\n        return Object.assign(Object.assign({}, fields), { fxs: flatfxs });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        const unflat = {};\n        for (let fxid in fields[\"fxs\"]) {\n            unflat[`${fxid}`] = fields[\"fxs\"][`${fxid}`].map((o) => {\n                const out = (0, outputs_1.SelectOutputClass)(o[\"_typeID\"]);\n                out.deserialize(o, encoding);\n                return out;\n            });\n        }\n        this.fxs = unflat;\n    }\n    /**\n     *\n     * @param out The output state to add to the collection\n     * @param fxid The FxID that will be used for this output, default AVMConstants.SECPFXID\n     */\n    addOutput(out, fxid = constants_1.AVMConstants.SECPFXID) {\n        if (!(fxid in this.fxs)) {\n            this.fxs[`${fxid}`] = [];\n        }\n        this.fxs[`${fxid}`].push(out);\n    }\n    fromBuffer(bytes, offset = 0) {\n        const result = [];\n        const klen = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const klennum = klen.readUInt32BE(0);\n        for (let i = 0; i < klennum; i++) {\n            const fxidbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            offset += 4;\n            const fxid = fxidbuff.readUInt32BE(0);\n            result[`${fxid}`] = [];\n            const statelenbuff = bintools.copyFrom(bytes, offset, offset + 4);\n            offset += 4;\n            const statelen = statelenbuff.readUInt32BE(0);\n            for (let j = 0; j < statelen; j++) {\n                const outputid = bintools\n                    .copyFrom(bytes, offset, offset + 4)\n                    .readUInt32BE(0);\n                offset += 4;\n                const out = (0, outputs_1.SelectOutputClass)(outputid);\n                offset = out.fromBuffer(bytes, offset);\n                result[`${fxid}`].push(out);\n            }\n        }\n        this.fxs = result;\n        return offset;\n    }\n    toBuffer() {\n        const buff = [];\n        const keys = Object.keys(this.fxs)\n            .map((k) => parseInt(k, 10))\n            .sort();\n        const klen = buffer_1.Buffer.alloc(4);\n        klen.writeUInt32BE(keys.length, 0);\n        buff.push(klen);\n        for (let i = 0; i < keys.length; i++) {\n            const fxid = keys[`${i}`];\n            const fxidbuff = buffer_1.Buffer.alloc(4);\n            fxidbuff.writeUInt32BE(fxid, 0);\n            buff.push(fxidbuff);\n            const initialState = this.fxs[`${fxid}`].sort(output_1.Output.comparator());\n            const statelen = buffer_1.Buffer.alloc(4);\n            statelen.writeUInt32BE(initialState.length, 0);\n            buff.push(statelen);\n            for (let j = 0; j < initialState.length; j++) {\n                const outputid = buffer_1.Buffer.alloc(4);\n                outputid.writeInt32BE(initialState[`${j}`].getOutputID(), 0);\n                buff.push(outputid);\n                buff.push(initialState[`${j}`].toBuffer());\n            }\n        }\n        return buffer_1.Buffer.concat(buff);\n    }\n}\nexports.InitialStates = InitialStates;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\n// there's 3 implementations written in increasing order of efficiency\n\n// 1 - no Set type is defined\nfunction uniqNoSet(arr) {\n\tvar ret = [];\n\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tif (ret.indexOf(arr[i]) === -1) {\n\t\t\tret.push(arr[i]);\n\t\t}\n\t}\n\n\treturn ret;\n}\n\n// 2 - a simple Set type is defined\nfunction uniqSet(arr) {\n\tvar seen = new Set();\n\treturn arr.filter(function (el) {\n\t\tif (!seen.has(el)) {\n\t\t\tseen.add(el);\n\t\t\treturn true;\n\t\t}\n\t});\n}\n\n// 3 - a standard Set type is defined and it has a forEach method\nfunction uniqSetWithForEach(arr) {\n\tvar ret = [];\n\n\t(new Set(arr)).forEach(function (el) {\n\t\tret.push(el);\n\t});\n\n\treturn ret;\n}\n\n// V8 currently has a broken implementation\n// https://github.com/joyent/node/issues/8449\nfunction doesForEachActuallyWork() {\n\tvar ret = false;\n\n\t(new Set([true])).forEach(function (el) {\n\t\tret = el;\n\t});\n\n\treturn ret === true;\n}\n\nif ('Set' in global) {\n\tif (typeof Set.prototype.forEach === 'function' && doesForEachActuallyWork()) {\n\t\tmodule.exports = uniqSetWithForEach;\n\t} else {\n\t\tmodule.exports = uniqSet;\n\t}\n} else {\n\tmodule.exports = uniqNoSet;\n}\n","'use strict';\n\nconst asn1 = exports;\n\nasn1.bignum = require('bn.js');\n\nasn1.define = require('./asn1/api').define;\nasn1.base = require('./asn1/base');\nasn1.constants = require('./asn1/constants');\nasn1.decoders = require('./asn1/decoders');\nasn1.encoders = require('./asn1/encoders');\n","'use strict';\n\nconst Reporter = require('../base/reporter').Reporter;\nconst EncoderBuffer = require('../base/buffer').EncoderBuffer;\nconst DecoderBuffer = require('../base/buffer').DecoderBuffer;\nconst assert = require('minimalistic-assert');\n\n// Supported tags\nconst tags = [\n  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',\n  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',\n  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',\n  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'\n];\n\n// Public methods list\nconst methods = [\n  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',\n  'any', 'contains'\n].concat(tags);\n\n// Overrided methods list\nconst overrided = [\n  '_peekTag', '_decodeTag', '_use',\n  '_decodeStr', '_decodeObjid', '_decodeTime',\n  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',\n\n  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',\n  '_encodeNull', '_encodeInt', '_encodeBool'\n];\n\nfunction Node(enc, parent, name) {\n  const state = {};\n  this._baseState = state;\n\n  state.name = name;\n  state.enc = enc;\n\n  state.parent = parent || null;\n  state.children = null;\n\n  // State\n  state.tag = null;\n  state.args = null;\n  state.reverseArgs = null;\n  state.choice = null;\n  state.optional = false;\n  state.any = false;\n  state.obj = false;\n  state.use = null;\n  state.useDecoder = null;\n  state.key = null;\n  state['default'] = null;\n  state.explicit = null;\n  state.implicit = null;\n  state.contains = null;\n\n  // Should create new instance on each method\n  if (!state.parent) {\n    state.children = [];\n    this._wrap();\n  }\n}\nmodule.exports = Node;\n\nconst stateProps = [\n  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',\n  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',\n  'implicit', 'contains'\n];\n\nNode.prototype.clone = function clone() {\n  const state = this._baseState;\n  const cstate = {};\n  stateProps.forEach(function(prop) {\n    cstate[prop] = state[prop];\n  });\n  const res = new this.constructor(cstate.parent);\n  res._baseState = cstate;\n  return res;\n};\n\nNode.prototype._wrap = function wrap() {\n  const state = this._baseState;\n  methods.forEach(function(method) {\n    this[method] = function _wrappedMethod() {\n      const clone = new this.constructor(this);\n      state.children.push(clone);\n      return clone[method].apply(clone, arguments);\n    };\n  }, this);\n};\n\nNode.prototype._init = function init(body) {\n  const state = this._baseState;\n\n  assert(state.parent === null);\n  body.call(this);\n\n  // Filter children\n  state.children = state.children.filter(function(child) {\n    return child._baseState.parent === this;\n  }, this);\n  assert.equal(state.children.length, 1, 'Root node can have only one child');\n};\n\nNode.prototype._useArgs = function useArgs(args) {\n  const state = this._baseState;\n\n  // Filter children and args\n  const children = args.filter(function(arg) {\n    return arg instanceof this.constructor;\n  }, this);\n  args = args.filter(function(arg) {\n    return !(arg instanceof this.constructor);\n  }, this);\n\n  if (children.length !== 0) {\n    assert(state.children === null);\n    state.children = children;\n\n    // Replace parent to maintain backward link\n    children.forEach(function(child) {\n      child._baseState.parent = this;\n    }, this);\n  }\n  if (args.length !== 0) {\n    assert(state.args === null);\n    state.args = args;\n    state.reverseArgs = args.map(function(arg) {\n      if (typeof arg !== 'object' || arg.constructor !== Object)\n        return arg;\n\n      const res = {};\n      Object.keys(arg).forEach(function(key) {\n        if (key == (key | 0))\n          key |= 0;\n        const value = arg[key];\n        res[value] = key;\n      });\n      return res;\n    });\n  }\n};\n\n//\n// Overrided methods\n//\n\noverrided.forEach(function(method) {\n  Node.prototype[method] = function _overrided() {\n    const state = this._baseState;\n    throw new Error(method + ' not implemented for encoding: ' + state.enc);\n  };\n});\n\n//\n// Public methods\n//\n\ntags.forEach(function(tag) {\n  Node.prototype[tag] = function _tagMethod() {\n    const state = this._baseState;\n    const args = Array.prototype.slice.call(arguments);\n\n    assert(state.tag === null);\n    state.tag = tag;\n\n    this._useArgs(args);\n\n    return this;\n  };\n});\n\nNode.prototype.use = function use(item) {\n  assert(item);\n  const state = this._baseState;\n\n  assert(state.use === null);\n  state.use = item;\n\n  return this;\n};\n\nNode.prototype.optional = function optional() {\n  const state = this._baseState;\n\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.def = function def(val) {\n  const state = this._baseState;\n\n  assert(state['default'] === null);\n  state['default'] = val;\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.explicit = function explicit(num) {\n  const state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.explicit = num;\n\n  return this;\n};\n\nNode.prototype.implicit = function implicit(num) {\n  const state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.implicit = num;\n\n  return this;\n};\n\nNode.prototype.obj = function obj() {\n  const state = this._baseState;\n  const args = Array.prototype.slice.call(arguments);\n\n  state.obj = true;\n\n  if (args.length !== 0)\n    this._useArgs(args);\n\n  return this;\n};\n\nNode.prototype.key = function key(newKey) {\n  const state = this._baseState;\n\n  assert(state.key === null);\n  state.key = newKey;\n\n  return this;\n};\n\nNode.prototype.any = function any() {\n  const state = this._baseState;\n\n  state.any = true;\n\n  return this;\n};\n\nNode.prototype.choice = function choice(obj) {\n  const state = this._baseState;\n\n  assert(state.choice === null);\n  state.choice = obj;\n  this._useArgs(Object.keys(obj).map(function(key) {\n    return obj[key];\n  }));\n\n  return this;\n};\n\nNode.prototype.contains = function contains(item) {\n  const state = this._baseState;\n\n  assert(state.use === null);\n  state.contains = item;\n\n  return this;\n};\n\n//\n// Decoding\n//\n\nNode.prototype._decode = function decode(input, options) {\n  const state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return input.wrapResult(state.children[0]._decode(input, options));\n\n  let result = state['default'];\n  let present = true;\n\n  let prevKey = null;\n  if (state.key !== null)\n    prevKey = input.enterKey(state.key);\n\n  // Check if tag is there\n  if (state.optional) {\n    let tag = null;\n    if (state.explicit !== null)\n      tag = state.explicit;\n    else if (state.implicit !== null)\n      tag = state.implicit;\n    else if (state.tag !== null)\n      tag = state.tag;\n\n    if (tag === null && !state.any) {\n      // Trial and Error\n      const save = input.save();\n      try {\n        if (state.choice === null)\n          this._decodeGeneric(state.tag, input, options);\n        else\n          this._decodeChoice(input, options);\n        present = true;\n      } catch (e) {\n        present = false;\n      }\n      input.restore(save);\n    } else {\n      present = this._peekTag(input, tag, state.any);\n\n      if (input.isError(present))\n        return present;\n    }\n  }\n\n  // Push object on stack\n  let prevObj;\n  if (state.obj && present)\n    prevObj = input.enterObject();\n\n  if (present) {\n    // Unwrap explicit values\n    if (state.explicit !== null) {\n      const explicit = this._decodeTag(input, state.explicit);\n      if (input.isError(explicit))\n        return explicit;\n      input = explicit;\n    }\n\n    const start = input.offset;\n\n    // Unwrap implicit and normal values\n    if (state.use === null && state.choice === null) {\n      let save;\n      if (state.any)\n        save = input.save();\n      const body = this._decodeTag(\n        input,\n        state.implicit !== null ? state.implicit : state.tag,\n        state.any\n      );\n      if (input.isError(body))\n        return body;\n\n      if (state.any)\n        result = input.raw(save);\n      else\n        input = body;\n    }\n\n    if (options && options.track && state.tag !== null)\n      options.track(input.path(), start, input.length, 'tagged');\n\n    if (options && options.track && state.tag !== null)\n      options.track(input.path(), input.offset, input.length, 'content');\n\n    // Select proper method for tag\n    if (state.any) {\n      // no-op\n    } else if (state.choice === null) {\n      result = this._decodeGeneric(state.tag, input, options);\n    } else {\n      result = this._decodeChoice(input, options);\n    }\n\n    if (input.isError(result))\n      return result;\n\n    // Decode children\n    if (!state.any && state.choice === null && state.children !== null) {\n      state.children.forEach(function decodeChildren(child) {\n        // NOTE: We are ignoring errors here, to let parser continue with other\n        // parts of encoded data\n        child._decode(input, options);\n      });\n    }\n\n    // Decode contained/encoded by schema, only in bit or octet strings\n    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {\n      const data = new DecoderBuffer(result);\n      result = this._getUse(state.contains, input._reporterState.obj)\n        ._decode(data, options);\n    }\n  }\n\n  // Pop object\n  if (state.obj && present)\n    result = input.leaveObject(prevObj);\n\n  // Set key\n  if (state.key !== null && (result !== null || present === true))\n    input.leaveKey(prevKey, state.key, result);\n  else if (prevKey !== null)\n    input.exitKey(prevKey);\n\n  return result;\n};\n\nNode.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {\n  const state = this._baseState;\n\n  if (tag === 'seq' || tag === 'set')\n    return null;\n  if (tag === 'seqof' || tag === 'setof')\n    return this._decodeList(input, tag, state.args[0], options);\n  else if (/str$/.test(tag))\n    return this._decodeStr(input, tag, options);\n  else if (tag === 'objid' && state.args)\n    return this._decodeObjid(input, state.args[0], state.args[1], options);\n  else if (tag === 'objid')\n    return this._decodeObjid(input, null, null, options);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._decodeTime(input, tag, options);\n  else if (tag === 'null_')\n    return this._decodeNull(input, options);\n  else if (tag === 'bool')\n    return this._decodeBool(input, options);\n  else if (tag === 'objDesc')\n    return this._decodeStr(input, tag, options);\n  else if (tag === 'int' || tag === 'enum')\n    return this._decodeInt(input, state.args && state.args[0], options);\n\n  if (state.use !== null) {\n    return this._getUse(state.use, input._reporterState.obj)\n      ._decode(input, options);\n  } else {\n    return input.error('unknown tag: ' + tag);\n  }\n};\n\nNode.prototype._getUse = function _getUse(entity, obj) {\n\n  const state = this._baseState;\n  // Create altered use decoder if implicit is set\n  state.useDecoder = this._use(entity, obj);\n  assert(state.useDecoder._baseState.parent === null);\n  state.useDecoder = state.useDecoder._baseState.children[0];\n  if (state.implicit !== state.useDecoder._baseState.implicit) {\n    state.useDecoder = state.useDecoder.clone();\n    state.useDecoder._baseState.implicit = state.implicit;\n  }\n  return state.useDecoder;\n};\n\nNode.prototype._decodeChoice = function decodeChoice(input, options) {\n  const state = this._baseState;\n  let result = null;\n  let match = false;\n\n  Object.keys(state.choice).some(function(key) {\n    const save = input.save();\n    const node = state.choice[key];\n    try {\n      const value = node._decode(input, options);\n      if (input.isError(value))\n        return false;\n\n      result = { type: key, value: value };\n      match = true;\n    } catch (e) {\n      input.restore(save);\n      return false;\n    }\n    return true;\n  }, this);\n\n  if (!match)\n    return input.error('Choice not matched');\n\n  return result;\n};\n\n//\n// Encoding\n//\n\nNode.prototype._createEncoderBuffer = function createEncoderBuffer(data) {\n  return new EncoderBuffer(data, this.reporter);\n};\n\nNode.prototype._encode = function encode(data, reporter, parent) {\n  const state = this._baseState;\n  if (state['default'] !== null && state['default'] === data)\n    return;\n\n  const result = this._encodeValue(data, reporter, parent);\n  if (result === undefined)\n    return;\n\n  if (this._skipDefault(result, reporter, parent))\n    return;\n\n  return result;\n};\n\nNode.prototype._encodeValue = function encode(data, reporter, parent) {\n  const state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return state.children[0]._encode(data, reporter || new Reporter());\n\n  let result = null;\n\n  // Set reporter to share it with a child class\n  this.reporter = reporter;\n\n  // Check if data is there\n  if (state.optional && data === undefined) {\n    if (state['default'] !== null)\n      data = state['default'];\n    else\n      return;\n  }\n\n  // Encode children first\n  let content = null;\n  let primitive = false;\n  if (state.any) {\n    // Anything that was given is translated to buffer\n    result = this._createEncoderBuffer(data);\n  } else if (state.choice) {\n    result = this._encodeChoice(data, reporter);\n  } else if (state.contains) {\n    content = this._getUse(state.contains, parent)._encode(data, reporter);\n    primitive = true;\n  } else if (state.children) {\n    content = state.children.map(function(child) {\n      if (child._baseState.tag === 'null_')\n        return child._encode(null, reporter, data);\n\n      if (child._baseState.key === null)\n        return reporter.error('Child should have a key');\n      const prevKey = reporter.enterKey(child._baseState.key);\n\n      if (typeof data !== 'object')\n        return reporter.error('Child expected, but input is not object');\n\n      const res = child._encode(data[child._baseState.key], reporter, data);\n      reporter.leaveKey(prevKey);\n\n      return res;\n    }, this).filter(function(child) {\n      return child;\n    });\n    content = this._createEncoderBuffer(content);\n  } else {\n    if (state.tag === 'seqof' || state.tag === 'setof') {\n      // TODO(indutny): this should be thrown on DSL level\n      if (!(state.args && state.args.length === 1))\n        return reporter.error('Too many args for : ' + state.tag);\n\n      if (!Array.isArray(data))\n        return reporter.error('seqof/setof, but data is not Array');\n\n      const child = this.clone();\n      child._baseState.implicit = null;\n      content = this._createEncoderBuffer(data.map(function(item) {\n        const state = this._baseState;\n\n        return this._getUse(state.args[0], data)._encode(item, reporter);\n      }, child));\n    } else if (state.use !== null) {\n      result = this._getUse(state.use, parent)._encode(data, reporter);\n    } else {\n      content = this._encodePrimitive(state.tag, data);\n      primitive = true;\n    }\n  }\n\n  // Encode data itself\n  if (!state.any && state.choice === null) {\n    const tag = state.implicit !== null ? state.implicit : state.tag;\n    const cls = state.implicit === null ? 'universal' : 'context';\n\n    if (tag === null) {\n      if (state.use === null)\n        reporter.error('Tag could be omitted only for .use()');\n    } else {\n      if (state.use === null)\n        result = this._encodeComposite(tag, primitive, cls, content);\n    }\n  }\n\n  // Wrap in explicit\n  if (state.explicit !== null)\n    result = this._encodeComposite(state.explicit, false, 'context', result);\n\n  return result;\n};\n\nNode.prototype._encodeChoice = function encodeChoice(data, reporter) {\n  const state = this._baseState;\n\n  const node = state.choice[data.type];\n  if (!node) {\n    assert(\n      false,\n      data.type + ' not found in ' +\n            JSON.stringify(Object.keys(state.choice)));\n  }\n  return node._encode(data.value, reporter);\n};\n\nNode.prototype._encodePrimitive = function encodePrimitive(tag, data) {\n  const state = this._baseState;\n\n  if (/str$/.test(tag))\n    return this._encodeStr(data, tag);\n  else if (tag === 'objid' && state.args)\n    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);\n  else if (tag === 'objid')\n    return this._encodeObjid(data, null, null);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._encodeTime(data, tag);\n  else if (tag === 'null_')\n    return this._encodeNull();\n  else if (tag === 'int' || tag === 'enum')\n    return this._encodeInt(data, state.args && state.reverseArgs[0]);\n  else if (tag === 'bool')\n    return this._encodeBool(data);\n  else if (tag === 'objDesc')\n    return this._encodeStr(data, tag);\n  else\n    throw new Error('Unsupported tag: ' + tag);\n};\n\nNode.prototype._isNumstr = function isNumstr(str) {\n  return /^[0-9 ]*$/.test(str);\n};\n\nNode.prototype._isPrintstr = function isPrintstr(str) {\n  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Vertex = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Vertex\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst tx_1 = require(\"./tx\");\nconst utils_1 = require(\"../../utils\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing a Vertex\n */\nclass Vertex extends utils_1.Serializable {\n    /**\n     * Class representing a Vertex which is a container for AVM Transactions.\n     *\n     * @param networkID Optional, [[DefaultNetworkID]]\n     * @param blockchainID Optional, default \"hgBiUrBJkih9eoPkLtNaJKJQK8Fc2nmR6yuqkh9BmgNY2dJ3Y\"\n     * @param height Optional, default new BN(0)\n     * @param epoch Optional, default new BN(0)\n     * @param parentIDs Optional, default []\n     * @param txs Optional, default []\n     * @param restrictions Optional, default []\n     */\n    constructor(networkID = utils_1.DefaultNetworkID, blockchainID = \"hgBiUrBJkih9eoPkLtNaJKJQK8Fc2nmR6yuqkh9BmgNY2dJ3Y\", height = new bn_js_1.default(0), epoch = 0, parentIDs = [], txs = [], restrictions = []) {\n        super();\n        this._typeName = \"Vertex\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this.networkID = networkID;\n        this.blockchainID = bintools.cb58Decode(blockchainID);\n        this.height = height;\n        this.epoch = epoch;\n        this.parentIDs = parentIDs;\n        this.numParentIDs = parentIDs.length;\n        this.txs = txs;\n        this.numTxs = txs.length;\n        this.restrictions = restrictions;\n        this.numRestrictions = restrictions.length;\n    }\n    /**\n     * Returns the NetworkID as a number\n     */\n    getNetworkID() {\n        return this.networkID;\n    }\n    /**\n     * Returns the BlockchainID as a CB58 string\n     */\n    getBlockchainID() {\n        return bintools.cb58Encode(this.blockchainID);\n    }\n    /**\n     * Returns the Height as a {@link https://github.com/indutny/bn.js/|BN}.\n     */\n    getHeight() {\n        return this.height;\n    }\n    /**\n     * Returns the Epoch as a number.\n     */\n    getEpoch() {\n        return this.epoch;\n    }\n    /**\n     * @returns An array of Buffers\n     */\n    getParentIDs() {\n        return this.parentIDs;\n    }\n    /**\n     * Returns array of UnsignedTxs.\n     */\n    getTxs() {\n        return this.txs;\n    }\n    /**\n     * @returns An array of Buffers\n     */\n    getRestrictions() {\n        return this.restrictions;\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new utils_1.CodecIdError(\"Error - Vertex.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0 ? constants_1.AVMConstants.VERTEX : constants_1.AVMConstants.VERTEX_CODECONE;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Vertex]], parses it, populates the class, and returns the length of the Vertex in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Vertex]]\n     *\n     * @returns The length of the raw [[Vertex]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset += 2;\n        this.blockchainID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const h = bintools.copyFrom(bytes, offset, offset + 8);\n        this.height = bintools.fromBufferToBN(h);\n        offset += 8;\n        const e = bintools.copyFrom(bytes, offset, offset + 4);\n        this.epoch = e.readInt32BE(0);\n        offset += 4;\n        const nPIDs = bintools.copyFrom(bytes, offset, offset + 4);\n        this.numParentIDs = nPIDs.readInt32BE(0);\n        offset += 4;\n        for (let i = 0; i < this.numParentIDs; i++) {\n            const parentID = bintools.copyFrom(bytes, offset, offset + 32);\n            offset += 32;\n            this.parentIDs.push(parentID);\n        }\n        const nTxs = bintools.copyFrom(bytes, offset, offset + 4);\n        this.numTxs = nTxs.readInt32BE(0);\n        // account for tx-size bytes\n        offset += 8;\n        for (let i = 0; i < this.numTxs; i++) {\n            const tx = new tx_1.Tx();\n            offset += tx.fromBuffer(bintools.copyFrom(bytes, offset));\n            this.txs.push(tx);\n        }\n        if (bytes.byteLength > offset && bytes.byteLength - offset > 4) {\n            const nRs = bintools.copyFrom(bytes, offset, offset + 4);\n            this.numRestrictions = nRs.readInt32BE(0);\n            offset += 4;\n            for (let i = 0; i < this.numRestrictions; i++) {\n                const tx = bintools.copyFrom(bytes, offset, offset + 32);\n                offset += 32;\n                this.restrictions.push(tx);\n            }\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[Vertex]].\n     */\n    toBuffer() {\n        const codec = this.getCodecID();\n        const codecBuf = buffer_1.Buffer.alloc(2);\n        codecBuf.writeUInt16BE(codec, 0);\n        const epochBuf = buffer_1.Buffer.alloc(4);\n        epochBuf.writeInt32BE(this.epoch, 0);\n        const numParentIDsBuf = buffer_1.Buffer.alloc(4);\n        numParentIDsBuf.writeInt32BE(this.numParentIDs, 0);\n        let barr = [\n            codecBuf,\n            this.blockchainID,\n            bintools.fromBNToBuffer(this.height, 8),\n            epochBuf,\n            numParentIDsBuf\n        ];\n        this.parentIDs.forEach((parentID) => {\n            barr.push(parentID);\n        });\n        const txs = this.getTxs();\n        const numTxs = buffer_1.Buffer.alloc(4);\n        numTxs.writeUInt32BE(txs.length, 0);\n        barr.push(numTxs);\n        let size = 0;\n        const txSize = buffer_1.Buffer.alloc(4);\n        txs.forEach((tx) => {\n            const b = tx.toBuffer();\n            size += b.byteLength;\n        });\n        txSize.writeUInt32BE(size, 0);\n        barr.push(txSize);\n        txs.forEach((tx) => {\n            const b = tx.toBuffer();\n            barr.push(b);\n        });\n        return buffer_1.Buffer.concat(barr);\n    }\n    clone() {\n        let vertex = new Vertex();\n        vertex.fromBuffer(this.toBuffer());\n        return vertex;\n    }\n}\nexports.Vertex = Vertex;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\n\nconst DEREncoder = require('./der');\n\nfunction PEMEncoder(entity) {\n  DEREncoder.call(this, entity);\n  this.enc = 'pem';\n}\ninherits(PEMEncoder, DEREncoder);\nmodule.exports = PEMEncoder;\n\nPEMEncoder.prototype.encode = function encode(data, options) {\n  const buf = DEREncoder.prototype.encode.call(this, data);\n\n  const p = buf.toString('base64');\n  const out = [ '-----BEGIN ' + options.label + '-----' ];\n  for (let i = 0; i < p.length; i += 64)\n    out.push(p.slice(i, i + 64));\n  out.push('-----END ' + options.label + '-----');\n  return out.join('\\n');\n};\n","'use strict';\n\n// Helper\nfunction reverse(map) {\n  const res = {};\n\n  Object.keys(map).forEach(function(key) {\n    // Convert key to integer if it is stringified\n    if ((key | 0) == key)\n      key = key | 0;\n\n    const value = map[key];\n    res[value] = key;\n  });\n\n  return res;\n}\n\nexports.tagClass = {\n  0: 'universal',\n  1: 'application',\n  2: 'context',\n  3: 'private'\n};\nexports.tagClassByName = reverse(exports.tagClass);\n\nexports.tag = {\n  0x00: 'end',\n  0x01: 'bool',\n  0x02: 'int',\n  0x03: 'bitstr',\n  0x04: 'octstr',\n  0x05: 'null_',\n  0x06: 'objid',\n  0x07: 'objDesc',\n  0x08: 'external',\n  0x09: 'real',\n  0x0a: 'enum',\n  0x0b: 'embed',\n  0x0c: 'utf8str',\n  0x0d: 'relativeOid',\n  0x10: 'seq',\n  0x11: 'set',\n  0x12: 'numstr',\n  0x13: 'printstr',\n  0x14: 't61str',\n  0x15: 'videostr',\n  0x16: 'ia5str',\n  0x17: 'utctime',\n  0x18: 'gentime',\n  0x19: 'graphstr',\n  0x1a: 'iso646str',\n  0x1b: 'genstr',\n  0x1c: 'unistr',\n  0x1d: 'charstr',\n  0x1e: 'bmpstr'\n};\nexports.tagByName = reverse(exports.tag);\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for representing a private and public keypair on an AVM Chain.\n */\nclass KeyPair extends secp256k1_1.SECP256k1KeyPair {\n    clone() {\n        const newkp = new KeyPair(this.hrp, this.chainID);\n        newkp.importKey(bintools.copyFrom(this.getPrivateKey()));\n        return newkp;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyPair(args[0], args[1]);\n        }\n        return new KeyPair(this.hrp, this.chainID);\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam KeyPair Class extending [[SECP256k1KeyChain]] which is used as the key in [[KeyChain]]\n */\nclass KeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n     * Returns instance of KeyChain.\n     */\n    constructor(hrp, chainid) {\n        super();\n        this.hrp = \"\";\n        this.chainid = \"\";\n        /**\n         * Makes a new key pair, returns the address.\n         *\n         * @returns The new key pair\n         */\n        this.makeKey = () => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainid);\n            super.addKey(newKey);\n        };\n        /**\n         * Given a private key, makes a new key pair, returns the address.\n         *\n         * @param privk A {@link https://github.com/feross/buffer|Buffer} or cb58 serialized string representing the private key\n         *\n         * @returns The new key pair\n         */\n        this.importKey = (privk) => {\n            let keypair = new KeyPair(this.hrp, this.chainid);\n            let pk;\n            if (typeof privk === \"string\") {\n                pk = bintools.cb58Decode(privk.split(\"-\")[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainid = chainid;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyChain(args[0], args[1]);\n        }\n        return new KeyChain(this.hrp, this.chainid);\n    }\n    clone() {\n        const newkc = new KeyChain(this.hrp, this.chainid);\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[`${k}`].clone());\n        }\n        return newkc;\n    }\n    union(kc) {\n        let newkc = kc.clone();\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[`${k}`].clone());\n        }\n        return newkc;\n    }\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Y2hhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0va2V5Y2hhaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBS0Esb0VBQTJDO0FBQzNDLHNEQUE0RTtBQUM1RSx1Q0FBMkQ7QUFFM0Q7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBYSxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBQ2pELE1BQU0sYUFBYSxHQUFrQixxQkFBYSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBRWhFOztHQUVHO0FBQ0gsTUFBYSxPQUFRLFNBQVEsNEJBQWdCO0lBQzNDLEtBQUs7UUFDSCxNQUFNLEtBQUssR0FBWSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUMxRCxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN4RCxPQUFPLEtBQWEsQ0FBQTtJQUN0QixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBVztRQUNuQixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBUyxDQUFBO1NBQzdDO1FBQ0QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQVMsQ0FBQTtJQUNwRCxDQUFDO0NBQ0Y7QUFiRCwwQkFhQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFhLFFBQVMsU0FBUSw2QkFBMEI7SUFpRXREOztPQUVHO0lBQ0gsWUFBWSxHQUFXLEVBQUUsT0FBZTtRQUN0QyxLQUFLLEVBQUUsQ0FBQTtRQXBFVCxRQUFHLEdBQVcsRUFBRSxDQUFBO1FBQ2hCLFlB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Z2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1BVk0tS2V5Q2hhaW5cbiAqL1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlci9cIlxuaW1wb3J0IEJpblRvb2xzIGZyb20gXCIuLi8uLi91dGlscy9iaW50b29sc1wiXG5pbXBvcnQgeyBTRUNQMjU2azFLZXlDaGFpbiwgU0VDUDI1NmsxS2V5UGFpciB9IGZyb20gXCIuLi8uLi9jb21tb24vc2VjcDI1NmsxXCJcbmltcG9ydCB7IFNlcmlhbGl6YXRpb24sIFNlcmlhbGl6ZWRUeXBlIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCJcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzOiBCaW5Ub29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKClcbmNvbnN0IHNlcmlhbGl6YXRpb246IFNlcmlhbGl6YXRpb24gPSBTZXJpYWxpemF0aW9uLmdldEluc3RhbmNlKClcblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgcHJpdmF0ZSBhbmQgcHVibGljIGtleXBhaXIgb24gYW4gQVZNIENoYWluLlxuICovXG5leHBvcnQgY2xhc3MgS2V5UGFpciBleHRlbmRzIFNFQ1AyNTZrMUtleVBhaXIge1xuICBjbG9uZSgpOiB0aGlzIHtcbiAgICBjb25zdCBuZXdrcDogS2V5UGFpciA9IG5ldyBLZXlQYWlyKHRoaXMuaHJwLCB0aGlzLmNoYWluSUQpXG4gICAgbmV3a3AuaW1wb3J0S2V5KGJpbnRvb2xzLmNvcHlGcm9tKHRoaXMuZ2V0UHJpdmF0ZUtleSgpKSlcbiAgICByZXR1cm4gbmV3a3AgYXMgdGhpc1xuICB9XG5cbiAgY3JlYXRlKC4uLmFyZ3M6IGFueVtdKTogdGhpcyB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09IDIpIHtcbiAgICAgIHJldHVybiBuZXcgS2V5UGFpcihhcmdzWzBdLCBhcmdzWzFdKSBhcyB0aGlzXG4gICAgfVxuICAgIHJldHVybiBuZXcgS2V5UGFpcih0aGlzLmhycCwgdGhpcy5jaGFpbklEKSBhcyB0aGlzXG4gIH1cbn1cblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEga2V5IGNoYWluIGluIEF2YWxhbmNoZS5cbiAqXG4gKiBAdHlwZXBhcmFtIEtleVBhaXIgQ2xhc3MgZXh0ZW5kaW5nIFtbU0VDUDI1NmsxS2V5Q2hhaW5dXSB3aGljaCBpcyB1c2VkIGFzIHRoZSBrZXkgaW4gW1tLZXlDaGFpbl1dXG4gKi9cbmV4cG9ydCBjbGFzcyBLZXlDaGFpbiBleHRlbmRzIFNFQ1AyNTZrMUtleUNoYWluPEtleVBhaXI+IHtcbiAgaHJwOiBzdHJpbmcgPSBcIlwiXG4gIGNoYWluaWQ6IHN0cmluZyA9IFwiXCJcblxuICAvKipcbiAgICogTWFrZXMgYSBuZXcga2V5IHBhaXIsIHJldHVybnMgdGhlIGFkZHJlc3MuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBuZXcga2V5IHBhaXJcbiAgICovXG4gIG1ha2VLZXkgPSAoKTogS2V5UGFpciA9PiB7XG4gICAgbGV0IGtleXBhaXI6IEtleVBhaXIgPSBuZXcgS2V5UGFpcih0aGlzLmhycCwgdGhpcy5jaGFpbmlkKVxuICAgIHRoaXMuYWRkS2V5KGtleXBhaXIpXG4gICAgcmV0dXJuIGtleXBhaXJcbiAgfVxuXG4gIGFkZEtleSA9IChuZXdLZXk6IEtleVBhaXIpID0+IHtcbiAgICBuZXdLZXkuc2V0Q2hhaW5JRCh0aGlzLmNoYWluaWQpXG4gICAgc3VwZXIuYWRkS2V5KG5ld0tleSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhIHByaXZhdGUga2V5LCBtYWtlcyBhIG5ldyBrZXkgcGFpciwgcmV0dXJucyB0aGUgYWRkcmVzcy5cbiAgICpcbiAgICogQHBhcmFtIHByaXZrIEEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gb3IgY2I1OCBzZXJpYWxpemVkIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHByaXZhdGUga2V5XG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBuZXcga2V5IHBhaXJcbiAgICovXG4gIGltcG9ydEtleSA9IChwcml2azogQnVmZmVyIHwgc3RyaW5nKTogS2V5UGFpciA9PiB7XG4gICAgbGV0IGtleXBhaXI6IEtleVBhaXIgPSBuZXcgS2V5UGFpcih0aGlzLmhycCwgdGhpcy5jaGFpbmlkKVxuICAgIGxldCBwazogQnVmZmVyXG4gICAgaWYgKHR5cGVvZiBwcml2ayA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcGsgPSBiaW50b29scy5jYjU4RGVjb2RlKHByaXZrLnNwbGl0KFwiLVwiKVsxXSlcbiAgICB9IGVsc2Uge1xuICAgICAgcGsgPSBiaW50b29scy5jb3B5RnJvbShwcml2aylcbiAgICB9XG4gICAga2V5cGFpci5pbXBvcnRLZXkocGspXG4gICAgaWYgKCEoa2V5cGFpci5nZXRBZGRyZXNzKCkudG9TdHJpbmcoXCJoZXhcIikgaW4gdGhpcy5rZXlzKSkge1xuICAgICAgdGhpcy5hZGRLZXkoa2V5cGFpcilcbiAgICB9XG4gICAgcmV0dXJuIGtleXBhaXJcbiAgfVxuXG4gIGNyZWF0ZSguLi5hcmdzOiBhbnlbXSk6IHRoaXMge1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PSAyKSB7XG4gICAgICByZXR1cm4gbmV3IEtleUNoYWluKGFyZ3NbMF0sIGFyZ3NbMV0pIGFzIHRoaXNcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBLZXlDaGFpbih0aGlzLmhycCwgdGhpcy5jaGFpbmlkKSBhcyB0aGlzXG4gIH1cblxuICBjbG9uZSgpOiB0aGlzIHtcbiAgICBjb25zdCBuZXdrYzogS2V5Q2hhaW4gPSBuZXcgS2V5Q2hhaW4odGhpcy5ocnAsIHRoaXMuY2hhaW5pZClcbiAgICBmb3IgKGxldCBrIGluIHRoaXMua2V5cykge1xuICAgICAgbmV3a2MuYWRkS2V5KHRoaXMua2V5c1tgJHtrfWBdLmNsb25lKCkpXG4gICAgfVxuICAgIHJldHVybiBuZXdrYyBhcyB0aGlzXG4gIH1cblxuICB1bmlvbihrYzogdGhpcyk6IHRoaXMge1xuICAgIGxldCBuZXdrYzogS2V5Q2hhaW4gPSBrYy5jbG9uZSgpXG4gICAgZm9yIChsZXQgayBpbiB0aGlzLmtleXMpIHtcbiAgICAgIG5ld2tjLmFkZEtleSh0aGlzLmtleXNbYCR7a31gXS5jbG9uZSgpKVxuICAgIH1cbiAgICByZXR1cm4gbmV3a2MgYXMgdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgaW5zdGFuY2Ugb2YgS2V5Q2hhaW4uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihocnA6IHN0cmluZywgY2hhaW5pZDogc3RyaW5nKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuaHJwID0gaHJwXG4gICAgdGhpcy5jaGFpbmlkID0gY2hhaW5pZFxuICB9XG59XG4iXX0=","'use strict';\n\nconst inherits = require('inherits');\nconst Buffer = require('safer-buffer').Buffer;\n\nconst DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n}\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  const lines = data.toString().split(/[\\r\\n]+/g);\n\n  const label = options.label.toUpperCase();\n\n  const re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  let start = -1;\n  let end = -1;\n  for (let i = 0; i < lines.length; i++) {\n    const match = lines[i].match(re);\n    if (match === null)\n      continue;\n\n    if (match[2] !== label)\n      continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN')\n        break;\n      start = i;\n    } else {\n      if (match[1] !== 'END')\n        break;\n      end = i;\n      break;\n    }\n  }\n  if (start === -1 || end === -1)\n    throw new Error('PEM section not found for: ' + label);\n\n  const base64 = lines.slice(start + 1, end).join('');\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9+/=]+/gi, '');\n\n  const input = Buffer.from(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-Constants\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AVMConstants = void 0;\nclass AVMConstants {\n}\nexports.AVMConstants = AVMConstants;\nAVMConstants.LATESTCODEC = 0;\nAVMConstants.SECPFXID = 0;\nAVMConstants.NFTFXID = 1;\nAVMConstants.SECPMINTOUTPUTID = 6;\nAVMConstants.SECPMINTOUTPUTID_CODECONE = 65537;\nAVMConstants.SECPXFEROUTPUTID = 7;\nAVMConstants.SECPXFEROUTPUTID_CODECONE = 65538;\nAVMConstants.NFTXFEROUTPUTID = 11;\nAVMConstants.NFTXFEROUTPUTID_CODECONE = 131073;\nAVMConstants.NFTMINTOUTPUTID = 10;\nAVMConstants.NFTMINTOUTPUTID_CODECONE = 131072;\nAVMConstants.SECPINPUTID = 5;\nAVMConstants.SECPINPUTID_CODECONE = 65536;\nAVMConstants.SECPMINTOPID = 8;\nAVMConstants.SECPMINTOPID_CODECONE = 65539;\nAVMConstants.NFTMINTOPID = 12;\nAVMConstants.NFTMINTOPID_CODECONE = 131074;\nAVMConstants.NFTXFEROPID = 13;\nAVMConstants.NFTXFEROPID_CODECONE = 131075;\nAVMConstants.VERTEX = 0;\nAVMConstants.VERTEX_CODECONE = 0;\nAVMConstants.BASETX = 0;\nAVMConstants.BASETX_CODECONE = 0;\nAVMConstants.CREATEASSETTX = 1;\nAVMConstants.CREATEASSETTX_CODECONE = 1;\nAVMConstants.OPERATIONTX = 2;\nAVMConstants.OPERATIONTX_CODECONE = 2;\nAVMConstants.IMPORTTX = 3;\nAVMConstants.IMPORTTX_CODECONE = 3;\nAVMConstants.EXPORTTX = 4;\nAVMConstants.EXPORTTX_CODECONE = 4;\nAVMConstants.SECPCREDENTIAL = 9;\nAVMConstants.SECPCREDENTIAL_CODECONE = 65540;\nAVMConstants.NFTCREDENTIAL = 14;\nAVMConstants.NFTCREDENTIAL_CODECONE = 131076;\nAVMConstants.ASSETIDLEN = 32;\nAVMConstants.BLOCKCHAINIDLEN = 32;\nAVMConstants.SYMBOLMAXLEN = 4;\nAVMConstants.ASSETNAMELEN = 128;\nAVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFFSCxNQUFhLFlBQVk7O0FBQXpCLG9DQWdGQztBQS9FUSx3QkFBVyxHQUFXLENBQUMsQ0FBQTtBQUV2QixxQkFBUSxHQUFXLENBQUMsQ0FBQTtBQUVwQixvQkFBTyxHQUFXLENBQUMsQ0FBQTtBQUVuQiw2QkFBZ0IsR0FBVyxDQUFDLENBQUE7QUFFNUIsc0NBQXlCLEdBQVcsS0FBSyxDQUFBO0FBRXpDLDZCQUFnQixHQUFXLENBQUMsQ0FBQTtBQUU1QixzQ0FBeUIsR0FBVyxLQUFLLENBQUE7QUFFekMsNEJBQWUsR0FBVyxFQUFFLENBQUE7QUFFNUIscUNBQXdCLEdBQVcsTUFBTSxDQUFBO0FBRXpDLDRCQUFlLEdBQVcsRUFBRSxDQUFBO0FBRTVCLHFDQUF3QixHQUFXLE1BQU0sQ0FBQTtBQUV6Qyx3QkFBVyxHQUFXLENBQUMsQ0FBQTtBQUV2QixpQ0FBb0IsR0FBVyxLQUFLLENBQUE7QUFFcEMseUJBQVksR0FBVyxDQUFDLENBQUE7QUFFeEIsa0NBQXFCLEdBQVcsS0FBSyxDQUFBO0FBRXJDLHdCQUFXLEdBQVcsRUFBRSxDQUFBO0FBRXhCLGlDQUFvQixHQUFXLE1BQU0sQ0FBQTtBQUVyQyx3QkFBVyxHQUFXLEVBQUUsQ0FBQTtBQUV4QixpQ0FBb0IsR0FBVyxNQUFNLENBQUE7QUFFckMsbUJBQU0sR0FBVyxDQUFDLENBQUE7QUFFbEIsNEJBQWUsR0FBVyxDQUFDLENBQUE7QUFFM0IsbUJBQU0sR0FBVyxDQUFDLENBQUE7QUFFbEIsNEJBQWUsR0FBVyxDQUFDLENBQUE7QUFFM0IsMEJBQWEsR0FBVyxDQUFDLENBQUE7QUFFekIsbUNBQXNCLEdBQVcsQ0FBQyxDQUFBO0FBRWxDLHdCQUFXLEdBQVcsQ0FBQyxDQUFBO0FBRXZCLGlDQUFvQixHQUFXLENBQUMsQ0FBQTtBQUVoQyxxQkFBUSxHQUFXLENBQUMsQ0FBQTtBQUVwQiw4QkFBaUIsR0FBVyxDQUFDLENBQUE7QUFFN0IscUJBQVEsR0FBVyxDQUFDLENBQUE7QUFFcEIsOEJBQWlCLEdBQVcsQ0FBQyxDQUFBO0FBRTdCLDJCQUFjLEdBQVcsQ0FBQyxDQUFBO0FBRTFCLG9DQUF1QixHQUFXLEtBQUssQ0FBQTtBQUV2QywwQkFBYSxHQUFXLEVBQUUsQ0FBQTtBQUUxQixtQ0FBc0IsR0FBVyxNQUFNLENBQUE7QUFFdkMsdUJBQVUsR0FBVyxFQUFFLENBQUE7QUFFdkIsNEJBQWUsR0FBVyxFQUFFLENBQUE7QUFFNUIseUJBQVksR0FBVyxDQUFDLENBQUE7QUFFeEIseUJBQVksR0FBVyxHQUFHLENBQUE7QUFFMUIsMEJBQWEsR0FBVyxFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktQVZNLUNvbnN0YW50c1xuICovXG5cbmV4cG9ydCBjbGFzcyBBVk1Db25zdGFudHMge1xuICBzdGF0aWMgTEFURVNUQ09ERUM6IG51bWJlciA9IDBcblxuICBzdGF0aWMgU0VDUEZYSUQ6IG51bWJlciA9IDBcblxuICBzdGF0aWMgTkZURlhJRDogbnVtYmVyID0gMVxuXG4gIHN0YXRpYyBTRUNQTUlOVE9VVFBVVElEOiBudW1iZXIgPSA2XG5cbiAgc3RhdGljIFNFQ1BNSU5UT1VUUFVUSURfQ09ERUNPTkU6IG51bWJlciA9IDY1NTM3XG5cbiAgc3RhdGljIFNFQ1BYRkVST1VUUFVUSUQ6IG51bWJlciA9IDdcblxuICBzdGF0aWMgU0VDUFhGRVJPVVRQVVRJRF9DT0RFQ09ORTogbnVtYmVyID0gNjU1MzhcblxuICBzdGF0aWMgTkZUWEZFUk9VVFBVVElEOiBudW1iZXIgPSAxMVxuXG4gIHN0YXRpYyBORlRYRkVST1VUUFVUSURfQ09ERUNPTkU6IG51bWJlciA9IDEzMTA3M1xuXG4gIHN0YXRpYyBORlRNSU5UT1VUUFVUSUQ6IG51bWJlciA9IDEwXG5cbiAgc3RhdGljIE5GVE1JTlRPVVRQVVRJRF9DT0RFQ09ORTogbnVtYmVyID0gMTMxMDcyXG5cbiAgc3RhdGljIFNFQ1BJTlBVVElEOiBudW1iZXIgPSA1XG5cbiAgc3RhdGljIFNFQ1BJTlBVVElEX0NPREVDT05FOiBudW1iZXIgPSA2NTUzNlxuXG4gIHN0YXRpYyBTRUNQTUlOVE9QSUQ6IG51bWJlciA9IDhcblxuICBzdGF0aWMgU0VDUE1JTlRPUElEX0NPREVDT05FOiBudW1iZXIgPSA2NTUzOVxuXG4gIHN0YXRpYyBORlRNSU5UT1BJRDogbnVtYmVyID0gMTJcblxuICBzdGF0aWMgTkZUTUlOVE9QSURfQ09ERUNPTkU6IG51bWJlciA9IDEzMTA3NFxuXG4gIHN0YXRpYyBORlRYRkVST1BJRDogbnVtYmVyID0gMTNcblxuICBzdGF0aWMgTkZUWEZFUk9QSURfQ09ERUNPTkU6IG51bWJlciA9IDEzMTA3NVxuXG4gIHN0YXRpYyBWRVJURVg6IG51bWJlciA9IDBcblxuICBzdGF0aWMgVkVSVEVYX0NPREVDT05FOiBudW1iZXIgPSAwXG5cbiAgc3RhdGljIEJBU0VUWDogbnVtYmVyID0gMFxuXG4gIHN0YXRpYyBCQVNFVFhfQ09ERUNPTkU6IG51bWJlciA9IDBcblxuICBzdGF0aWMgQ1JFQVRFQVNTRVRUWDogbnVtYmVyID0gMVxuXG4gIHN0YXRpYyBDUkVBVEVBU1NFVFRYX0NPREVDT05FOiBudW1iZXIgPSAxXG5cbiAgc3RhdGljIE9QRVJBVElPTlRYOiBudW1iZXIgPSAyXG5cbiAgc3RhdGljIE9QRVJBVElPTlRYX0NPREVDT05FOiBudW1iZXIgPSAyXG5cbiAgc3RhdGljIElNUE9SVFRYOiBudW1iZXIgPSAzXG5cbiAgc3RhdGljIElNUE9SVFRYX0NPREVDT05FOiBudW1iZXIgPSAzXG5cbiAgc3RhdGljIEVYUE9SVFRYOiBudW1iZXIgPSA0XG5cbiAgc3RhdGljIEVYUE9SVFRYX0NPREVDT05FOiBudW1iZXIgPSA0XG5cbiAgc3RhdGljIFNFQ1BDUkVERU5USUFMOiBudW1iZXIgPSA5XG5cbiAgc3RhdGljIFNFQ1BDUkVERU5USUFMX0NPREVDT05FOiBudW1iZXIgPSA2NTU0MFxuXG4gIHN0YXRpYyBORlRDUkVERU5USUFMOiBudW1iZXIgPSAxNFxuXG4gIHN0YXRpYyBORlRDUkVERU5USUFMX0NPREVDT05FOiBudW1iZXIgPSAxMzEwNzZcblxuICBzdGF0aWMgQVNTRVRJRExFTjogbnVtYmVyID0gMzJcblxuICBzdGF0aWMgQkxPQ0tDSEFJTklETEVOOiBudW1iZXIgPSAzMlxuXG4gIHN0YXRpYyBTWU1CT0xNQVhMRU46IG51bWJlciA9IDRcblxuICBzdGF0aWMgQVNTRVROQU1FTEVOOiBudW1iZXIgPSAxMjhcblxuICBzdGF0aWMgQUREUkVTU0xFTkdUSDogbnVtYmVyID0gMjBcbn1cbiJdfQ==","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-KeyChain\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyChain = exports.KeyPair = void 0;\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst secp256k1_1 = require(\"../../common/secp256k1\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = utils_1.Serialization.getInstance();\n/**\n * Class for representing a private and public keypair on an AVM Chain.\n */\nclass KeyPair extends secp256k1_1.SECP256k1KeyPair {\n    clone() {\n        const newkp = new KeyPair(this.hrp, this.chainID);\n        newkp.importKey(bintools.copyFrom(this.getPrivateKey()));\n        return newkp;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyPair(args[0], args[1]);\n        }\n        return new KeyPair(this.hrp, this.chainID);\n    }\n}\nexports.KeyPair = KeyPair;\n/**\n * Class for representing a key chain in Avalanche.\n *\n * @typeparam KeyPair Class extending [[SECP256k1KeyChain]] which is used as the key in [[KeyChain]]\n */\nclass KeyChain extends secp256k1_1.SECP256k1KeyChain {\n    /**\n     * Returns instance of KeyChain.\n     */\n    constructor(hrp, chainID) {\n        super();\n        this.hrp = \"\";\n        this.chainID = \"\";\n        /**\n         * Makes a new key pair, returns the address.\n         *\n         * @returns The new key pair\n         */\n        this.makeKey = () => {\n            const keypair = new KeyPair(this.hrp, this.chainID);\n            this.addKey(keypair);\n            return keypair;\n        };\n        this.addKey = (newKey) => {\n            newKey.setChainID(this.chainID);\n            super.addKey(newKey);\n        };\n        /**\n         * Given a private key, makes a new key pair, returns the address.\n         *\n         * @param privk A {@link https://github.com/feross/buffer|Buffer}\n         * or cb58 serialized string representing the private key\n         *\n         * @returns The new key pair\n         */\n        this.importKey = (privk) => {\n            const keypair = new KeyPair(this.hrp, this.chainID);\n            let pk;\n            if (typeof privk === \"string\") {\n                pk = bintools.cb58Decode(privk.split(\"-\")[1]);\n            }\n            else {\n                pk = bintools.copyFrom(privk);\n            }\n            keypair.importKey(pk);\n            if (!(keypair.getAddress().toString(\"hex\") in this.keys)) {\n                this.addKey(keypair);\n            }\n            return keypair;\n        };\n        this.hrp = hrp;\n        this.chainID = chainID;\n    }\n    create(...args) {\n        if (args.length == 2) {\n            return new KeyChain(args[0], args[1]);\n        }\n        return new KeyChain(this.hrp, this.chainID);\n    }\n    clone() {\n        const newkc = new KeyChain(this.hrp, this.chainID);\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[`${k}`].clone());\n        }\n        return newkc;\n    }\n    union(kc) {\n        const newkc = kc.clone();\n        for (let k in this.keys) {\n            newkc.addKey(this.keys[`${k}`].clone());\n        }\n        return newkc;\n    }\n}\nexports.KeyChain = KeyChain;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Y2hhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9ldm0va2V5Y2hhaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7O0FBR0gsb0VBQTJDO0FBQzNDLHNEQUE0RTtBQUM1RSx1Q0FBMkQ7QUFFM0Q7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBYSxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBQ2pELE1BQU0sYUFBYSxHQUFrQixxQkFBYSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBRWhFOztHQUVHO0FBQ0gsTUFBYSxPQUFRLFNBQVEsNEJBQWdCO0lBQzNDLEtBQUs7UUFDSCxNQUFNLEtBQUssR0FBWSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUMxRCxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN4RCxPQUFPLEtBQWEsQ0FBQTtJQUN0QixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBVztRQUNuQixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBUyxDQUFBO1NBQzdDO1FBQ0QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQVMsQ0FBQTtJQUNwRCxDQUFDO0NBQ0Y7QUFiRCwwQkFhQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFhLFFBQVMsU0FBUSw2QkFBMEI7SUFrRXREOztPQUVHO0lBQ0gsWUFBWSxHQUFXLEVBQUUsT0FBZTtRQUN0QyxLQUFLLEVBQUUsQ0FBQTtRQXJFVCxRQUFHLEdBQVcsRUFBRSxD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KipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBUEktRVZNLUtleUNoYWluXG4gKi9cblxuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlci9cIlxuaW1wb3J0IEJpblRvb2xzIGZyb20gXCIuLi8uLi91dGlscy9iaW50b29sc1wiXG5pbXBvcnQgeyBTRUNQMjU2azFLZXlDaGFpbiwgU0VDUDI1NmsxS2V5UGFpciB9IGZyb20gXCIuLi8uLi9jb21tb24vc2VjcDI1NmsxXCJcbmltcG9ydCB7IFNlcmlhbGl6YXRpb24sIFNlcmlhbGl6ZWRUeXBlIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCJcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNvbnN0IGJpbnRvb2xzOiBCaW5Ub29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKClcbmNvbnN0IHNlcmlhbGl6YXRpb246IFNlcmlhbGl6YXRpb24gPSBTZXJpYWxpemF0aW9uLmdldEluc3RhbmNlKClcblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgcHJpdmF0ZSBhbmQgcHVibGljIGtleXBhaXIgb24gYW4gQVZNIENoYWluLlxuICovXG5leHBvcnQgY2xhc3MgS2V5UGFpciBleHRlbmRzIFNFQ1AyNTZrMUtleVBhaXIge1xuICBjbG9uZSgpOiB0aGlzIHtcbiAgICBjb25zdCBuZXdrcDogS2V5UGFpciA9IG5ldyBLZXlQYWlyKHRoaXMuaHJwLCB0aGlzLmNoYWluSUQpXG4gICAgbmV3a3AuaW1wb3J0S2V5KGJpbnRvb2xzLmNvcHlGcm9tKHRoaXMuZ2V0UHJpdmF0ZUtleSgpKSlcbiAgICByZXR1cm4gbmV3a3AgYXMgdGhpc1xuICB9XG5cbiAgY3JlYXRlKC4uLmFyZ3M6IGFueVtdKTogdGhpcyB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09IDIpIHtcbiAgICAgIHJldHVybiBuZXcgS2V5UGFpcihhcmdzWzBdLCBhcmdzWzFdKSBhcyB0aGlzXG4gICAgfVxuICAgIHJldHVybiBuZXcgS2V5UGFpcih0aGlzLmhycCwgdGhpcy5jaGFpbklEKSBhcyB0aGlzXG4gIH1cbn1cblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEga2V5IGNoYWluIGluIEF2YWxhbmNoZS5cbiAqXG4gKiBAdHlwZXBhcmFtIEtleVBhaXIgQ2xhc3MgZXh0ZW5kaW5nIFtbU0VDUDI1NmsxS2V5Q2hhaW5dXSB3aGljaCBpcyB1c2VkIGFzIHRoZSBrZXkgaW4gW1tLZXlDaGFpbl1dXG4gKi9cbmV4cG9ydCBjbGFzcyBLZXlDaGFpbiBleHRlbmRzIFNFQ1AyNTZrMUtleUNoYWluPEtleVBhaXI+IHtcbiAgaHJwOiBzdHJpbmcgPSBcIlwiXG4gIGNoYWluSUQ6IHN0cmluZyA9IFwiXCJcblxuICAvKipcbiAgICogTWFrZXMgYSBuZXcga2V5IHBhaXIsIHJldHVybnMgdGhlIGFkZHJlc3MuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBuZXcga2V5IHBhaXJcbiAgICovXG4gIG1ha2VLZXkgPSAoKTogS2V5UGFpciA9PiB7XG4gICAgY29uc3Qga2V5cGFpcjogS2V5UGFpciA9IG5ldyBLZXlQYWlyKHRoaXMuaHJwLCB0aGlzLmNoYWluSUQpXG4gICAgdGhpcy5hZGRLZXkoa2V5cGFpcilcbiAgICByZXR1cm4ga2V5cGFpclxuICB9XG5cbiAgYWRkS2V5ID0gKG5ld0tleTogS2V5UGFpcikgPT4ge1xuICAgIG5ld0tleS5zZXRDaGFpbklEKHRoaXMuY2hhaW5JRClcbiAgICBzdXBlci5hZGRLZXkobmV3S2V5KVxuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgcHJpdmF0ZSBrZXksIG1ha2VzIGEgbmV3IGtleSBwYWlyLCByZXR1cm5zIHRoZSBhZGRyZXNzLlxuICAgKlxuICAgKiBAcGFyYW0gcHJpdmsgQSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfVxuICAgKiBvciBjYjU4IHNlcmlhbGl6ZWQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcHJpdmF0ZSBrZXlcbiAgICpcbiAgICogQHJldHVybnMgVGhlIG5ldyBrZXkgcGFpclxuICAgKi9cbiAgaW1wb3J0S2V5ID0gKHByaXZrOiBCdWZmZXIgfCBzdHJpbmcpOiBLZXlQYWlyID0+IHtcbiAgICBjb25zdCBrZXlwYWlyOiBLZXlQYWlyID0gbmV3IEtleVBhaXIodGhpcy5ocnAsIHRoaXMuY2hhaW5JRClcbiAgICBsZXQgcGs6IEJ1ZmZlclxuICAgIGlmICh0eXBlb2YgcHJpdmsgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHBrID0gYmludG9vbHMuY2I1OERlY29kZShwcml2ay5zcGxpdChcIi1cIilbMV0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHBrID0gYmludG9vbHMuY29weUZyb20ocHJpdmspXG4gICAgfVxuICAgIGtleXBhaXIuaW1wb3J0S2V5KHBrKVxuICAgIGlmICghKGtleXBhaXIuZ2V0QWRkcmVzcygpLnRvU3RyaW5nKFwiaGV4XCIpIGluIHRoaXMua2V5cykpIHtcbiAgICAgIHRoaXMuYWRkS2V5KGtleXBhaXIpXG4gICAgfVxuICAgIHJldHVybiBrZXlwYWlyXG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczogYW55W10pOiB0aGlzIHtcbiAgICBpZiAoYXJncy5sZW5ndGggPT0gMikge1xuICAgICAgcmV0dXJuIG5ldyBLZXlDaGFpbihhcmdzWzBdLCBhcmdzWzFdKSBhcyB0aGlzXG4gICAgfVxuICAgIHJldHVybiBuZXcgS2V5Q2hhaW4odGhpcy5ocnAsIHRoaXMuY2hhaW5JRCkgYXMgdGhpc1xuICB9XG5cbiAgY2xvbmUoKTogdGhpcyB7XG4gICAgY29uc3QgbmV3a2M6IEtleUNoYWluID0gbmV3IEtleUNoYWluKHRoaXMuaHJwLCB0aGlzLmNoYWluSUQpXG4gICAgZm9yIChsZXQgayBpbiB0aGlzLmtleXMpIHtcbiAgICAgIG5ld2tjLmFkZEtleSh0aGlzLmtleXNbYCR7a31gXS5jbG9uZSgpKVxuICAgIH1cbiAgICByZXR1cm4gbmV3a2MgYXMgdGhpc1xuICB9XG5cbiAgdW5pb24oa2M6IHRoaXMpOiB0aGlzIHtcbiAgICBjb25zdCBuZXdrYzogS2V5Q2hhaW4gPSBrYy5jbG9uZSgpXG4gICAgZm9yIChsZXQgayBpbiB0aGlzLmtleXMpIHtcbiAgICAgIG5ld2tjLmFkZEtleSh0aGlzLmtleXNbYCR7a31gXS5jbG9uZSgpKVxuICAgIH1cbiAgICByZXR1cm4gbmV3a2MgYXMgdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgaW5zdGFuY2Ugb2YgS2V5Q2hhaW4uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihocnA6IHN0cmluZywgY2hhaW5JRDogc3RyaW5nKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuaHJwID0gaHJwXG4gICAgdGhpcy5jaGFpbklEID0gY2hhaW5JRFxuICB9XG59XG4iXX0=","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node's AuthAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AuthAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]]\n     * method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/auth\" as the path to rpc's baseURL\n     */\n    constructor(core, baseURL = \"/ext/auth\") {\n        super(core, baseURL);\n        /**\n         * Creates a new authorization token that grants access to one or more API endpoints.\n         *\n         * @param password This node's authorization token password, set through the CLI when the node was launched.\n         * @param endpoints A list of endpoints that will be accessible using the generated token. If there\"s an element that is \"*\", this token can reach any endpoint.\n         *\n         * @returns Returns a Promise string containing the authorization token.\n         */\n        this.newToken = (password, endpoints) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                password,\n                endpoints\n            };\n            const response = yield this.callMethod(\"auth.newToken\", params);\n            return response.data.result.token\n                ? response.data.result.token\n                : response.data.result;\n        });\n        /**\n         * Revokes an authorization token, removing all of its rights to access endpoints.\n         *\n         * @param password This node's authorization token password, set through the CLI when the node was launched.\n         * @param token An authorization token whose access should be revoked.\n         *\n         * @returns Returns a Promise boolean indicating if a token was successfully revoked.\n         */\n        this.revokeToken = (password, token) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                password,\n                token\n            };\n            const response = yield this.callMethod(\"auth.revokeToken\", params);\n            return response.data.result.success;\n        });\n        /**\n         * Change this node's authorization token password. **Any authorization tokens created under an old password will become invalid.**\n         *\n         * @param oldPassword This node's authorization token password, set through the CLI when the node was launched.\n         * @param newPassword A new password for this node's authorization token issuance.\n         *\n         * @returns Returns a Promise boolean indicating if the password was successfully changed.\n         */\n        this.changePassword = (oldPassword, newPassword) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                oldPassword,\n                newPassword\n            };\n            const response = yield this.callMethod(\"auth.changePassword\", params);\n            return response.data.result.success;\n        });\n    }\n}\nexports.AuthAPI = AuthAPI;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXV0aC9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBS0Esa0RBQThDO0FBUzlDOzs7Ozs7R0FNRztBQUNILE1BQWEsT0FBUSxTQUFRLGlCQUFPO0lBcUVsQzs7Ozs7O09BTUc7SUFDSCxZQUFZLElBQW1CLEVBQUUsVUFBa0IsV0FBVztRQUM1RCxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBNUV0Qjs7Ozs7OztXQU9HO1FBQ0gsYUFBUSxHQUFHLENBQ1QsUUFBZ0IsRUFDaEIsU0FBbUIsRUFDb0IsRUFBRTtZQUN6QyxNQUFNLE1BQU0sR0FBc0I7Z0JBQ2hDLFFBQVE7Z0JBQ1IsU0FBUzthQUNWLENBQUE7WUFDRCxNQUFNLFFBQVEsR0FBd0IsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUN6RCxlQUFlLEVBQ2YsTUFBTSxDQUNQLENBQUE7WUFDRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUs7Z0JBQy9CLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLO2dCQUM1QixDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUE7UUFDMUIsQ0FBQyxDQUFBLENBQUE7UUFFRDs7Ozs7OztXQU9HO1FBQ0gsZ0JBQVcsR0FBRyxDQUFPLFFBQWdCLEVBQUUsS0FBYSxFQUFvQixFQUFFO1lBQ3hFLE1BQU0sTUFBTSxHQUF5QjtnQkFDbkMsUUFBUTtnQkFDUixLQUFLO2FBQ04sQ0FBQTtZQUNELE1BQU0sUUFBUSxHQUF3QixNQUFNLElBQUksQ0FBQyxVQUFVLENBQ3pELGtCQUFrQixFQUNsQixNQUFNLENBQ1AsQ0FBQTtZQUNELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFBO1FBQ3JDLENBQUMsQ0FBQSxDQUFBO1FBRUQ7Ozs7Ozs7V0FPRztRQUNILG1CQUFjLEdBQUcsQ0FDZixXQUFtQixFQUNuQixXQUFtQixFQUNELEVBQUU7WUFDcEIsTUFBTSxNQUFNLEdBQTRCO2dCQUN0QyxXQUFXO2dCQUNYLFdBQVc7YUFDWixDQUFBO1lBQ0QsTUFBTSxRQUFRLEdBQXdCLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FDekQscUJBQXFCLEVBQ3JCLE1BQU0sQ0FDUCxDQUFBO1lBQ0QsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUE7UUFDckMsQ0FBQyxDQUFBLENBQUE7SUFXRCxDQUFDO0NBQ0Y7QUEvRUQsMEJBK0VDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUF1dGhcbiAqL1xuaW1wb3J0IEF2YWxhbmNoZUNvcmUgZnJvbSBcIi4uLy4uL2F2YWxhbmNoZVwiXG5pbXBvcnQgeyBKUlBDQVBJIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9qcnBjYXBpXCJcbmltcG9ydCB7IFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2FwaWJhc2VcIlxuaW1wb3J0IHsgRXJyb3JSZXNwb25zZU9iamVjdCB9IGZyb20gXCIuLi8uLi91dGlscy9lcnJvcnNcIlxuaW1wb3J0IHtcbiAgQ2hhbmdlUGFzc3dvcmRJbnRlcmZhY2UsXG4gIE5ld1Rva2VuSW50ZXJmYWNlLFxuICBSZXZva2VUb2tlbkludGVyZmFjZVxufSBmcm9tIFwiLi9pbnRlcmZhY2VzXCJcblxuLyoqXG4gKiBDbGFzcyBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhIG5vZGUncyBBdXRoQVBJLlxuICpcbiAqIEBjYXRlZ29yeSBSUENBUElzXG4gKlxuICogQHJlbWFya3MgVGhpcyBleHRlbmRzIHRoZSBbW0pSUENBUEldXSBjbGFzcy4gVGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGRpcmVjdGx5IGNhbGxlZC4gSW5zdGVhZCwgdXNlIHRoZSBbW0F2YWxhbmNoZS5hZGRBUEldXSBmdW5jdGlvbiB0byByZWdpc3RlciB0aGlzIGludGVyZmFjZSB3aXRoIEF2YWxhbmNoZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhBUEkgZXh0ZW5kcyBKUlBDQVBJIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgYXV0aG9yaXphdGlvbiB0b2tlbiB0aGF0IGdyYW50cyBhY2Nlc3MgdG8gb25lIG9yIG1vcmUgQVBJIGVuZHBvaW50cy5cbiAgICpcbiAgICogQHBhcmFtIHBhc3N3b3JkIFRoaXMgbm9kZSdzIGF1dGhvcml6YXRpb24gdG9rZW4gcGFzc3dvcmQsIHNldCB0aHJvdWdoIHRoZSBDTEkgd2hlbiB0aGUgbm9kZSB3YXMgbGF1bmNoZWQuXG4gICAqIEBwYXJhbSBlbmRwb2ludHMgQSBsaXN0IG9mIGVuZHBvaW50cyB0aGF0IHdpbGwgYmUgYWNjZXNzaWJsZSB1c2luZyB0aGUgZ2VuZXJhdGVkIHRva2VuLiBJZiB0aGVyZVwicyBhbiBlbGVtZW50IHRoYXQgaXMgXCIqXCIsIHRoaXMgdG9rZW4gY2FuIHJlYWNoIGFueSBlbmRwb2ludC5cbiAgICpcbiAgICogQHJldHVybnMgUmV0dXJucyBhIFByb21pc2Ugc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGF1dGhvcml6YXRpb24gdG9rZW4uXG4gICAqL1xuICBuZXdUb2tlbiA9IGFzeW5jIChcbiAgICBwYXNzd29yZDogc3RyaW5nLFxuICAgIGVuZHBvaW50czogc3RyaW5nW11cbiAgKTogUHJvbWlzZTxzdHJpbmcgfCBFcnJvclJlc3BvbnNlT2JqZWN0PiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOiBOZXdUb2tlbkludGVyZmFjZSA9IHtcbiAgICAgIHBhc3N3b3JkLFxuICAgICAgZW5kcG9pbnRzXG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFxuICAgICAgXCJhdXRoLm5ld1Rva2VuXCIsXG4gICAgICBwYXJhbXNcbiAgICApXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVzdWx0LnRva2VuXG4gICAgICA/IHJlc3BvbnNlLmRhdGEucmVzdWx0LnRva2VuXG4gICAgICA6IHJlc3BvbnNlLmRhdGEucmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogUmV2b2tlcyBhbiBhdXRob3JpemF0aW9uIHRva2VuLCByZW1vdmluZyBhbGwgb2YgaXRzIHJpZ2h0cyB0byBhY2Nlc3MgZW5kcG9pbnRzLlxuICAgKlxuICAgKiBAcGFyYW0gcGFzc3dvcmQgVGhpcyBub2RlJ3MgYXV0aG9yaXphdGlvbiB0b2tlbiBwYXNzd29yZCwgc2V0IHRocm91Z2ggdGhlIENMSSB3aGVuIHRoZSBub2RlIHdhcyBsYXVuY2hlZC5cbiAgICogQHBhcmFtIHRva2VuIEFuIGF1dGhvcml6YXRpb24gdG9rZW4gd2hvc2UgYWNjZXNzIHNob3VsZCBiZSByZXZva2VkLlxuICAgKlxuICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgUHJvbWlzZSBib29sZWFuIGluZGljYXRpbmcgaWYgYSB0b2tlbiB3YXMgc3VjY2Vzc2Z1bGx5IHJldm9rZWQuXG4gICAqL1xuICByZXZva2VUb2tlbiA9IGFzeW5jIChwYXNzd29yZDogc3RyaW5nLCB0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gICAgY29uc3QgcGFyYW1zOiBSZXZva2VUb2tlbkludGVyZmFjZSA9IHtcbiAgICAgIHBhc3N3b3JkLFxuICAgICAgdG9rZW5cbiAgICB9XG4gICAgY29uc3QgcmVzcG9uc2U6IFJlcXVlc3RSZXNwb25zZURhdGEgPSBhd2FpdCB0aGlzLmNhbGxNZXRob2QoXG4gICAgICBcImF1dGgucmV2b2tlVG9rZW5cIixcbiAgICAgIHBhcmFtc1xuICAgIClcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5yZXN1bHQuc3VjY2Vzc1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGlzIG5vZGUncyBhdXRob3JpemF0aW9uIHRva2VuIHBhc3N3b3JkLiAqKkFueSBhdXRob3JpemF0aW9uIHRva2VucyBjcmVhdGVkIHVuZGVyIGFuIG9sZCBwYXNzd29yZCB3aWxsIGJlY29tZSBpbnZhbGlkLioqXG4gICAqXG4gICAqIEBwYXJhbSBvbGRQYXNzd29yZCBUaGlzIG5vZGUncyBhdXRob3JpemF0aW9uIHRva2VuIHBhc3N3b3JkLCBzZXQgdGhyb3VnaCB0aGUgQ0xJIHdoZW4gdGhlIG5vZGUgd2FzIGxhdW5jaGVkLlxuICAgKiBAcGFyYW0gbmV3UGFzc3dvcmQgQSBuZXcgcGFzc3dvcmQgZm9yIHRoaXMgbm9kZSdzIGF1dGhvcml6YXRpb24gdG9rZW4gaXNzdWFuY2UuXG4gICAqXG4gICAqIEByZXR1cm5zIFJldHVybnMgYSBQcm9taXNlIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgcGFzc3dvcmQgd2FzIHN1Y2Nlc3NmdWxseSBjaGFuZ2VkLlxuICAgKi9cbiAgY2hhbmdlUGFzc3dvcmQgPSBhc3luYyAoXG4gICAgb2xkUGFzc3dvcmQ6IHN0cmluZyxcbiAgICBuZXdQYXNzd29yZDogc3RyaW5nXG4gICk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHBhcmFtczogQ2hhbmdlUGFzc3dvcmRJbnRlcmZhY2UgPSB7XG4gICAgICBvbGRQYXNzd29yZCxcbiAgICAgIG5ld1Bhc3N3b3JkXG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlOiBSZXF1ZXN0UmVzcG9uc2VEYXRhID0gYXdhaXQgdGhpcy5jYWxsTWV0aG9kKFxuICAgICAgXCJhdXRoLmNoYW5nZVBhc3N3b3JkXCIsXG4gICAgICBwYXJhbXNcbiAgICApXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEucmVzdWx0LnN1Y2Nlc3NcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGNsYXNzIHNob3VsZCBub3QgYmUgaW5zdGFudGlhdGVkIGRpcmVjdGx5LiBJbnN0ZWFkIHVzZSB0aGUgW1tBdmFsYW5jaGUuYWRkQVBJXV1cbiAgICogbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0gY29yZSBBIHJlZmVyZW5jZSB0byB0aGUgQXZhbGFuY2hlIGNsYXNzXG4gICAqIEBwYXJhbSBiYXNlVVJMIERlZmF1bHRzIHRvIHRoZSBzdHJpbmcgXCIvZXh0L2F1dGhcIiBhcyB0aGUgcGF0aCB0byBycGMncyBiYXNlVVJMXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb3JlOiBBdmFsYW5jaGVDb3JlLCBiYXNlVVJMOiBzdHJpbmcgPSBcIi9leHQvYXV0aFwiKSB7XG4gICAgc3VwZXIoY29yZSwgYmFzZVVSTClcbiAgfVxufVxuIl19","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdXRoL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9hcGlcIlxuIl19","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NFTTransferOutput = exports.NFTMintOutput = exports.SECPMintOutput = exports.SECPTransferOutput = exports.NFTOutput = exports.AmountOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-Outputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputid A number representing the inputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nconst SelectOutputClass = (outputid, ...args) => {\n    if (outputid === constants_1.AVMConstants.SECPXFEROUTPUTID ||\n        outputid === constants_1.AVMConstants.SECPXFEROUTPUTID_CODECONE) {\n        return new SECPTransferOutput(...args);\n    }\n    else if (outputid === constants_1.AVMConstants.SECPMINTOUTPUTID ||\n        outputid === constants_1.AVMConstants.SECPMINTOUTPUTID_CODECONE) {\n        return new SECPMintOutput(...args);\n    }\n    else if (outputid === constants_1.AVMConstants.NFTMINTOUTPUTID ||\n        outputid === constants_1.AVMConstants.NFTMINTOUTPUTID_CODECONE) {\n        return new NFTMintOutput(...args);\n    }\n    else if (outputid === constants_1.AVMConstants.NFTXFEROUTPUTID ||\n        outputid === constants_1.AVMConstants.NFTXFEROUTPUTID_CODECONE) {\n        return new NFTTransferOutput(...args);\n    }\n    throw new errors_1.OutputIdError(\"Error - SelectOutputClass: unknown outputid \" + outputid);\n};\nexports.SelectOutputClass = SelectOutputClass;\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = (0, exports.SelectOutputClass)(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.AVMConstants.ASSETIDLEN);\n        offset += constants_1.AVMConstants.ASSETIDLEN;\n        const outputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.output = (0, exports.SelectOutputClass)(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return (0, exports.SelectOutputClass)(id, ...args);\n    }\n}\nexports.AmountOutput = AmountOutput;\nclass NFTOutput extends output_1.BaseNFTOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"NFTOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return (0, exports.SelectOutputClass)(id, ...args);\n    }\n}\nexports.NFTOutput = NFTOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPTransferOutput extends AmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferOutput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.SECPXFEROUTPUTID\n            : constants_1.AVMConstants.SECPXFEROUTPUTID_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPTransferOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.SECPXFEROUTPUTID\n                : constants_1.AVMConstants.SECPXFEROUTPUTID_CODECONE;\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferOutput = SECPTransferOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPMintOutput extends output_1.Output {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPMintOutput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.SECPMINTOUTPUTID\n            : constants_1.AVMConstants.SECPMINTOUTPUTID_CODECONE;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - SECPMintOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.SECPMINTOUTPUTID\n                : constants_1.AVMConstants.SECPMINTOUTPUTID_CODECONE;\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    create(...args) {\n        return new SECPMintOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n    select(id, ...args) {\n        return (0, exports.SelectOutputClass)(id, ...args);\n    }\n}\nexports.SECPMintOutput = SECPMintOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an NFT Mint and uses secp256k1 signature scheme.\n */\nclass NFTMintOutput extends NFTOutput {\n    /**\n     * An [[Output]] class which contains an NFT mint for an assetID.\n     *\n     * @param groupID A number specifies the group this NFT is issued to\n     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing  addresses\n     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n     * @param threshold A number representing the the threshold number of signers required to sign the transaction\n  \n     */\n    constructor(groupID = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this._typeName = \"NFTMintOutput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.NFTMINTOUTPUTID\n            : constants_1.AVMConstants.NFTMINTOUTPUTID_CODECONE;\n        if (typeof groupID !== \"undefined\") {\n            this.groupID.writeUInt32BE(groupID, 0);\n        }\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTMintOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.NFTMINTOUTPUTID\n                : constants_1.AVMConstants.NFTMINTOUTPUTID_CODECONE;\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOutput]] and returns the size of the output.\n     */\n    fromBuffer(utxobuff, offset = 0) {\n        this.groupID = bintools.copyFrom(utxobuff, offset, offset + 4);\n        offset += 4;\n        return super.fromBuffer(utxobuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[NFTMintOutput]] instance.\n     */\n    toBuffer() {\n        let superbuff = super.toBuffer();\n        let bsize = this.groupID.length + superbuff.length;\n        let barr = [this.groupID, superbuff];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    create(...args) {\n        return new NFTMintOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.NFTMintOutput = NFTMintOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an NFT and uses secp256k1 signature scheme.\n */\nclass NFTTransferOutput extends NFTOutput {\n    /**\n       * An [[Output]] class which contains an NFT on an assetID.\n       *\n       * @param groupID A number representing the amount in the output\n       * @param payload A {@link https://github.com/feross/buffer|Buffer} of max length 1024\n       * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses\n       * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime\n       * @param threshold A number representing the the threshold number of signers required to sign the transaction\n  \n       */\n    constructor(groupID = undefined, payload = undefined, addresses = undefined, locktime = undefined, threshold = undefined) {\n        super(addresses, locktime, threshold);\n        this._typeName = \"NFTTransferOutput\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0\n            ? constants_1.AVMConstants.NFTXFEROUTPUTID\n            : constants_1.AVMConstants.NFTXFEROUTPUTID_CODECONE;\n        this.sizePayload = buffer_1.Buffer.alloc(4);\n        /**\n         * Returns the payload as a {@link https://github.com/feross/buffer|Buffer} with content only.\n         */\n        this.getPayload = () => bintools.copyFrom(this.payload);\n        /**\n         * Returns the payload as a {@link https://github.com/feross/buffer|Buffer} with length of payload prepended.\n         */\n        this.getPayloadBuffer = () => buffer_1.Buffer.concat([\n            bintools.copyFrom(this.sizePayload),\n            bintools.copyFrom(this.payload)\n        ]);\n        if (typeof groupID !== \"undefined\" && typeof payload !== \"undefined\") {\n            this.groupID.writeUInt32BE(groupID, 0);\n            this.sizePayload.writeUInt32BE(payload.length, 0);\n            this.payload = bintools.copyFrom(payload, 0, payload.length);\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { payload: serialization.encoder(this.payload, encoding, \"Buffer\", \"hex\", this.payload.length) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.payload = serialization.decoder(fields[\"payload\"], encoding, \"hex\", \"Buffer\");\n        this.sizePayload = buffer_1.Buffer.alloc(4);\n        this.sizePayload.writeUInt32BE(this.payload.length, 0);\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - NFTTransferOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.NFTXFEROUTPUTID\n                : constants_1.AVMConstants.NFTXFEROUTPUTID_CODECONE;\n    }\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    /**\n     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOutput]] and returns the size of the output.\n     */\n    fromBuffer(utxobuff, offset = 0) {\n        this.groupID = bintools.copyFrom(utxobuff, offset, offset + 4);\n        offset += 4;\n        this.sizePayload = bintools.copyFrom(utxobuff, offset, offset + 4);\n        let psize = this.sizePayload.readUInt32BE(0);\n        offset += 4;\n        this.payload = bintools.copyFrom(utxobuff, offset, offset + psize);\n        offset = offset + psize;\n        return super.fromBuffer(utxobuff, offset);\n    }\n    /**\n     * Returns the buffer representing the [[NFTTransferOutput]] instance.\n     */\n    toBuffer() {\n        const superbuff = super.toBuffer();\n        const bsize = this.groupID.length +\n            this.sizePayload.length +\n            this.payload.length +\n            superbuff.length;\n        this.sizePayload.writeUInt32BE(this.payload.length, 0);\n        const barr = [\n            this.groupID,\n            this.sizePayload,\n            this.payload,\n            superbuff\n        ];\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    create(...args) {\n        return new NFTTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.NFTTransferOutput = NFTTransferOutput;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-Constants\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMConstants = void 0;\nclass EVMConstants {\n}\nexports.EVMConstants = EVMConstants;\nEVMConstants.SECPCREDENTIAL = 9;\nEVMConstants.IMPORTTX = 0;\nEVMConstants.EXPORTTX = 1;\nEVMConstants.SECPINPUTID = 5;\nEVMConstants.ASSETIDLEN = 32;\nEVMConstants.SECPXFEROUTPUTID = 7;\nEVMConstants.LATESTCODEC = 0;\nEVMConstants.ADDRESSLENGTH = 20;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvZXZtL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFJSCxNQUFhLFlBQVk7O0FBQXpCLG9DQWdCQztBQWZRLDJCQUFjLEdBQVcsQ0FBQyxDQUFBO0FBRTFCLHFCQUFRLEdBQVcsQ0FBQyxDQUFBO0FBRXBCLHFCQUFRLEdBQVcsQ0FBQyxDQUFBO0FBRXBCLHdCQUFXLEdBQVcsQ0FBQyxDQUFBO0FBRXZCLHVCQUFVLEdBQVcsRUFBRSxDQUFBO0FBRXZCLDZCQUFnQixHQUFXLENBQUMsQ0FBQTtBQUU1Qix3QkFBVyxHQUFXLENBQUMsQ0FBQTtBQUV2QiwwQkFBYSxHQUFXLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1FVk0tQ29uc3RhbnRzXG4gKi9cblxuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXG5cbmV4cG9ydCBjbGFzcyBFVk1Db25zdGFudHMge1xuICBzdGF0aWMgU0VDUENSRURFTlRJQUw6IG51bWJlciA9IDlcblxuICBzdGF0aWMgSU1QT1JUVFg6IG51bWJlciA9IDBcblxuICBzdGF0aWMgRVhQT1JUVFg6IG51bWJlciA9IDFcblxuICBzdGF0aWMgU0VDUElOUFVUSUQ6IG51bWJlciA9IDVcblxuICBzdGF0aWMgQVNTRVRJRExFTjogbnVtYmVyID0gMzJcblxuICBzdGF0aWMgU0VDUFhGRVJPVVRQVVRJRDogbnVtYmVyID0gN1xuXG4gIHN0YXRpYyBMQVRFU1RDT0RFQzogbnVtYmVyID0gMFxuXG4gIHN0YXRpYyBBRERSRVNTTEVOR1RIOiBudW1iZXIgPSAyMFxufVxuIl19","\"use strict\";\n/**\n * @packageDocumentation\n * @module EVM-Interfaces\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGlzL2V2bS9pbnRlcmZhY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0ciLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBFVk0tSW50ZXJmYWNlc1xuICovXG5cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXIvXCJcbmltcG9ydCB7IEluZGV4LCBDcmVkc0ludGVyZmFjZSB9IGZyb20gXCIuLi8uLi9jb21tb25cIlxuXG5leHBvcnQgaW50ZXJmYWNlIEdldEFzc2V0RGVzY3JpcHRpb25QYXJhbXMge1xuICBhc3NldElEOiBCdWZmZXIgfCBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRBdG9taWNUeFN0YXR1c1BhcmFtcyB7XG4gIHR4SUQ6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldEF0b21pY1R4UGFyYW1zIHtcbiAgdHhJRDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXhwb3J0QVZBWFBhcmFtcyBleHRlbmRzIENyZWRzSW50ZXJmYWNlIHtcbiAgdG86IHN0cmluZ1xuICBhbW91bnQ6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4cG9ydFBhcmFtcyBleHRlbmRzIEV4cG9ydEFWQVhQYXJhbXMge1xuICBhc3NldElEOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRVVFhPc1BhcmFtcyB7XG4gIGFkZHJlc3Nlczogc3RyaW5nW10gfCBzdHJpbmdcbiAgbGltaXQ6IG51bWJlclxuICBzb3VyY2VDaGFpbj86IHN0cmluZ1xuICBzdGFydEluZGV4PzogSW5kZXhcbiAgZW5jb2Rpbmc/OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbXBvcnRBVkFYUGFyYW1zIGV4dGVuZHMgQ3JlZHNJbnRlcmZhY2Uge1xuICB0bzogc3RyaW5nXG4gIHNvdXJjZUNoYWluOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbXBvcnRQYXJhbXMgZXh0ZW5kcyBJbXBvcnRBVkFYUGFyYW1zIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1wb3J0S2V5UGFyYW1zIGV4dGVuZHMgQ3JlZHNJbnRlcmZhY2Uge1xuICBwcml2YXRlS2V5OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFeHBvcnRLZXlQYXJhbXMgZXh0ZW5kcyBDcmVkc0ludGVyZmFjZSB7XG4gIGFkZHJlc3M6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZUtleVBhaXJSZXNwb25zZSB7XG4gIGFkZHJlc3M6IHN0cmluZ1xuICBwdWJsaWNLZXk6IHN0cmluZ1xuICBwcml2YXRlS2V5OiBzdHJpbmdcbn1cbiJdfQ==","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-ExportTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst basetx_1 = require(\"./basetx\");\nconst credentials_1 = require(\"./credentials\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst inputs_1 = require(\"./inputs\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst outputs_1 = require(\"./outputs\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\nclass ExportTx extends basetx_1.EVMBaseTx {\n    /**\n     * Class representing a ExportTx.\n     *\n     * @param networkID Optional networkID\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param destinationChain Optional destinationChain, default Buffer.alloc(32, 16)\n     * @param inputs Optional array of the [[EVMInputs]]s\n     * @param exportedOutputs Optional array of the [[EVMOutputs]]s\n     */\n    constructor(networkID = undefined, blockchainID = buffer_1.Buffer.alloc(32, 16), destinationChain = buffer_1.Buffer.alloc(32, 16), inputs = undefined, exportedOutputs = undefined) {\n        super(networkID, blockchainID);\n        this._typeName = \"ExportTx\";\n        this._typeID = constants_1.EVMConstants.EXPORTTX;\n        this.destinationChain = buffer_1.Buffer.alloc(32);\n        this.numInputs = buffer_1.Buffer.alloc(4);\n        this.inputs = [];\n        this.numExportedOutputs = buffer_1.Buffer.alloc(4);\n        this.exportedOutputs = [];\n        this.destinationChain = destinationChain;\n        if (typeof inputs !== \"undefined\" && Array.isArray(inputs)) {\n            inputs.forEach((input) => {\n                if (!(input instanceof inputs_1.EVMInput)) {\n                    throw new errors_1.EVMInputError(\"Error - ExportTx.constructor: invalid EVMInput in array parameter 'inputs'\");\n                }\n            });\n            if (inputs.length > 1) {\n                inputs = inputs.sort(inputs_1.EVMInput.comparator());\n            }\n            this.inputs = inputs;\n        }\n        if (typeof exportedOutputs !== \"undefined\" &&\n            Array.isArray(exportedOutputs)) {\n            exportedOutputs.forEach((exportedOutput) => {\n                if (!(exportedOutput instanceof outputs_1.TransferableOutput)) {\n                    throw new errors_1.TransferableOutputError(\"Error - ExportTx.constructor: TransferableOutput EVMInput in array parameter 'exportedOutputs'\");\n                }\n            });\n            this.exportedOutputs = exportedOutputs;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { destinationChain: serializer.encoder(this.destinationChain, encoding, \"Buffer\", \"cb58\"), exportedOutputs: this.exportedOutputs.map((i) => i.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.destinationChain = serializer.decoder(fields[\"destinationChain\"], encoding, \"cb58\", \"Buffer\", 32);\n        this.exportedOutputs = fields[\"exportedOutputs\"].map((i) => {\n            let eo = new outputs_1.TransferableOutput();\n            eo.deserialize(i, encoding);\n            return eo;\n        });\n        this.numExportedOutputs = buffer_1.Buffer.alloc(4);\n        this.numExportedOutputs.writeUInt32BE(this.exportedOutputs.length, 0);\n    }\n    /**\n     * Returns the destinationChain as a {@link https://github.com/feross/buffer|Buffer}\n     */\n    getDestinationChain() {\n        return this.destinationChain;\n    }\n    /**\n     * Returns the inputs as an array of [[EVMInputs]]\n     */\n    getInputs() {\n        return this.inputs;\n    }\n    /**\n     * Returns the outs as an array of [[EVMOutputs]]\n     */\n    getExportedOutputs() {\n        return this.exportedOutputs;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n     */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numInputs.writeUInt32BE(this.inputs.length, 0);\n        this.numExportedOutputs.writeUInt32BE(this.exportedOutputs.length, 0);\n        let barr = [\n            super.toBuffer(),\n            this.destinationChain,\n            this.numInputs\n        ];\n        let bsize = super.toBuffer().length +\n            this.destinationChain.length +\n            this.numInputs.length;\n        this.inputs.forEach((importIn) => {\n            bsize += importIn.toBuffer().length;\n            barr.push(importIn.toBuffer());\n        });\n        bsize += this.numExportedOutputs.length;\n        barr.push(this.numExportedOutputs);\n        this.exportedOutputs.forEach((out) => {\n            bsize += out.toBuffer().length;\n            barr.push(out.toBuffer());\n        });\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n    /**\n     * Decodes the [[ExportTx]] as a {@link https://github.com/feross/buffer|Buffer} and returns the size.\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numInputs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numInputs = this.numInputs.readUInt32BE(0);\n        for (let i = 0; i < numInputs; i++) {\n            const anIn = new inputs_1.EVMInput();\n            offset = anIn.fromBuffer(bytes, offset);\n            this.inputs.push(anIn);\n        }\n        this.numExportedOutputs = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numExportedOutputs = this.numExportedOutputs.readUInt32BE(0);\n        for (let i = 0; i < numExportedOutputs; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportedOutputs.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a base-58 representation of the [[ExportTx]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const creds = super.sign(msg, kc);\n        this.inputs.forEach((input) => {\n            const cred = (0, credentials_1.SelectCredentialClass)(input.getCredentialID());\n            const sigidxs = input.getSigIdxs();\n            sigidxs.forEach((sigidx) => {\n                const keypair = kc.getKey(sigidx.getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            });\n            creds.push(cred);\n        });\n        return creds;\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-AVM-MinterSet\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MinterSet = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst serialization_1 = require(\"../../utils/serialization\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst decimalString = \"decimalString\";\nconst cb58 = \"cb58\";\nconst num = \"number\";\nconst buffer = \"Buffer\";\n/**\n * Class for representing a threshold and set of minting addresses in Avalanche.\n *\n * @typeparam MinterSet including a threshold and array of addresses\n */\nclass MinterSet extends serialization_1.Serializable {\n    /**\n     *\n     * @param threshold The number of signatures required to mint more of an asset by signing a minting transaction\n     * @param minters Array of addresss which are authorized to sign a minting transaction\n     */\n    constructor(threshold = 1, minters = []) {\n        super();\n        this._typeName = \"MinterSet\";\n        this._typeID = undefined;\n        this.minters = [];\n        /**\n         * Returns the threshold.\n         */\n        this.getThreshold = () => {\n            return this.threshold;\n        };\n        /**\n         * Returns the minters.\n         */\n        this.getMinters = () => {\n            return this.minters;\n        };\n        this._cleanAddresses = (addresses) => {\n            let addrs = [];\n            for (let i = 0; i < addresses.length; i++) {\n                if (typeof addresses[`${i}`] === \"string\") {\n                    addrs.push(bintools.stringToAddress(addresses[`${i}`]));\n                }\n                else if (addresses[`${i}`] instanceof buffer_1.Buffer) {\n                    addrs.push(addresses[`${i}`]);\n                }\n            }\n            return addrs;\n        };\n        this.threshold = threshold;\n        this.minters = this._cleanAddresses(minters);\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { threshold: serialization.encoder(this.threshold, encoding, num, decimalString, 4), minters: this.minters.map((m) => serialization.encoder(m, encoding, buffer, cb58, 20)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.threshold = serialization.decoder(fields[\"threshold\"], encoding, decimalString, num, 4);\n        this.minters = fields[\"minters\"].map((m) => serialization.decoder(m, encoding, cb58, buffer, 20));\n    }\n}\nexports.MinterSet = MinterSet;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWludGVyc2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvYXZtL21pbnRlcnNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCxvQ0FBZ0M7QUFDaEMsb0VBQTJDO0FBQzNDLDZEQUtrQztBQUVsQzs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFhLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUE7QUFDakQsTUFBTSxhQUFhLEdBQWtCLDZCQUFhLENBQUMsV0FBVyxFQUFFLENBQUE7QUFDaEUsTUFBTSxhQUFhLEdBQW1CLGVBQWUsQ0FBQTtBQUNyRCxNQUFNLElBQUksR0FBbUIsTUFBTSxDQUFBO0FBQ25DLE1BQU0sR0FBRyxHQUFtQixRQUFRLENBQUE7QUFDcEMsTUFBTSxNQUFNLEdBQW1CLFFBQVEsQ0FBQTtBQUV2Qzs7OztHQUlHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsNEJBQVk7SUErRHpDOzs7O09BSUc7SUFDSCxZQUFZLFlBQW9CLENBQUMsRUFBRSxVQUErQixFQUFFO1FBQ2xFLEtBQUssRUFBRSxDQUFBO1FBcEVDLGNBQVMsR0FBRyxXQUFXLENBQUE7UUFDdkIsWUFBTyxHQUFHLFNBQVMsQ0FBQTtRQWlDbkIsWUFBTyxHQUFhLEVBQUUsQ0FBQTtRQUVoQzs7V0FFRztRQUNILGlCQUFZLEdBQUcsR0FBVyxFQUFFO1lBQzFCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQTtRQUN2QixDQUFDLENBQUE7UUFFRDs7V0FFRztRQUNILGVBQVUsR0FBRyxHQUFhLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFBO1FBQ3JCLENBQUMsQ0FBQTtRQUVTLG9CQUFlLEdBQUcsQ0FBQyxTQUE4QixFQUFZLEVBQUU7WUFDdkUsSUFBSSxLQUFLLEdBQWEsRUFBRSxDQUFBO1lBQ3hCLEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNqRCxJQUFJLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxRQUFRLEVBQUU7b0JBQ3pDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBVyxDQUFDLENBQUMsQ0FBQTtpQkFDbEU7cUJBQU0sSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxZQUFZLGVBQU0sRUFBRTtvQkFDOUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBVyxDQUFDLENBQUE7aUJBQ3hDO2FBQ0Y7WUFDRCxPQUFPLEtBQUssQ0FBQTtRQUNkLENBQUMsQ0FBQTtRQVNDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1FBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0lBcEVELFNBQVMsQ0FBQyxXQUErQixLQUFLO1FBQzVDLE1BQU0sTUFBTSxHQUFXLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDaEQsdUNBQ0ssTUFBTSxLQUNULFNBQVMsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUM5QixJQUFJLENBQUMsU0FBUyxFQUNkLFFBQVEsRUFDUixHQUFHLEVBQ0gsYUFBYSxFQUNiLENBQUMsQ0FDRixFQUNELE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQzlCLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUNyRCxJQUNGO0lBQ0gsQ0FBQztJQUNELFdBQVcsQ0FBQyxNQUFjLEVBQUUsV0FBK0IsS0FBSztRQUM5RCxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQ3BDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFDbkIsUUFBUSxFQUNSLGFBQWEsRUFDYixHQUFHLEVBQ0gsQ0FBQyxDQUNGLENBQUE7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUNqRCxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FDckQsQ0FBQTtJQUNILENBQUM7Q0F5Q0Y7QUF6RUQsOEJBeUVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUFWTS1NaW50ZXJTZXRcbiAqL1xuXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5pbXBvcnQgQmluVG9vbHMgZnJvbSBcIi4uLy4uL3V0aWxzL2JpbnRvb2xzXCJcbmltcG9ydCB7XG4gIFNlcmlhbGl6YWJsZSxcbiAgU2VyaWFsaXphdGlvbixcbiAgU2VyaWFsaXplZEVuY29kaW5nLFxuICBTZXJpYWxpemVkVHlwZVxufSBmcm9tIFwiLi4vLi4vdXRpbHMvc2VyaWFsaXphdGlvblwiXG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29sczogQmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpXG5jb25zdCBzZXJpYWxpemF0aW9uOiBTZXJpYWxpemF0aW9uID0gU2VyaWFsaXphdGlvbi5nZXRJbnN0YW5jZSgpXG5jb25zdCBkZWNpbWFsU3RyaW5nOiBTZXJpYWxpemVkVHlwZSA9IFwiZGVjaW1hbFN0cmluZ1wiXG5jb25zdCBjYjU4OiBTZXJpYWxpemVkVHlwZSA9IFwiY2I1OFwiXG5jb25zdCBudW06IFNlcmlhbGl6ZWRUeXBlID0gXCJudW1iZXJcIlxuY29uc3QgYnVmZmVyOiBTZXJpYWxpemVkVHlwZSA9IFwiQnVmZmVyXCJcblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgdGhyZXNob2xkIGFuZCBzZXQgb2YgbWludGluZyBhZGRyZXNzZXMgaW4gQXZhbGFuY2hlLlxuICpcbiAqIEB0eXBlcGFyYW0gTWludGVyU2V0IGluY2x1ZGluZyBhIHRocmVzaG9sZCBhbmQgYXJyYXkgb2YgYWRkcmVzc2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBNaW50ZXJTZXQgZXh0ZW5kcyBTZXJpYWxpemFibGUge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJNaW50ZXJTZXRcIlxuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHVuZGVmaW5lZFxuXG4gIHNlcmlhbGl6ZShlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIik6IG9iamVjdCB7XG4gICAgY29uc3QgZmllbGRzOiBvYmplY3QgPSBzdXBlci5zZXJpYWxpemUoZW5jb2RpbmcpXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmZpZWxkcyxcbiAgICAgIHRocmVzaG9sZDogc2VyaWFsaXphdGlvbi5lbmNvZGVyKFxuICAgICAgICB0aGlzLnRocmVzaG9sZCxcbiAgICAgICAgZW5jb2RpbmcsXG4gICAgICAgIG51bSxcbiAgICAgICAgZGVjaW1hbFN0cmluZyxcbiAgICAgICAgNFxuICAgICAgKSxcbiAgICAgIG1pbnRlcnM6IHRoaXMubWludGVycy5tYXAoKG0pID0+XG4gICAgICAgIHNlcmlhbGl6YXRpb24uZW5jb2RlcihtLCBlbmNvZGluZywgYnVmZmVyLCBjYjU4LCAyMClcbiAgICAgIClcbiAgICB9XG4gIH1cbiAgZGVzZXJpYWxpemUoZmllbGRzOiBvYmplY3QsIGVuY29kaW5nOiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiKSB7XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZmllbGRzLCBlbmNvZGluZylcbiAgICB0aGlzLnRocmVzaG9sZCA9IHNlcmlhbGl6YXRpb24uZGVjb2RlcihcbiAgICAgIGZpZWxkc1tcInRocmVzaG9sZFwiXSxcbiAgICAgIGVuY29kaW5nLFxuICAgICAgZGVjaW1hbFN0cmluZyxcbiAgICAgIG51bSxcbiAgICAgIDRcbiAgICApXG4gICAgdGhpcy5taW50ZXJzID0gZmllbGRzW1wibWludGVyc1wiXS5tYXAoKG06IHN0cmluZykgPT5cbiAgICAgIHNlcmlhbGl6YXRpb24uZGVjb2RlcihtLCBlbmNvZGluZywgY2I1OCwgYnVmZmVyLCAyMClcbiAgICApXG4gIH1cblxuICBwcm90ZWN0ZWQgdGhyZXNob2xkOiBudW1iZXJcbiAgcHJvdGVjdGVkIG1pbnRlcnM6IEJ1ZmZlcltdID0gW11cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdGhyZXNob2xkLlxuICAgKi9cbiAgZ2V0VGhyZXNob2xkID0gKCk6IG51bWJlciA9PiB7XG4gICAgcmV0dXJuIHRoaXMudGhyZXNob2xkXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbWludGVycy5cbiAgICovXG4gIGdldE1pbnRlcnMgPSAoKTogQnVmZmVyW10gPT4ge1xuICAgIHJldHVybiB0aGlzLm1pbnRlcnNcbiAgfVxuXG4gIHByb3RlY3RlZCBfY2xlYW5BZGRyZXNzZXMgPSAoYWRkcmVzc2VzOiBzdHJpbmdbXSB8IEJ1ZmZlcltdKTogQnVmZmVyW10gPT4ge1xuICAgIGxldCBhZGRyczogQnVmZmVyW10gPSBbXVxuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBhZGRyZXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0eXBlb2YgYWRkcmVzc2VzW2Ake2l9YF0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgYWRkcnMucHVzaChiaW50b29scy5zdHJpbmdUb0FkZHJlc3MoYWRkcmVzc2VzW2Ake2l9YF0gYXMgc3RyaW5nKSlcbiAgICAgIH0gZWxzZSBpZiAoYWRkcmVzc2VzW2Ake2l9YF0gaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgICAgYWRkcnMucHVzaChhZGRyZXNzZXNbYCR7aX1gXSBhcyBCdWZmZXIpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhZGRyc1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB0aHJlc2hvbGQgVGhlIG51bWJlciBvZiBzaWduYXR1cmVzIHJlcXVpcmVkIHRvIG1pbnQgbW9yZSBvZiBhbiBhc3NldCBieSBzaWduaW5nIGEgbWludGluZyB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0gbWludGVycyBBcnJheSBvZiBhZGRyZXNzcyB3aGljaCBhcmUgYXV0aG9yaXplZCB0byBzaWduIGEgbWludGluZyB0cmFuc2FjdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IodGhyZXNob2xkOiBudW1iZXIgPSAxLCBtaW50ZXJzOiBzdHJpbmdbXSB8IEJ1ZmZlcltdID0gW10pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy50aHJlc2hvbGQgPSB0aHJlc2hvbGRcbiAgICB0aGlzLm1pbnRlcnMgPSB0aGlzLl9jbGVhbkFkZHJlc3NlcyhtaW50ZXJzKVxuICB9XG59XG4iXX0=","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // 'A' - 'F'\n    if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    // '0' - '9'\n    } else {\n      return (c - 48) & 0xf;\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this.strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is BN v4 instance\n        r.strip();\n      } else {\n        // r is BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-BaseTx\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMBaseTx = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst evmtx_1 = require(\"../../common/evmtx\");\nconst constants_1 = require(\"../../utils/constants\");\nconst tx_1 = require(\"./tx\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\n/**\n * Class representing a base for all transactions.\n */\nclass EVMBaseTx extends evmtx_1.EVMStandardBaseTx {\n    /**\n     * Class representing an EVMBaseTx which is the foundation for all EVM transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     */\n    constructor(networkID = constants_1.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16)) {\n        super(networkID, blockchainID);\n        this._typeName = \"BaseTx\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n    }\n    /**\n     * Returns the id of the [[BaseTx]]\n     */\n    getTxType() {\n        return this._typeID;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        return offset;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const creds = [];\n        return creds;\n    }\n    clone() {\n        const newEVMBaseTx = new EVMBaseTx();\n        newEVMBaseTx.fromBuffer(this.toBuffer());\n        return newEVMBaseTx;\n    }\n    create(...args) {\n        return new EVMBaseTx(...args);\n    }\n    select(id, ...args) {\n        const newEVMBaseTx = (0, tx_1.SelectTxClass)(id, ...args);\n        return newEVMBaseTx;\n    }\n}\nexports.EVMBaseTx = EVMBaseTx;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZXR4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaXMvZXZtL2Jhc2V0eC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCxvQ0FBZ0M7QUFDaEMsb0VBQTJDO0FBRTNDLDhDQUFzRDtBQUV0RCxxREFBd0Q7QUFDeEQsNkJBQW9DO0FBR3BDOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQWEsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUVqRDs7R0FFRztBQUNILE1BQWEsU0FBVSxTQUFRLHlCQUFvQztJQThEakU7Ozs7O09BS0c7SUFDSCxZQUNFLFlBQW9CLDRCQUFnQixFQUNwQyxlQUF1QixlQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFFM0MsS0FBSyxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQTtRQXZFdEIsY0FBUyxHQUFHLFFBQVEsQ0FBQTtRQUNwQixZQUFPLEdBQUcsU0FBUyxDQUFBO0lBdUU3QixDQUFDO0lBckVELHdCQUF3QjtJQUV4QixXQUFXLENBQUMsTUFBYyxFQUFFLFdBQStCLEtBQUs7UUFDOUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQTtJQUNyQixDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxVQUFVLENBQUMsS0FBYSxFQUFFLFNBQWlCLENBQUM7UUFDMUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQzdELE1BQU0sSUFBSSxDQUFDLENBQUE7UUFDWCxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUE7UUFDakUsTUFBTSxJQUFJLEVBQUUsQ0FBQTtRQUNaLE9BQU8sTUFBTSxDQUFBO0lBQ2YsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxJQUFJLENBQUMsR0FBVyxFQUFFLEVBQVk7UUFDNUIsTUFBTSxLQUFLLEdBQWlCLEVBQUUsQ0FBQTtRQUM5QixPQUFPLEtBQUssQ0FBQTtJQUNkLENBQUM7SUFFRCxLQUFLO1FBQ0gsTUFBTSxZQUFZLEdBQWMsSUFBSSxTQUFTLEVBQUUsQ0FBQTtRQUMvQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQ3hDLE9BQU8sWUFBb0IsQ0FBQTtJQUM3QixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsSUFBVztRQUNuQixPQUFPLElBQUksU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFTLENBQUE7SUFDdkMsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFVLEVBQUUsR0FBRyxJQUFXO1FBQy9CLE1BQU0sWUFBWSxHQUFjLElBQUEsa0JBQWEsRUFBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUMxRCxPQUFPLFlBQW9CLENBQUE7SUFDN0IsQ0FBQztDQWNGO0FBMUVELDhCQTBFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIEFQSS1FVk0tQmFzZVR4XG4gKi9cblxuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlci9cIlxuaW1wb3J0IEJpblRvb2xzIGZyb20gXCIuLi8uLi91dGlscy9iaW50b29sc1wiXG5pbXBvcnQgeyBLZXlDaGFpbiwgS2V5UGFpciB9IGZyb20gXCIuL2tleWNoYWluXCJcbmltcG9ydCB7IEVWTVN0YW5kYXJkQmFzZVR4IH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9ldm10eFwiXG5pbXBvcnQgeyBDcmVkZW50aWFsIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jcmVkZW50aWFsc1wiXG5pbXBvcnQgeyBEZWZhdWx0TmV0d29ya0lEIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2NvbnN0YW50c1wiXG5pbXBvcnQgeyBTZWxlY3RUeENsYXNzIH0gZnJvbSBcIi4vdHhcIlxuaW1wb3J0IHsgU2VyaWFsaXplZEVuY29kaW5nIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3NlcmlhbGl6YXRpb25cIlxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6IEJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKVxuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIGJhc2UgZm9yIGFsbCB0cmFuc2FjdGlvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBFVk1CYXNlVHggZXh0ZW5kcyBFVk1TdGFuZGFyZEJhc2VUeDxLZXlQYWlyLCBLZXlDaGFpbj4ge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJCYXNlVHhcIlxuICBwcm90ZWN0ZWQgX3R5cGVJRCA9IHVuZGVmaW5lZFxuXG4gIC8vc2VyaWFsaXplIGlzIGluaGVyaXRlZFxuXG4gIGRlc2VyaWFsaXplKGZpZWxkczogb2JqZWN0LCBlbmNvZGluZzogU2VyaWFsaXplZEVuY29kaW5nID0gXCJoZXhcIikge1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGZpZWxkcywgZW5jb2RpbmcpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaWQgb2YgdGhlIFtbQmFzZVR4XV1cbiAgICovXG4gIGdldFR4VHlwZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl90eXBlSURcbiAgfVxuXG4gIC8qKlxuICAgKiBUYWtlcyBhIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYW4gW1tCYXNlVHhdXSwgcGFyc2VzIGl0LCBwb3B1bGF0ZXMgdGhlIGNsYXNzLCBhbmQgcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBCYXNlVHggaW4gYnl0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBieXRlcyBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGNvbnRhaW5pbmcgYSByYXcgW1tCYXNlVHhdXVxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgbGVuZ3RoIG9mIHRoZSByYXcgW1tCYXNlVHhdXVxuICAgKlxuICAgKiBAcmVtYXJrcyBhc3N1bWUgbm90LWNoZWNrc3VtbWVkXG4gICAqL1xuICBmcm9tQnVmZmVyKGJ5dGVzOiBCdWZmZXIsIG9mZnNldDogbnVtYmVyID0gMCk6IG51bWJlciB7XG4gICAgdGhpcy5uZXR3b3JrSUQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KVxuICAgIG9mZnNldCArPSA0XG4gICAgdGhpcy5ibG9ja2NoYWluSUQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyAzMilcbiAgICBvZmZzZXQgKz0gMzJcbiAgICByZXR1cm4gb2Zmc2V0XG4gIH1cblxuICAvKipcbiAgICogVGFrZXMgdGhlIGJ5dGVzIG9mIGFuIFtbVW5zaWduZWRUeF1dIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIFtbQ3JlZGVudGlhbF1dc1xuICAgKlxuICAgKiBAcGFyYW0gbXNnIEEgQnVmZmVyIGZvciB0aGUgW1tVbnNpZ25lZFR4XV1cbiAgICogQHBhcmFtIGtjIEFuIFtbS2V5Q2hhaW5dXSB1c2VkIGluIHNpZ25pbmdcbiAgICpcbiAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgW1tDcmVkZW50aWFsXV1zXG4gICAqL1xuICBzaWduKG1zZzogQnVmZmVyLCBrYzogS2V5Q2hhaW4pOiBDcmVkZW50aWFsW10ge1xuICAgIGNvbnN0IGNyZWRzOiBDcmVkZW50aWFsW10gPSBbXVxuICAgIHJldHVybiBjcmVkc1xuICB9XG5cbiAgY2xvbmUoKTogdGhpcyB7XG4gICAgY29uc3QgbmV3RVZNQmFzZVR4OiBFVk1CYXNlVHggPSBuZXcgRVZNQmFzZVR4KClcbiAgICBuZXdFVk1CYXNlVHguZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpXG4gICAgcmV0dXJuIG5ld0VWTUJhc2VUeCBhcyB0aGlzXG4gIH1cblxuICBjcmVhdGUoLi4uYXJnczogYW55W10pOiB0aGlzIHtcbiAgICByZXR1cm4gbmV3IEVWTUJhc2VUeCguLi5hcmdzKSBhcyB0aGlzXG4gIH1cblxuICBzZWxlY3QoaWQ6IG51bWJlciwgLi4uYXJnczogYW55W10pOiB0aGlzIHtcbiAgICBjb25zdCBuZXdFVk1CYXNlVHg6IEVWTUJhc2VUeCA9IFNlbGVjdFR4Q2xhc3MoaWQsIC4uLmFyZ3MpXG4gICAgcmV0dXJuIG5ld0VWTUJhc2VUeCBhcyB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ2xhc3MgcmVwcmVzZW50aW5nIGFuIEVWTUJhc2VUeCB3aGljaCBpcyB0aGUgZm91bmRhdGlvbiBmb3IgYWxsIEVWTSB0cmFuc2FjdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSBuZXR3b3JrSUQgT3B0aW9uYWwgbmV0d29ya0lELCBbW0RlZmF1bHROZXR3b3JrSURdXVxuICAgKiBAcGFyYW0gYmxvY2tjaGFpbklEIE9wdGlvbmFsIGJsb2NrY2hhaW5JRCwgZGVmYXVsdCBCdWZmZXIuYWxsb2MoMzIsIDE2KVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgbmV0d29ya0lEOiBudW1iZXIgPSBEZWZhdWx0TmV0d29ya0lELFxuICAgIGJsb2NrY2hhaW5JRDogQnVmZmVyID0gQnVmZmVyLmFsbG9jKDMyLCAxNilcbiAgKSB7XG4gICAgc3VwZXIobmV0d29ya0lELCBibG9ja2NoYWluSUQpXG4gIH1cbn1cbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GenesisData = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-GenesisData\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst serialization_1 = require(\"../../utils/serialization\");\nconst constants_1 = require(\"./constants\");\nconst _1 = require(\".\");\nconst utils_1 = require(\"../../utils\");\n/**\n * @ignore\n */\nconst serialization = serialization_1.Serialization.getInstance();\nconst bintools = bintools_1.default.getInstance();\nconst decimalString = \"decimalString\";\nconst buffer = \"Buffer\";\nclass GenesisData extends serialization_1.Serializable {\n    /**\n     * Class representing AVM GenesisData\n     *\n     * @param genesisAssets Optional GenesisAsset[]\n     * @param networkID Optional DefaultNetworkID\n     */\n    constructor(genesisAssets = [], networkID = utils_1.DefaultNetworkID) {\n        super();\n        this._typeName = \"GenesisData\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this.networkID = buffer_1.Buffer.alloc(4);\n        /**\n         * Returns the GenesisAssets[]\n         */\n        this.getGenesisAssets = () => this.genesisAssets;\n        /**\n         * Returns the NetworkID as a number\n         */\n        this.getNetworkID = () => this.networkID.readUInt32BE(0);\n        this.genesisAssets = genesisAssets;\n        this.networkID.writeUInt32BE(networkID, 0);\n    }\n    // TODO - setCodecID?\n    serialize(encoding = \"hex\") {\n        let fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { genesisAssets: this.genesisAssets.map((genesisAsset) => genesisAsset.serialize(encoding)), networkID: serialization.encoder(this.networkID, encoding, buffer, decimalString) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.genesisAssets = fields[\"genesisAssets\"].map((genesisAsset) => {\n            let g = new _1.GenesisAsset();\n            g.deserialize(genesisAsset, encoding);\n            return g;\n        });\n        this.networkID = serialization.decoder(fields[\"networkID\"], encoding, decimalString, buffer, 4);\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[GenesisAsset]], parses it, populates the class, and returns the length of the [[GenesisAsset]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[GenesisAsset]]\n     *\n     * @returns The length of the raw [[GenesisAsset]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this._codecID = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);\n        offset += 2;\n        const numGenesisAssets = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const assetCount = numGenesisAssets.readUInt32BE(0);\n        this.genesisAssets = [];\n        for (let i = 0; i < assetCount; i++) {\n            const genesisAsset = new _1.GenesisAsset();\n            offset = genesisAsset.fromBuffer(bytes, offset);\n            this.genesisAssets.push(genesisAsset);\n            if (i === 0) {\n                this.networkID.writeUInt32BE(genesisAsset.getNetworkID(), 0);\n            }\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[GenesisData]].\n     */\n    toBuffer() {\n        // codec id\n        const codecbuffSize = buffer_1.Buffer.alloc(2);\n        codecbuffSize.writeUInt16BE(this._codecID, 0);\n        // num assets\n        const numAssetsbuffSize = buffer_1.Buffer.alloc(4);\n        numAssetsbuffSize.writeUInt32BE(this.genesisAssets.length, 0);\n        let bsize = codecbuffSize.length + numAssetsbuffSize.length;\n        let barr = [codecbuffSize, numAssetsbuffSize];\n        this.genesisAssets.forEach((genesisAsset) => {\n            const b = genesisAsset.toBuffer(this.getNetworkID());\n            bsize += b.length;\n            barr.push(b);\n        });\n        return buffer_1.Buffer.concat(barr, bsize);\n    }\n}\nexports.GenesisData = GenesisData;\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst inherits = require('inherits');\n\nconst bignum = require('bn.js');\nconst DecoderBuffer = require('../base/buffer').DecoderBuffer;\nconst Node = require('../base/node');\n\n// Import DER constants\nconst der = require('../constants/der');\n\nfunction DERDecoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n}\nmodule.exports = DERDecoder;\n\nDERDecoder.prototype.decode = function decode(data, options) {\n  if (!DecoderBuffer.isDecoderBuffer(data)) {\n    data = new DecoderBuffer(data, options);\n  }\n\n  return this.tree._decode(data, options);\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  Node.call(this, 'der', parent);\n}\ninherits(DERNode, Node);\n\nDERNode.prototype._peekTag = function peekTag(buffer, tag, any) {\n  if (buffer.isEmpty())\n    return false;\n\n  const state = buffer.save();\n  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  buffer.restore(state);\n\n  return decodedTag.tag === tag || decodedTag.tagStr === tag ||\n    (decodedTag.tagStr + 'of') === tag || any;\n};\n\nDERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {\n  const decodedTag = derDecodeTag(buffer,\n    'Failed to decode tag of \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  let len = derDecodeLen(buffer,\n    decodedTag.primitive,\n    'Failed to get length of \"' + tag + '\"');\n\n  // Failure\n  if (buffer.isError(len))\n    return len;\n\n  if (!any &&\n      decodedTag.tag !== tag &&\n      decodedTag.tagStr !== tag &&\n      decodedTag.tagStr + 'of' !== tag) {\n    return buffer.error('Failed to match tag: \"' + tag + '\"');\n  }\n\n  if (decodedTag.primitive || len !== null)\n    return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n\n  // Indefinite length... find END tag\n  const state = buffer.save();\n  const res = this._skipUntilEnd(\n    buffer,\n    'Failed to skip indefinite length body: \"' + this.tag + '\"');\n  if (buffer.isError(res))\n    return res;\n\n  len = buffer.offset - state.offset;\n  buffer.restore(state);\n  return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n};\n\nDERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {\n  for (;;) {\n    const tag = derDecodeTag(buffer, fail);\n    if (buffer.isError(tag))\n      return tag;\n    const len = derDecodeLen(buffer, tag.primitive, fail);\n    if (buffer.isError(len))\n      return len;\n\n    let res;\n    if (tag.primitive || len !== null)\n      res = buffer.skip(len);\n    else\n      res = this._skipUntilEnd(buffer, fail);\n\n    // Failure\n    if (buffer.isError(res))\n      return res;\n\n    if (tag.tagStr === 'end')\n      break;\n  }\n};\n\nDERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,\n  options) {\n  const result = [];\n  while (!buffer.isEmpty()) {\n    const possibleEnd = this._peekTag(buffer, 'end');\n    if (buffer.isError(possibleEnd))\n      return possibleEnd;\n\n    const res = decoder.decode(buffer, 'der', options);\n    if (buffer.isError(res) && possibleEnd)\n      break;\n    result.push(res);\n  }\n  return result;\n};\n\nDERNode.prototype._decodeStr = function decodeStr(buffer, tag) {\n  if (tag === 'bitstr') {\n    const unused = buffer.readUInt8();\n    if (buffer.isError(unused))\n      return unused;\n    return { unused: unused, data: buffer.raw() };\n  } else if (tag === 'bmpstr') {\n    const raw = buffer.raw();\n    if (raw.length % 2 === 1)\n      return buffer.error('Decoding of string type: bmpstr length mismatch');\n\n    let str = '';\n    for (let i = 0; i < raw.length / 2; i++) {\n      str += String.fromCharCode(raw.readUInt16BE(i * 2));\n    }\n    return str;\n  } else if (tag === 'numstr') {\n    const numstr = buffer.raw().toString('ascii');\n    if (!this._isNumstr(numstr)) {\n      return buffer.error('Decoding of string type: ' +\n                          'numstr unsupported characters');\n    }\n    return numstr;\n  } else if (tag === 'octstr') {\n    return buffer.raw();\n  } else if (tag === 'objDesc') {\n    return buffer.raw();\n  } else if (tag === 'printstr') {\n    const printstr = buffer.raw().toString('ascii');\n    if (!this._isPrintstr(printstr)) {\n      return buffer.error('Decoding of string type: ' +\n                          'printstr unsupported characters');\n    }\n    return printstr;\n  } else if (/str$/.test(tag)) {\n    return buffer.raw().toString();\n  } else {\n    return buffer.error('Decoding of string type: ' + tag + ' unsupported');\n  }\n};\n\nDERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {\n  let result;\n  const identifiers = [];\n  let ident = 0;\n  let subident = 0;\n  while (!buffer.isEmpty()) {\n    subident = buffer.readUInt8();\n    ident <<= 7;\n    ident |= subident & 0x7f;\n    if ((subident & 0x80) === 0) {\n      identifiers.push(ident);\n      ident = 0;\n    }\n  }\n  if (subident & 0x80)\n    identifiers.push(ident);\n\n  const first = (identifiers[0] / 40) | 0;\n  const second = identifiers[0] % 40;\n\n  if (relative)\n    result = identifiers;\n  else\n    result = [first, second].concat(identifiers.slice(1));\n\n  if (values) {\n    let tmp = values[result.join(' ')];\n    if (tmp === undefined)\n      tmp = values[result.join('.')];\n    if (tmp !== undefined)\n      result = tmp;\n  }\n\n  return result;\n};\n\nDERNode.prototype._decodeTime = function decodeTime(buffer, tag) {\n  const str = buffer.raw().toString();\n\n  let year;\n  let mon;\n  let day;\n  let hour;\n  let min;\n  let sec;\n  if (tag === 'gentime') {\n    year = str.slice(0, 4) | 0;\n    mon = str.slice(4, 6) | 0;\n    day = str.slice(6, 8) | 0;\n    hour = str.slice(8, 10) | 0;\n    min = str.slice(10, 12) | 0;\n    sec = str.slice(12, 14) | 0;\n  } else if (tag === 'utctime') {\n    year = str.slice(0, 2) | 0;\n    mon = str.slice(2, 4) | 0;\n    day = str.slice(4, 6) | 0;\n    hour = str.slice(6, 8) | 0;\n    min = str.slice(8, 10) | 0;\n    sec = str.slice(10, 12) | 0;\n    if (year < 70)\n      year = 2000 + year;\n    else\n      year = 1900 + year;\n  } else {\n    return buffer.error('Decoding ' + tag + ' time is not supported yet');\n  }\n\n  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);\n};\n\nDERNode.prototype._decodeNull = function decodeNull() {\n  return null;\n};\n\nDERNode.prototype._decodeBool = function decodeBool(buffer) {\n  const res = buffer.readUInt8();\n  if (buffer.isError(res))\n    return res;\n  else\n    return res !== 0;\n};\n\nDERNode.prototype._decodeInt = function decodeInt(buffer, values) {\n  // Bigint, return as it is (assume big endian)\n  const raw = buffer.raw();\n  let res = new bignum(raw);\n\n  if (values)\n    res = values[res.toString(10)] || res;\n\n  return res;\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getDecoder('der').tree;\n};\n\n// Utility methods\n\nfunction derDecodeTag(buf, fail) {\n  let tag = buf.readUInt8(fail);\n  if (buf.isError(tag))\n    return tag;\n\n  const cls = der.tagClass[tag >> 6];\n  const primitive = (tag & 0x20) === 0;\n\n  // Multi-octet tag - load\n  if ((tag & 0x1f) === 0x1f) {\n    let oct = tag;\n    tag = 0;\n    while ((oct & 0x80) === 0x80) {\n      oct = buf.readUInt8(fail);\n      if (buf.isError(oct))\n        return oct;\n\n      tag <<= 7;\n      tag |= oct & 0x7f;\n    }\n  } else {\n    tag &= 0x1f;\n  }\n  const tagStr = der.tag[tag];\n\n  return {\n    cls: cls,\n    primitive: primitive,\n    tag: tag,\n    tagStr: tagStr\n  };\n}\n\nfunction derDecodeLen(buf, primitive, fail) {\n  let len = buf.readUInt8(fail);\n  if (buf.isError(len))\n    return len;\n\n  // Indefinite form\n  if (!primitive && len === 0x80)\n    return null;\n\n  // Definite form\n  if ((len & 0x80) === 0) {\n    // Short form\n    return len;\n  }\n\n  // Long form\n  const num = len & 0x7f;\n  if (num > 4)\n    return buf.error('length octect is too long');\n\n  len = 0;\n  for (let i = 0; i < num; i++) {\n    len <<= 8;\n    const j = buf.readUInt8(fail);\n    if (buf.isError(j))\n      return j;\n    len |= j;\n  }\n\n  return len;\n}\n","'use strict';\n\nconst inherits = require('inherits');\n\nfunction Reporter(options) {\n  this._reporterState = {\n    obj: null,\n    path: [],\n    options: options || {},\n    errors: []\n  };\n}\nexports.Reporter = Reporter;\n\nReporter.prototype.isError = function isError(obj) {\n  return obj instanceof ReporterError;\n};\n\nReporter.prototype.save = function save() {\n  const state = this._reporterState;\n\n  return { obj: state.obj, pathLen: state.path.length };\n};\n\nReporter.prototype.restore = function restore(data) {\n  const state = this._reporterState;\n\n  state.obj = data.obj;\n  state.path = state.path.slice(0, data.pathLen);\n};\n\nReporter.prototype.enterKey = function enterKey(key) {\n  return this._reporterState.path.push(key);\n};\n\nReporter.prototype.exitKey = function exitKey(index) {\n  const state = this._reporterState;\n\n  state.path = state.path.slice(0, index - 1);\n};\n\nReporter.prototype.leaveKey = function leaveKey(index, key, value) {\n  const state = this._reporterState;\n\n  this.exitKey(index);\n  if (state.obj !== null)\n    state.obj[key] = value;\n};\n\nReporter.prototype.path = function path() {\n  return this._reporterState.path.join('/');\n};\n\nReporter.prototype.enterObject = function enterObject() {\n  const state = this._reporterState;\n\n  const prev = state.obj;\n  state.obj = {};\n  return prev;\n};\n\nReporter.prototype.leaveObject = function leaveObject(prev) {\n  const state = this._reporterState;\n\n  const now = state.obj;\n  state.obj = prev;\n  return now;\n};\n\nReporter.prototype.error = function error(msg) {\n  let err;\n  const state = this._reporterState;\n\n  const inherited = msg instanceof ReporterError;\n  if (inherited) {\n    err = msg;\n  } else {\n    err = new ReporterError(state.path.map(function(elem) {\n      return '[' + JSON.stringify(elem) + ']';\n    }).join(''), msg.message || msg, msg.stack);\n  }\n\n  if (!state.options.partial)\n    throw err;\n\n  if (!inherited)\n    state.errors.push(err);\n\n  return err;\n};\n\nReporter.prototype.wrapResult = function wrapResult(result) {\n  const state = this._reporterState;\n  if (!state.options.partial)\n    return result;\n\n  return {\n    result: this.isError(result) ? null : result,\n    errors: state.errors\n  };\n};\n\nfunction ReporterError(path, msg) {\n  this.path = path;\n  this.rethrow(msg);\n}\ninherits(ReporterError, Error);\n\nReporterError.prototype.rethrow = function rethrow(msg) {\n  this.message = msg + ' at: ' + (this.path || '(shallow)');\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, ReporterError);\n\n  if (!this.stack) {\n    try {\n      // IE only adds stack when thrown\n      throw new Error(this.message);\n    } catch (e) {\n      this.stack = e.stack;\n    }\n  }\n  return this;\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-ExportTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst basetx_1 = require(\"./basetx\");\nconst constants_2 = require(\"../../utils/constants\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst cb58 = \"cb58\";\nconst buffer = \"Buffer\";\n/**\n * Class representing an unsigned Export transaction.\n */\nclass ExportTx extends basetx_1.BaseTx {\n    /**\n     * Class representing an unsigned Export transaction.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     * @param destinationChain Optional chainid which identifies where the funds will sent to\n     * @param exportOuts Array of [[TransferableOutputs]]s used in the transaction\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, destinationChain = undefined, exportOuts = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"ExportTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.EXPORTTX : constants_1.AVMConstants.EXPORTTX_CODECONE;\n        this.destinationChain = undefined;\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.exportOuts = [];\n        this.destinationChain = destinationChain; // no correction, if they don\"t pass a chainid here, it will BOMB on toBuffer\n        if (typeof exportOuts !== \"undefined\" && Array.isArray(exportOuts)) {\n            for (let i = 0; i < exportOuts.length; i++) {\n                if (!(exportOuts[`${i}`] instanceof outputs_1.TransferableOutput)) {\n                    throw new errors_1.TransferableOutputError(`Error - ExportTx.constructor: invalid TransferableOutput in array parameter ${exportOuts}`);\n                }\n            }\n            this.exportOuts = exportOuts;\n        }\n    }\n    serialize(encoding = \"hex\") {\n        const fields = super.serialize(encoding);\n        return Object.assign(Object.assign({}, fields), { destinationChain: serialization.encoder(this.destinationChain, encoding, buffer, cb58), exportOuts: this.exportOuts.map((e) => e.serialize(encoding)) });\n    }\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.destinationChain = serialization.decoder(fields[\"destinationChain\"], encoding, cb58, buffer, 32);\n        this.exportOuts = fields[\"exportOuts\"].map((e) => {\n            let eo = new outputs_1.TransferableOutput();\n            eo.deserialize(e, encoding);\n            return eo;\n        });\n        this.numOuts = buffer_1.Buffer.alloc(4);\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - ExportTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0\n                ? constants_1.AVMConstants.EXPORTTX\n                : constants_1.AVMConstants.EXPORTTX_CODECONE;\n    }\n    /**\n     * Returns the id of the [[ExportTx]]\n     */\n    getTxType() {\n        return this._typeID;\n    }\n    /**\n     * Returns an array of [[TransferableOutput]]s in this transaction.\n     */\n    getExportOutputs() {\n        return this.exportOuts;\n    }\n    /**\n     * Returns the totall exported amount as a {@link https://github.com/indutny/bn.js/|BN}.\n     */\n    getExportTotal() {\n        let val = new bn_js_1.default(0);\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            val = val.add(this.exportOuts[`${i}`].getOutput().getAmount());\n        }\n        return val;\n    }\n    getTotalOuts() {\n        return [\n            ...this.getOuts(),\n            ...this.getExportOutputs()\n        ];\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} for the destination chainid.\n     */\n    getDestinationChain() {\n        return this.destinationChain;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ExportTx]], parses it, populates the class, and returns the length of the [[ExportTx]] in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ExportTx]]\n     *\n     * @returns The length of the raw [[ExportTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        offset = super.fromBuffer(bytes, offset);\n        this.destinationChain = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const numOuts = this.numOuts.readUInt32BE(0);\n        for (let i = 0; i < numOuts; i++) {\n            const anOut = new outputs_1.TransferableOutput();\n            offset = anOut.fromBuffer(bytes, offset);\n            this.exportOuts.push(anOut);\n        }\n        return offset;\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].\n     */\n    toBuffer() {\n        if (typeof this.destinationChain === \"undefined\") {\n            throw new errors_1.ChainIdError(\"ExportTx.toBuffer -- this.destinationChain is undefined\");\n        }\n        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);\n        let barr = [super.toBuffer(), this.destinationChain, this.numOuts];\n        this.exportOuts = this.exportOuts.sort(outputs_1.TransferableOutput.comparator());\n        for (let i = 0; i < this.exportOuts.length; i++) {\n            barr.push(this.exportOuts[`${i}`].toBuffer());\n        }\n        return buffer_1.Buffer.concat(barr);\n    }\n    clone() {\n        let newbase = new ExportTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new ExportTx(...args);\n    }\n}\nexports.ExportTx = ExportTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVMOutput = exports.SECPTransferOutput = exports.AmountOutput = exports.TransferableOutput = exports.SelectOutputClass = void 0;\n/**\n * @packageDocumentation\n * @module API-EVM-Outputs\n */\nconst buffer_1 = require(\"buffer/\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst output_1 = require(\"../../common/output\");\nconst errors_1 = require(\"../../utils/errors\");\nconst bintools = bintools_1.default.getInstance();\n/**\n * Takes a buffer representing the output and returns the proper Output instance.\n *\n * @param outputID A number representing the outputID parsed prior to the bytes passed in\n *\n * @returns An instance of an [[Output]]-extended class.\n */\nconst SelectOutputClass = (outputID, ...args) => {\n    if (outputID == constants_1.EVMConstants.SECPXFEROUTPUTID) {\n        return new SECPTransferOutput(...args);\n    }\n    throw new errors_1.OutputIdError(\"Error - SelectOutputClass: unknown outputID\");\n};\nexports.SelectOutputClass = SelectOutputClass;\nclass TransferableOutput extends output_1.StandardTransferableOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"TransferableOutput\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = (0, exports.SelectOutputClass)(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.assetID = bintools.copyFrom(bytes, offset, offset + constants_1.EVMConstants.ASSETIDLEN);\n        offset += constants_1.EVMConstants.ASSETIDLEN;\n        const outputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.output = (0, exports.SelectOutputClass)(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n}\nexports.TransferableOutput = TransferableOutput;\nclass AmountOutput extends output_1.StandardAmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"AmountOutput\";\n        this._typeID = undefined;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     *\n     * @param assetID An assetID which is wrapped around the Buffer of the Output\n     */\n    makeTransferable(assetID) {\n        return new TransferableOutput(assetID, this);\n    }\n    select(id, ...args) {\n        return (0, exports.SelectOutputClass)(id, ...args);\n    }\n}\nexports.AmountOutput = AmountOutput;\n/**\n * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.\n */\nclass SECPTransferOutput extends AmountOutput {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"SECPTransferOutput\";\n        this._typeID = constants_1.EVMConstants.SECPXFEROUTPUTID;\n    }\n    //serialize and deserialize both are inherited\n    /**\n     * Returns the outputID for this output\n     */\n    getOutputID() {\n        return this._typeID;\n    }\n    create(...args) {\n        return new SECPTransferOutput(...args);\n    }\n    clone() {\n        const newout = this.create();\n        newout.fromBuffer(this.toBuffer());\n        return newout;\n    }\n}\nexports.SECPTransferOutput = SECPTransferOutput;\nclass EVMOutput {\n    /**\n     * An [[EVMOutput]] class which contains address, amount, and assetID.\n     *\n     * @param address The address recieving the asset as a {@link https://github.com/feross/buffer|Buffer} or a string.\n     * @param amount A {@link https://github.com/indutny/bn.js/|BN} or number representing the amount.\n     * @param assetID The assetID which is being sent as a {@link https://github.com/feross/buffer|Buffer} or a string.\n     */\n    constructor(address = undefined, amount = undefined, assetID = undefined) {\n        this.address = buffer_1.Buffer.alloc(20);\n        this.amount = buffer_1.Buffer.alloc(8);\n        this.amountValue = new bn_js_1.default(0);\n        this.assetID = buffer_1.Buffer.alloc(32);\n        /**\n         * Returns the address of the input as {@link https://github.com/feross/buffer|Buffer}\n         */\n        this.getAddress = () => this.address;\n        /**\n         * Returns the address as a bech32 encoded string.\n         */\n        this.getAddressString = () => this.address.toString(\"hex\");\n        /**\n         * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.\n         */\n        this.getAmount = () => this.amountValue.clone();\n        /**\n         * Returns the assetID of the input as {@link https://github.com/feross/buffer|Buffer}\n         */\n        this.getAssetID = () => this.assetID;\n        if (typeof address !== \"undefined\" &&\n            typeof amount !== \"undefined\" &&\n            typeof assetID !== \"undefined\") {\n            if (typeof address === \"string\") {\n                // if present then remove `0x` prefix\n                const prefix = address.substring(0, 2);\n                if (prefix === \"0x\") {\n                    address = address.split(\"x\")[1];\n                }\n                address = buffer_1.Buffer.from(address, \"hex\");\n            }\n            // convert number amount to BN\n            let amnt;\n            if (typeof amount === \"number\") {\n                amnt = new bn_js_1.default(amount);\n            }\n            else {\n                amnt = amount;\n            }\n            // convert string assetID to Buffer\n            if (!(assetID instanceof buffer_1.Buffer)) {\n                assetID = bintools.cb58Decode(assetID);\n            }\n            this.address = address;\n            this.amountValue = amnt.clone();\n            this.amount = bintools.fromBNToBuffer(amnt, 8);\n            this.assetID = assetID;\n        }\n    }\n    /**\n     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[EVMOutput]].\n     */\n    toBuffer() {\n        const bsize = this.address.length + this.amount.length + this.assetID.length;\n        const barr = [this.address, this.amount, this.assetID];\n        const buff = buffer_1.Buffer.concat(barr, bsize);\n        return buff;\n    }\n    /**\n     * Decodes the [[EVMOutput]] as a {@link https://github.com/feross/buffer|Buffer} and returns the size.\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.address = bintools.copyFrom(bytes, offset, offset + 20);\n        offset += 20;\n        this.amount = bintools.copyFrom(bytes, offset, offset + 8);\n        offset += 8;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        return offset;\n    }\n    /**\n     * Returns a base-58 representation of the [[EVMOutput]].\n     */\n    toString() {\n        return bintools.bufferToB58(this.toBuffer());\n    }\n    create(...args) {\n        return new EVMOutput(...args);\n    }\n    clone() {\n        const newEVMOutput = this.create();\n        newEVMOutput.fromBuffer(this.toBuffer());\n        return newEVMOutput;\n    }\n}\nexports.EVMOutput = EVMOutput;\n/**\n * Returns a function used to sort an array of [[EVMOutput]]s\n */\nEVMOutput.comparator = () => (a, b) => {\n    // primarily sort by address\n    let sorta = a.getAddress();\n    let sortb = b.getAddress();\n    // secondarily sort by assetID\n    if (sorta.equals(sortb)) {\n        sorta = a.getAssetID();\n        sortb = b.getAssetID();\n    }\n    return buffer_1.Buffer.compare(sorta, sortb);\n};\n//# sourceMappingURL=data:application/json;base64,","'use strict';\n\nconst encoders = require('./encoders');\nconst decoders = require('./decoders');\nconst inherits = require('inherits');\n\nconst api = exports;\n\napi.define = function define(name, body) {\n  return new Entity(name, body);\n};\n\nfunction Entity(name, body) {\n  this.name = name;\n  this.body = body;\n\n  this.decoders = {};\n  this.encoders = {};\n}\n\nEntity.prototype._createNamed = function createNamed(Base) {\n  const name = this.name;\n\n  function Generated(entity) {\n    this._initNamed(entity, name);\n  }\n  inherits(Generated, Base);\n  Generated.prototype._initNamed = function _initNamed(entity, name) {\n    Base.call(this, entity, name);\n  };\n\n  return new Generated(this);\n};\n\nEntity.prototype._getDecoder = function _getDecoder(enc) {\n  enc = enc || 'der';\n  // Lazily create decoder\n  if (!this.decoders.hasOwnProperty(enc))\n    this.decoders[enc] = this._createNamed(decoders[enc]);\n  return this.decoders[enc];\n};\n\nEntity.prototype.decode = function decode(data, enc, options) {\n  return this._getDecoder(enc).decode(data, options);\n};\n\nEntity.prototype._getEncoder = function _getEncoder(enc) {\n  enc = enc || 'der';\n  // Lazily create encoder\n  if (!this.encoders.hasOwnProperty(enc))\n    this.encoders[enc] = this._createNamed(encoders[enc]);\n  return this.encoders[enc];\n};\n\nEntity.prototype.encode = function encode(data, enc, /* internal */ reporter) {\n  return this._getEncoder(enc).encode(data, reporter);\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./createassettx\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./genesisasset\"), exports);\n__exportStar(require(\"./genesisdata\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./initialstates\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./interfaces\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./minterset\"), exports);\n__exportStar(require(\"./operationtx\"), exports);\n__exportStar(require(\"./ops\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n__exportStar(require(\"./vertex\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFxQjtBQUNyQiwyQ0FBd0I7QUFDeEIsOENBQTJCO0FBQzNCLGtEQUErQjtBQUMvQixnREFBNkI7QUFDN0IsNkNBQTBCO0FBQzFCLGlEQUE4QjtBQUM5QixnREFBNkI7QUFDN0IsNkNBQTBCO0FBQzFCLGtEQUErQjtBQUMvQiwyQ0FBd0I7QUFDeEIsK0NBQTRCO0FBQzVCLDZDQUEwQjtBQUMxQiw4Q0FBMkI7QUFDM0IsZ0RBQTZCO0FBQzdCLHdDQUFxQjtBQUNyQiw0Q0FBeUI7QUFDekIsdUNBQW9CO0FBQ3BCLDBDQUF1QjtBQUN2QiwyQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9hcGlcIlxuZXhwb3J0ICogZnJvbSBcIi4vYmFzZXR4XCJcbmV4cG9ydCAqIGZyb20gXCIuL2NvbnN0YW50c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9jcmVhdGVhc3NldHR4XCJcbmV4cG9ydCAqIGZyb20gXCIuL2NyZWRlbnRpYWxzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2V4cG9ydHR4XCJcbmV4cG9ydCAqIGZyb20gXCIuL2dlbmVzaXNhc3NldFwiXG5leHBvcnQgKiBmcm9tIFwiLi9nZW5lc2lzZGF0YVwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbXBvcnR0eFwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbml0aWFsc3RhdGVzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2lucHV0c1wiXG5leHBvcnQgKiBmcm9tIFwiLi9pbnRlcmZhY2VzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2tleWNoYWluXCJcbmV4cG9ydCAqIGZyb20gXCIuL21pbnRlcnNldFwiXG5leHBvcnQgKiBmcm9tIFwiLi9vcGVyYXRpb250eFwiXG5leHBvcnQgKiBmcm9tIFwiLi9vcHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vb3V0cHV0c1wiXG5leHBvcnQgKiBmcm9tIFwiLi90eFwiXG5leHBvcnQgKiBmcm9tIFwiLi91dHhvc1wiXG5leHBvcnQgKiBmcm9tIFwiLi92ZXJ0ZXhcIlxuIl19","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hZG1pbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsd0NBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vYXBpXCJcbiJdfQ==","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTx = void 0;\n/**\n * @packageDocumentation\n * @module API-AVM-BaseTx\n */\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst constants_1 = require(\"./constants\");\nconst outputs_1 = require(\"./outputs\");\nconst inputs_1 = require(\"./inputs\");\nconst credentials_1 = require(\"./credentials\");\nconst tx_1 = require(\"../../common/tx\");\nconst credentials_2 = require(\"../../common/credentials\");\nconst constants_2 = require(\"../../utils/constants\");\nconst tx_2 = require(\"./tx\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serialization = serialization_1.Serialization.getInstance();\nconst decimalString = \"decimalString\";\nconst buffer = \"Buffer\";\nconst display = \"display\";\n/**\n * Class representing a base for all transactions.\n */\nclass BaseTx extends tx_1.StandardBaseTx {\n    /**\n     * Class representing a BaseTx which is the foundation for all transactions.\n     *\n     * @param networkID Optional networkID, [[DefaultNetworkID]]\n     * @param blockchainID Optional blockchainID, default Buffer.alloc(32, 16)\n     * @param outs Optional array of the [[TransferableOutput]]s\n     * @param ins Optional array of the [[TransferableInput]]s\n     * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field\n     */\n    constructor(networkID = constants_2.DefaultNetworkID, blockchainID = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {\n        super(networkID, blockchainID, outs, ins, memo);\n        this._typeName = \"BaseTx\";\n        this._codecID = constants_1.AVMConstants.LATESTCODEC;\n        this._typeID = this._codecID === 0 ? constants_1.AVMConstants.BASETX : constants_1.AVMConstants.BASETX_CODECONE;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.outs = fields[\"outs\"].map((o) => {\n            let newOut = new outputs_1.TransferableOutput();\n            newOut.deserialize(o, encoding);\n            return newOut;\n        });\n        this.ins = fields[\"ins\"].map((i) => {\n            let newIn = new inputs_1.TransferableInput();\n            newIn.deserialize(i, encoding);\n            return newIn;\n        });\n        this.numouts = serialization.decoder(this.outs.length.toString(), display, decimalString, buffer, 4);\n        this.numins = serialization.decoder(this.ins.length.toString(), display, decimalString, buffer, 4);\n    }\n    getOuts() {\n        return this.outs;\n    }\n    getIns() {\n        return this.ins;\n    }\n    getTotalOuts() {\n        return this.getOuts();\n    }\n    /**\n     * Set the codecID\n     *\n     * @param codecID The codecID to set\n     */\n    setCodecID(codecID) {\n        if (codecID !== 0 && codecID !== 1) {\n            /* istanbul ignore next */\n            throw new errors_1.CodecIdError(\"Error - BaseTx.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.\");\n        }\n        this._codecID = codecID;\n        this._typeID =\n            this._codecID === 0 ? constants_1.AVMConstants.BASETX : constants_1.AVMConstants.BASETX_CODECONE;\n    }\n    /**\n     * Returns the id of the [[BaseTx]]\n     */\n    getTxType() {\n        return this._typeID;\n    }\n    /**\n     * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.\n     *\n     * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]\n     *\n     * @returns The length of the raw [[BaseTx]]\n     *\n     * @remarks assume not-checksummed\n     */\n    fromBuffer(bytes, offset = 0) {\n        this.networkID = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.blockchainID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.numouts = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const outcount = this.numouts.readUInt32BE(0);\n        this.outs = [];\n        for (let i = 0; i < outcount; i++) {\n            const xferout = new outputs_1.TransferableOutput();\n            offset = xferout.fromBuffer(bytes, offset);\n            this.outs.push(xferout);\n        }\n        this.numins = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        const incount = this.numins.readUInt32BE(0);\n        this.ins = [];\n        for (let i = 0; i < incount; i++) {\n            const xferin = new inputs_1.TransferableInput();\n            offset = xferin.fromBuffer(bytes, offset);\n            this.ins.push(xferin);\n        }\n        let memolen = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.memo = bintools.copyFrom(bytes, offset, offset + memolen);\n        offset += memolen;\n        return offset;\n    }\n    /**\n     * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s\n     *\n     * @param msg A Buffer for the [[UnsignedTx]]\n     * @param kc An [[KeyChain]] used in signing\n     *\n     * @returns An array of [[Credential]]s\n     */\n    sign(msg, kc) {\n        const creds = [];\n        for (let i = 0; i < this.ins.length; i++) {\n            const cred = (0, credentials_1.SelectCredentialClass)(this.ins[`${i}`].getInput().getCredentialID());\n            const sigidxs = this.ins[`${i}`].getInput().getSigIdxs();\n            for (let j = 0; j < sigidxs.length; j++) {\n                const keypair = kc.getKey(sigidxs[`${j}`].getSource());\n                const signval = keypair.sign(msg);\n                const sig = new credentials_2.Signature();\n                sig.fromBuffer(signval);\n                cred.addSignature(sig);\n            }\n            creds.push(cred);\n        }\n        return creds;\n    }\n    clone() {\n        let newbase = new BaseTx();\n        newbase.fromBuffer(this.toBuffer());\n        return newbase;\n    }\n    create(...args) {\n        return new BaseTx(...args);\n    }\n    select(id, ...args) {\n        let newbasetx = (0, tx_2.SelectTxClass)(id, ...args);\n        return newbasetx;\n    }\n}\nexports.BaseTx = BaseTx;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./basetx\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./credentials\"), exports);\n__exportStar(require(\"./inputs\"), exports);\n__exportStar(require(\"./interfaces\"), exports);\n__exportStar(require(\"./exporttx\"), exports);\n__exportStar(require(\"./importtx\"), exports);\n__exportStar(require(\"./keychain\"), exports);\n__exportStar(require(\"./outputs\"), exports);\n__exportStar(require(\"./tx\"), exports);\n__exportStar(require(\"./utxos\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9ldm0vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHdDQUFxQjtBQUNyQiwyQ0FBd0I7QUFDeEIsOENBQTJCO0FBQzNCLGdEQUE2QjtBQUM3QiwyQ0FBd0I7QUFDeEIsK0NBQTRCO0FBQzVCLDZDQUEwQjtBQUMxQiw2Q0FBMEI7QUFDMUIsNkNBQTBCO0FBQzFCLDRDQUF5QjtBQUN6Qix1Q0FBb0I7QUFDcEIsMENBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vYXBpXCJcbmV4cG9ydCAqIGZyb20gXCIuL2Jhc2V0eFwiXG5leHBvcnQgKiBmcm9tIFwiLi9jb25zdGFudHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vY3JlZGVudGlhbHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5wdXRzXCJcbmV4cG9ydCAqIGZyb20gXCIuL2ludGVyZmFjZXNcIlxuZXhwb3J0ICogZnJvbSBcIi4vZXhwb3J0dHhcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW1wb3J0dHhcIlxuZXhwb3J0ICogZnJvbSBcIi4va2V5Y2hhaW5cIlxuZXhwb3J0ICogZnJvbSBcIi4vb3V0cHV0c1wiXG5leHBvcnQgKiBmcm9tIFwiLi90eFwiXG5leHBvcnQgKiBmcm9tIFwiLi91dHhvc1wiXG4iXX0=","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AdminAPI = void 0;\nconst jrpcapi_1 = require(\"../../common/jrpcapi\");\n/**\n * Class for interacting with a node's AdminAPI.\n *\n * @category RPCAPIs\n *\n * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called.\n * Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.\n */\nclass AdminAPI extends jrpcapi_1.JRPCAPI {\n    /**\n     * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]]\n     * method.\n     *\n     * @param core A reference to the Avalanche class\n     * @param baseURL Defaults to the string \"/ext/admin\" as the path to rpc's baseURL\n     */\n    constructor(core, baseURL = \"/ext/admin\") {\n        super(core, baseURL);\n        /**\n         * Assign an API an alias, a different endpoint for the API. The original endpoint will still\n         * work. This change only affects this node other nodes will not know about this alias.\n         *\n         * @param endpoint The original endpoint of the API. endpoint should only include the part of\n         * the endpoint after /ext/\n         * @param alias The API being aliased can now be called at ext/alias\n         *\n         * @returns Returns a Promise boolean containing success, true for success, false for failure.\n         */\n        this.alias = (endpoint, alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                endpoint,\n                alias\n            };\n            const response = yield this.callMethod(\"admin.alias\", params);\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n        /**\n         * Give a blockchain an alias, a different name that can be used any place the blockchain’s\n         * ID is used.\n         *\n         * @param chain The blockchain’s ID\n         * @param alias Can now be used in place of the blockchain’s ID (in API endpoints, for example)\n         *\n         * @returns Returns a Promise boolean containing success, true for success, false for failure.\n         */\n        this.aliasChain = (chain, alias) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                chain,\n                alias\n            };\n            const response = yield this.callMethod(\"admin.aliasChain\", params);\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n        /**\n         * Get all aliases for given blockchain\n         *\n         * @param chain The blockchain’s ID\n         *\n         * @returns Returns a Promise string[] containing aliases of the blockchain.\n         */\n        this.getChainAliases = (chain) => __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                chain\n            };\n            const response = yield this.callMethod(\"admin.getChainAliases\", params);\n            return response.data.result.aliases\n                ? response.data.result.aliases\n                : response.data.result;\n        });\n        /**\n         * Returns log and display levels of loggers\n         *\n         * @param loggerName the name of the logger to be returned. This is an optional argument. If not specified, it returns all possible loggers.\n         *\n         * @returns Returns a Promise containing logger levels\n         */\n        this.getLoggerLevel = (loggerName) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof loggerName !== \"undefined\") {\n                params.loggerName = loggerName;\n            }\n            const response = yield this.callMethod(\"admin.getLoggerLevel\", params);\n            return response.data.result;\n        });\n        /**\n         * Dynamically loads any virtual machines installed on the node as plugins\n         *\n         * @returns Returns a Promise containing new VMs and failed VMs\n         */\n        this.loadVMs = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"admin.loadVMs\");\n            return response.data.result.aliases\n                ? response.data.result.aliases\n                : response.data.result;\n        });\n        /**\n         * Dump the mutex statistics of the node to the specified file.\n         *\n         * @returns Promise for a boolean that is true on success.\n         */\n        this.lockProfile = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"admin.lockProfile\");\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n        /**\n         * Dump the current memory footprint of the node to the specified file.\n         *\n         * @returns Promise for a boolean that is true on success.\n         */\n        this.memoryProfile = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"admin.memoryProfile\");\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n        /**\n         * Sets log and display levels of loggers.\n         *\n         * @param loggerName the name of the logger to be changed. This is an optional parameter.\n         * @param logLevel the log level of written logs, can be omitted.\n         * @param displayLevel the log level of displayed logs, can be omitted.\n         *\n         * @returns Returns a Promise containing logger levels\n         */\n        this.setLoggerLevel = (loggerName, logLevel, displayLevel) => __awaiter(this, void 0, void 0, function* () {\n            const params = {};\n            if (typeof loggerName !== \"undefined\") {\n                params.loggerName = loggerName;\n            }\n            if (typeof logLevel !== \"undefined\") {\n                params.logLevel = logLevel;\n            }\n            if (typeof displayLevel !== \"undefined\") {\n                params.displayLevel = displayLevel;\n            }\n            const response = yield this.callMethod(\"admin.setLoggerLevel\", params);\n            return response.data.result;\n        });\n        /**\n         * Start profiling the cpu utilization of the node. Will dump the profile information into\n         * the specified file on stop.\n         *\n         * @returns Promise for a boolean that is true on success.\n         */\n        this.startCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"admin.startCPUProfiler\");\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n        /**\n         * Stop the CPU profile that was previously started.\n         *\n         * @returns Promise for a boolean that is true on success.\n         */\n        this.stopCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.callMethod(\"admin.stopCPUProfiler\");\n            return response.data.result.success\n                ? response.data.result.success\n                : response.data.result;\n        });\n    }\n}\nexports.AdminAPI = AdminAPI;\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n/**\n * @packageDocumentation\n * @module API-EVM-UTXOs\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UTXOSet = exports.AssetAmountDestination = exports.UTXO = void 0;\nconst buffer_1 = require(\"buffer/\");\nconst bintools_1 = __importDefault(require(\"../../utils/bintools\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst outputs_1 = require(\"./outputs\");\nconst constants_1 = require(\"./constants\");\nconst inputs_1 = require(\"./inputs\");\nconst helperfunctions_1 = require(\"../../utils/helperfunctions\");\nconst utxos_1 = require(\"../../common/utxos\");\nconst constants_2 = require(\"../../utils/constants\");\nconst assetamount_1 = require(\"../../common/assetamount\");\nconst serialization_1 = require(\"../../utils/serialization\");\nconst tx_1 = require(\"./tx\");\nconst importtx_1 = require(\"./importtx\");\nconst exporttx_1 = require(\"./exporttx\");\nconst errors_1 = require(\"../../utils/errors\");\n/**\n * @ignore\n */\nconst bintools = bintools_1.default.getInstance();\nconst serializer = serialization_1.Serialization.getInstance();\n/**\n * Class for representing a single UTXO.\n */\nclass UTXO extends utxos_1.StandardUTXO {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXO\";\n        this._typeID = undefined;\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        this.output = (0, outputs_1.SelectOutputClass)(fields[\"output\"][\"_typeID\"]);\n        this.output.deserialize(fields[\"output\"], encoding);\n    }\n    fromBuffer(bytes, offset = 0) {\n        this.codecID = bintools.copyFrom(bytes, offset, offset + 2);\n        offset += 2;\n        this.txid = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);\n        offset += 4;\n        this.assetID = bintools.copyFrom(bytes, offset, offset + 32);\n        offset += 32;\n        const outputid = bintools\n            .copyFrom(bytes, offset, offset + 4)\n            .readUInt32BE(0);\n        offset += 4;\n        this.output = (0, outputs_1.SelectOutputClass)(outputid);\n        return this.output.fromBuffer(bytes, offset);\n    }\n    /**\n     * Takes a base-58 string containing a [[UTXO]], parses it, populates the class, and returns the length of the StandardUTXO in bytes.\n     *\n     * @param serialized A base-58 string containing a raw [[UTXO]]\n     *\n     * @returns The length of the raw [[UTXO]]\n     *\n     * @remarks\n     * unlike most fromStrings, it expects the string to be serialized in cb58 format\n     */\n    fromString(serialized) {\n        /* istanbul ignore next */\n        return this.fromBuffer(bintools.cb58Decode(serialized));\n    }\n    /**\n     * Returns a base-58 representation of the [[UTXO]].\n     *\n     * @remarks\n     * unlike most toStrings, this returns in cb58 serialization format\n     */\n    toString() {\n        /* istanbul ignore next */\n        return bintools.cb58Encode(this.toBuffer());\n    }\n    clone() {\n        const utxo = new UTXO();\n        utxo.fromBuffer(this.toBuffer());\n        return utxo;\n    }\n    create(codecID = constants_1.EVMConstants.LATESTCODEC, txID = undefined, outputidx = undefined, assetID = undefined, output = undefined) {\n        return new UTXO(codecID, txID, outputidx, assetID, output);\n    }\n}\nexports.UTXO = UTXO;\nclass AssetAmountDestination extends assetamount_1.StandardAssetAmountDestination {\n}\nexports.AssetAmountDestination = AssetAmountDestination;\n/**\n * Class representing a set of [[UTXO]]s.\n */\nclass UTXOSet extends utxos_1.StandardUTXOSet {\n    constructor() {\n        super(...arguments);\n        this._typeName = \"UTXOSet\";\n        this._typeID = undefined;\n        this.getMinimumSpendable = (aad, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            const utxoArray = this.getAllUTXOs();\n            const outids = {};\n            for (let i = 0; i < utxoArray.length && !aad.canComplete(); i++) {\n                const u = utxoArray[`${i}`];\n                const assetKey = u.getAssetID().toString(\"hex\");\n                const fromAddresses = aad.getSenders();\n                if (u.getOutput() instanceof outputs_1.AmountOutput &&\n                    aad.assetExists(assetKey) &&\n                    u.getOutput().meetsThreshold(fromAddresses, asOf)) {\n                    const am = aad.getAssetAmount(assetKey);\n                    if (!am.isFinished()) {\n                        const uout = u.getOutput();\n                        outids[`${assetKey}`] = uout.getOutputID();\n                        const amount = uout.getAmount();\n                        am.spendAmount(amount);\n                        const txid = u.getTxID();\n                        const outputidx = u.getOutputIdx();\n                        const input = new inputs_1.SECPTransferInput(amount);\n                        const xferin = new inputs_1.TransferableInput(txid, outputidx, u.getAssetID(), input);\n                        const spenders = uout.getSpenders(fromAddresses, asOf);\n                        spenders.forEach((spender) => {\n                            const idx = uout.getAddressIdx(spender);\n                            if (idx === -1) {\n                                /* istanbul ignore next */\n                                throw new errors_1.AddressError(\"Error - UTXOSet.getMinimumSpendable: no such address in output\");\n                            }\n                            xferin.getInput().addSignatureIdx(idx, spender);\n                        });\n                        aad.addInput(xferin);\n                    }\n                    else if (aad.assetExists(assetKey) &&\n                        !(u.getOutput() instanceof outputs_1.AmountOutput)) {\n                        /**\n                         * Leaving the below lines, not simply for posterity, but for clarification.\n                         * AssetIDs may have mixed OutputTypes.\n                         * Some of those OutputTypes may implement AmountOutput.\n                         * Others may not.\n                         * Simply continue in this condition.\n                         */\n                        /*return new Error('Error - UTXOSet.getMinimumSpendable: outputID does not '\n                           + `implement AmountOutput: ${u.getOutput().getOutputID}`);*/\n                        continue;\n                    }\n                }\n            }\n            if (!aad.canComplete()) {\n                return new errors_1.InsufficientFundsError(`Error - UTXOSet.getMinimumSpendable: insufficient funds to create the transaction`);\n            }\n            const amounts = aad.getAmounts();\n            const zero = new bn_js_1.default(0);\n            for (let i = 0; i < amounts.length; i++) {\n                const assetKey = amounts[`${i}`].getAssetIDString();\n                const amount = amounts[`${i}`].getAmount();\n                if (amount.gt(zero)) {\n                    const spendout = (0, outputs_1.SelectOutputClass)(outids[`${assetKey}`], amount, aad.getDestinations(), locktime, threshold);\n                    const xferout = new outputs_1.TransferableOutput(amounts[`${i}`].getAssetID(), spendout);\n                    aad.addOutput(xferout);\n                }\n                const change = amounts[`${i}`].getChange();\n                if (change.gt(zero)) {\n                    const changeout = (0, outputs_1.SelectOutputClass)(outids[`${assetKey}`], change, aad.getChangeAddresses());\n                    const chgxferout = new outputs_1.TransferableOutput(amounts[`${i}`].getAssetID(), changeout);\n                    aad.addChange(chgxferout);\n                }\n            }\n            return undefined;\n        };\n        /**\n         * Creates an unsigned ImportTx transaction.\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param toAddress The address to send the funds\n         * @param importIns An array of [[TransferableInput]]s being imported\n         * @param sourceChain A {@link https://github.com/feross/buffer|Buffer} for the chainid where the imports are coming from.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}. Fee will come from the inputs first, if they can.\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildImportTx = (networkID, blockchainID, toAddress, atomics, sourceChain = undefined, fee = undefined, feeAssetID = undefined) => {\n            const zero = new bn_js_1.default(0);\n            const map = new Map();\n            let ins = [];\n            let outs = [];\n            let feepaid = new bn_js_1.default(0);\n            if (typeof fee === \"undefined\") {\n                fee = zero.clone();\n            }\n            // build a set of inputs which covers the fee\n            atomics.forEach((atomic) => {\n                const assetIDBuf = atomic.getAssetID();\n                const assetID = bintools.cb58Encode(atomic.getAssetID());\n                const output = atomic.getOutput();\n                const amount = output.getAmount().clone();\n                let infeeamount = amount.clone();\n                if (typeof feeAssetID !== \"undefined\" &&\n                    fee.gt(zero) &&\n                    feepaid.lt(fee) &&\n                    buffer_1.Buffer.compare(feeAssetID, assetIDBuf) === 0) {\n                    feepaid = feepaid.add(infeeamount);\n                    if (feepaid.gt(fee)) {\n                        infeeamount = feepaid.sub(fee);\n                        feepaid = fee.clone();\n                    }\n                    else {\n                        infeeamount = zero.clone();\n                    }\n                }\n                const txid = atomic.getTxID();\n                const outputidx = atomic.getOutputIdx();\n                const input = new inputs_1.SECPTransferInput(amount);\n                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetIDBuf, input);\n                const from = output.getAddresses();\n                const spenders = output.getSpenders(from);\n                spenders.forEach((spender) => {\n                    const idx = output.getAddressIdx(spender);\n                    if (idx === -1) {\n                        /* istanbul ignore next */\n                        throw new errors_1.AddressError(\"Error - UTXOSet.buildImportTx: no such address in output\");\n                    }\n                    xferin.getInput().addSignatureIdx(idx, spender);\n                });\n                ins.push(xferin);\n                if (map.has(assetID)) {\n                    infeeamount = infeeamount.add(new bn_js_1.default(map.get(assetID)));\n                }\n                map.set(assetID, infeeamount.toString());\n            });\n            for (let [assetID, amount] of map) {\n                // Create single EVMOutput for each assetID\n                const evmOutput = new outputs_1.EVMOutput(toAddress, new bn_js_1.default(amount), bintools.cb58Decode(assetID));\n                outs.push(evmOutput);\n            }\n            // lexicographically sort array\n            ins = ins.sort(inputs_1.TransferableInput.comparator());\n            outs = outs.sort(outputs_1.EVMOutput.comparator());\n            const importTx = new importtx_1.ImportTx(networkID, blockchainID, sourceChain, ins, outs, fee);\n            return new tx_1.UnsignedTx(importTx);\n        };\n        /**\n         * Creates an unsigned ExportTx transaction.\n         *\n         * @param networkID The number representing NetworkID of the node\n         * @param blockchainID The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction\n         * @param amount The amount being exported as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param djtxAssetID {@link https://github.com/feross/buffer|Buffer} of the AssetID for DJTX\n         * @param toAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who recieves the DJTX\n         * @param fromAddresses An array of addresses as {@link https://github.com/feross/buffer|Buffer} who owns the DJTX\n         * @param changeAddresses Optional. The addresses that can spend the change remaining from the spent UTXOs.\n         * @param destinationChain Optional. A {@link https://github.com/feross/buffer|Buffer} for the chainid where to send the asset.\n         * @param fee Optional. The amount of fees to burn in its smallest denomination, represented as {@link https://github.com/indutny/bn.js/|BN}\n         * @param feeAssetID Optional. The assetID of the fees being burned.\n         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}\n         * @param locktime Optional. The locktime field created in the resulting outputs\n         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO\n         * @returns An unsigned transaction created from the passed in parameters.\n         *\n         */\n        this.buildExportTx = (networkID, blockchainID, amount, djtxAssetID, toAddresses, fromAddresses, changeAddresses = undefined, destinationChain = undefined, fee = undefined, feeAssetID = undefined, asOf = (0, helperfunctions_1.UnixNow)(), locktime = new bn_js_1.default(0), threshold = 1) => {\n            let ins = [];\n            let exportouts = [];\n            if (typeof changeAddresses === \"undefined\") {\n                changeAddresses = toAddresses;\n            }\n            const zero = new bn_js_1.default(0);\n            if (amount.eq(zero)) {\n                return undefined;\n            }\n            if (typeof feeAssetID === \"undefined\") {\n                feeAssetID = djtxAssetID;\n            }\n            else if (feeAssetID.toString(\"hex\") !== djtxAssetID.toString(\"hex\")) {\n                /* istanbul ignore next */\n                throw new errors_1.FeeAssetError(\"Error - UTXOSet.buildExportTx: feeAssetID must match djtxAssetID\");\n            }\n            if (typeof destinationChain === \"undefined\") {\n                destinationChain = bintools.cb58Decode(constants_2.PlatformChainID);\n            }\n            const aad = new AssetAmountDestination(toAddresses, fromAddresses, changeAddresses);\n            if (djtxAssetID.toString(\"hex\") === feeAssetID.toString(\"hex\")) {\n                aad.addAssetAmount(djtxAssetID, amount, fee);\n            }\n            else {\n                aad.addAssetAmount(djtxAssetID, amount, zero);\n                if (this._feeCheck(fee, feeAssetID)) {\n                    aad.addAssetAmount(feeAssetID, zero, fee);\n                }\n            }\n            const success = this.getMinimumSpendable(aad, asOf, locktime, threshold);\n            if (typeof success === \"undefined\") {\n                exportouts = aad.getOutputs();\n            }\n            else {\n                throw success;\n            }\n            const exportTx = new exporttx_1.ExportTx(networkID, blockchainID, destinationChain, ins, exportouts);\n            return new tx_1.UnsignedTx(exportTx);\n        };\n    }\n    //serialize is inherited\n    deserialize(fields, encoding = \"hex\") {\n        super.deserialize(fields, encoding);\n        const utxos = {};\n        for (let utxoid in fields[\"utxos\"]) {\n            let utxoidCleaned = serializer.decoder(utxoid, encoding, \"base58\", \"base58\");\n            utxos[`${utxoidCleaned}`] = new UTXO();\n            utxos[`${utxoidCleaned}`].deserialize(fields[\"utxos\"][`${utxoid}`], encoding);\n        }\n        let addressUTXOs = {};\n        for (let address in fields[\"addressUTXOs\"]) {\n            let addressCleaned = serializer.decoder(address, encoding, \"cb58\", \"hex\");\n            let utxobalance = {};\n            for (let utxoid in fields[\"addressUTXOs\"][`${address}`]) {\n                let utxoidCleaned = serializer.decoder(utxoid, encoding, \"base58\", \"base58\");\n                utxobalance[`${utxoidCleaned}`] = serializer.decoder(fields[\"addressUTXOs\"][`${address}`][`${utxoid}`], encoding, \"decimalString\", \"BN\");\n            }\n            addressUTXOs[`${addressCleaned}`] = utxobalance;\n        }\n        this.utxos = utxos;\n        this.addressUTXOs = addressUTXOs;\n    }\n    parseUTXO(utxo) {\n        const utxovar = new UTXO();\n        // force a copy\n        if (typeof utxo === \"string\") {\n            utxovar.fromBuffer(bintools.cb58Decode(utxo));\n        }\n        else if (utxo instanceof UTXO) {\n            utxovar.fromBuffer(utxo.toBuffer()); // forces a copy\n        }\n        else {\n            /* istanbul ignore next */\n            throw new errors_1.UTXOError(\"Error - UTXO.parseUTXO: utxo parameter is not a UTXO or string\");\n        }\n        return utxovar;\n    }\n    create() {\n        return new UTXOSet();\n    }\n    clone() {\n        const newset = this.create();\n        const allUTXOs = this.getAllUTXOs();\n        newset.addArray(allUTXOs);\n        return newset;\n    }\n    _feeCheck(fee, feeAssetID) {\n        return (typeof fee !== \"undefined\" &&\n            typeof feeAssetID !== \"undefined\" &&\n            fee.gt(new bn_js_1.default(0)) &&\n            feeAssetID instanceof buffer_1.Buffer);\n    }\n}\nexports.UTXOSet = UTXOSet;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXR4b3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9ldm0vdXR4b3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7O0FBRUgsb0NBQWdDO0FBQ2hDLG9FQUEyQztBQUMzQyxrREFBc0I7QUFDdEIsdUNBS2tCO0FBQ2xCLDJDQUEwQztBQUMxQyxxQ0FBeUU7QUFFekUsaUVBQXFEO0FBQ3JELDhDQUFrRTtBQUNsRSxxREFBdUQ7QUFDdkQsMERBR2lDO0FBQ2pDLDZEQUE2RTtBQUM3RSw2QkFBaUM7QUFDakMseUNBQXFDO0FBQ3JDLHlDQUFxQztBQUNyQywrQ0FLMkI7QUFFM0I7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBYSxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBQ2pELE1BQU0sVUFBVSxHQUFrQiw2QkFBYSxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBRTdEOztHQUVHO0FBQ0gsTUFBYSxJQUFLLFNBQVEsb0JBQVk7SUFBdEM7O1FBQ1ksY0FBUyxHQUFHLE1BQU0sQ0FBQTtRQUNsQixZQUFPLEdBQUcsU0FBUyxDQUFBO0lBb0UvQixDQUFDO0lBbEVDLHdCQUF3QjtJQUV4QixXQUFXLENBQUMsTUFBYyxFQUFFLFdBQStCLEtBQUs7UUFDOUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFBLDJCQUFpQixFQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO1FBQzVELElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNyRCxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQWEsRUFBRSxTQUFpQixDQUFDO1FBQzFDLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FB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VUFBVSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtTQUM5QzthQUFNLElBQUksSUFBSSxZQUFZLElBQUksRUFBRTtZQUMvQixPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBLENBQUMsZ0JBQWdCO1NBQ3JEO2FBQU07WUFDTCwwQkFBMEI7WUFDMUIsTUFBTSxJQUFJLGtCQUFTLENBQ2pCLGdFQUFnRSxDQUNqRSxDQUFBO1NBQ0Y7UUFDRCxPQUFPLE9BQU8sQ0FBQTtJQUNoQixDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU8sSUFBSSxPQUFPLEVBQVUsQ0FBQTtJQUM5QixDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0sTUFBTSxHQUFZLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUNyQyxNQUFNLFFBQVEsR0FBVyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDM0MsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUN6QixPQUFPLE1BQWMsQ0FBQTtJQUN2QixDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQU8sRUFBRSxVQUFrQjtRQUNuQyxPQUFPLENBQ0wsT0FBTyxHQUFHLEtBQUssV0FBVztZQUMxQixPQUFPLFVBQVUsS0FBSyxXQUFXO1lBQ2pDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxlQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsVUFBVSxZQUFZLGVBQU0sQ0FDN0IsQ0FBQTtJQUNILENBQUM7Q0FvVEY7QUF6WUQsMEJBeVlDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgQVBJLUVWTS1VVFhPc1xuICovXG5cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXIvXCJcbmltcG9ydCBCaW5Ub29scyBmcm9tIFwiLi4vLi4vdXRpbHMvYmludG9vbHNcIlxuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXG5pbXBvcnQge1xuICBBbW91bnRPdXRwdXQsXG4gIFNlbGVjdE91dHB1dENsYXNzLFxuICBUcmFuc2ZlcmFibGVPdXRwdXQsXG4gIEVWTU91dHB1dFxufSBmcm9tIFwiLi9vdXRwdXRzXCJcbmltcG9ydCB7IEVWTUNvbnN0YW50cyB9IGZyb20gXCIuL2NvbnN0YW50c1wiXG5pbXBvcnQgeyBFVk1JbnB1dCwgU0VDUFRyYW5zZmVySW5wdXQsIFRyYW5zZmVyYWJsZUlucHV0IH0gZnJvbSBcIi4vaW5wdXRzXCJcbmltcG9ydCB7IE91dHB1dCB9IGZyb20gXCIuLi8uLi9jb21tb24vb3V0cHV0XCJcbmltcG9ydCB7IFVuaXhOb3cgfSBmcm9tIFwiLi4vLi4vdXRpbHMvaGVscGVyZnVuY3Rpb25zXCJcbmltcG9ydCB7IFN0YW5kYXJkVVRYTywgU3RhbmRhcmRVVFhPU2V0IH0gZnJvbSBcIi4uLy4uL2NvbW1vbi91dHhvc1wiXG5pbXBvcnQgeyBQbGF0Zm9ybUNoYWluSUQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvY29uc3RhbnRzXCJcbmltcG9ydCB7XG4gIFN0YW5kYXJkQXNzZXRBbW91bnREZXN0aW5hdGlvbixcbiAgQXNzZXRBbW91bnRcbn0gZnJvbSBcIi4uLy4uL2NvbW1vbi9hc3NldGFtb3VudFwiXG5pbXBvcnQgeyBTZXJpYWxpemF0aW9uLCBTZXJpYWxpemVkRW5jb2RpbmcgfSBmcm9tIFwiLi4vLi4vdXRpbHMvc2VyaWFsaXphdGlvblwiXG5pbXBvcnQgeyBVbnNpZ25lZFR4IH0gZnJvbSBcIi4vdHhcIlxuaW1wb3J0IHsgSW1wb3J0VHggfSBmcm9tIFwiLi9pbXBvcnR0eFwiXG5pbXBvcnQgeyBFeHBvcnRUeCB9IGZyb20gXCIuL2V4cG9ydHR4XCJcbmltcG9ydCB7XG4gIFVUWE9FcnJvcixcbiAgQWRkcmVzc0Vycm9yLFxuICBJbnN1ZmZpY2llbnRGdW5kc0Vycm9yLFxuICBGZWVBc3NldEVycm9yXG59IGZyb20gXCIuLi8uLi91dGlscy9lcnJvcnNcIlxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6IEJpblRvb2xzID0gQmluVG9vbHMuZ2V0SW5zdGFuY2UoKVxuY29uc3Qgc2VyaWFsaXplcjogU2VyaWFsaXphdGlvbiA9IFNlcmlhbGl6YXRpb24uZ2V0SW5zdGFuY2UoKVxuXG4vKipcbiAqIENsYXNzIGZvciByZXByZXNlbnRpbmcgYSBzaW5nbGUgVVRYTy5cbiAqL1xuZXhwb3J0IGNsYXNzIFVUWE8gZXh0ZW5kcyBTdGFuZGFyZFVUWE8ge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJVVFhPXCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWRcblxuICAvL3NlcmlhbGl6ZSBpcyBpbmhlcml0ZWRcblxuICBkZXNlcmlhbGl6ZShmaWVsZHM6IG9iamVjdCwgZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKVxuICAgIHRoaXMub3V0cHV0ID0gU2VsZWN0T3V0cHV0Q2xhc3MoZmllbGRzW1wib3V0cHV0XCJdW1wiX3R5cGVJRFwiXSlcbiAgICB0aGlzLm91dHB1dC5kZXNlcmlhbGl6ZShmaWVsZHNbXCJvdXRwdXRcIl0sIGVuY29kaW5nKVxuICB9XG5cbiAgZnJvbUJ1ZmZlcihieXRlczogQnVmZmVyLCBvZmZzZXQ6IG51bWJlciA9IDApOiBudW1iZXIge1xuICAgIHRoaXMuY29kZWNJRCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDIpXG4gICAgb2Zmc2V0ICs9IDJcbiAgICB0aGlzLnR4aWQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyAzMilcbiAgICBvZmZzZXQgKz0gMzJcbiAgICB0aGlzLm91dHB1dGlkeCA9IGJpbnRvb2xzLmNvcHlGcm9tKGJ5dGVzLCBvZmZzZXQsIG9mZnNldCArIDQpXG4gICAgb2Zmc2V0ICs9IDRcbiAgICB0aGlzLmFzc2V0SUQgPSBiaW50b29scy5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyAzMilcbiAgICBvZmZzZXQgKz0gMzJcbiAgICBjb25zdCBvdXRwdXRpZDogbnVtYmVyID0gYmludG9vbHNcbiAgICAgIC5jb3B5RnJvbShieXRlcywgb2Zmc2V0LCBvZmZzZXQgKyA0KVxuICAgICAgLnJlYWRVSW50MzJCRSgwKVxuICAgIG9mZnNldCArPSA0XG4gICAgdGhpcy5vdXRwdXQgPSBTZWxlY3RPdXRwdXRDbGFzcyhvdXRwdXRpZClcbiAgICByZXR1cm4gdGhpcy5vdXRwdXQuZnJvbUJ1ZmZlcihieXRlcywgb2Zmc2V0KVxuICB9XG5cbiAgLyoqXG4gICAqIFRha2VzIGEgYmFzZS01OCBzdHJpbmcgY29udGFpbmluZyBhIFtbVVRYT11dLCBwYXJzZXMgaXQsIHBvcHVsYXRlcyB0aGUgY2xhc3MsIGFuZCByZXR1cm5zIHRoZSBsZW5ndGggb2YgdGhlIFN0YW5kYXJkVVRYTyBpbiBieXRlcy5cbiAgICpcbiAgICogQHBhcmFtIHNlcmlhbGl6ZWQgQSBiYXNlLTU4IHN0cmluZyBjb250YWluaW5nIGEgcmF3IFtbVVRYT11dXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBsZW5ndGggb2YgdGhlIHJhdyBbW1VUWE9dXVxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiB1bmxpa2UgbW9zdCBmcm9tU3RyaW5ncywgaXQgZXhwZWN0cyB0aGUgc3RyaW5nIHRvIGJlIHNlcmlhbGl6ZWQgaW4gY2I1OCBmb3JtYXRcbiAgICovXG4gIGZyb21TdHJpbmcoc2VyaWFsaXplZDogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLmZyb21CdWZmZXIoYmludG9vbHMuY2I1OERlY29kZShzZXJpYWxpemVkKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYmFzZS01OCByZXByZXNlbnRhdGlvbiBvZiB0aGUgW1tVVFhPXV0uXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIHVubGlrZSBtb3N0IHRvU3RyaW5ncywgdGhpcyByZXR1cm5zIGluIGNiNTggc2VyaWFsaXphdGlvbiBmb3JtYXRcbiAgICovXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gYmludG9vbHMuY2I1OEVuY29kZSh0aGlzLnRvQnVmZmVyKCkpXG4gIH1cblxuICBjbG9uZSgpOiB0aGlzIHtcbiAgICBjb25zdCB1dHhvOiBVVFhPID0gbmV3IFVUWE8oKVxuICAgIHV0eG8uZnJvbUJ1ZmZlcih0aGlzLnRvQnVmZmVyKCkpXG4gICAgcmV0dXJuIHV0eG8gYXMgdGhpc1xuICB9XG5cbiAgY3JlYXRlKFxuICAgIGNvZGVjSUQ6IG51bWJlciA9IEVWTUNvbnN0YW50cy5MQVRFU1RDT0RFQyxcbiAgICB0eElEOiBCdWZmZXIgPSB1bmRlZmluZWQsXG4gICAgb3V0cHV0aWR4OiBCdWZmZXIgfCBudW1iZXIgPSB1bmRlZmluZWQsXG4gICAgYXNzZXRJRDogQnVmZmVyID0gdW5kZWZpbmVkLFxuICAgIG91dHB1dDogT3V0cHV0ID0gdW5kZWZpbmVkXG4gICk6IHRoaXMge1xuICAgIHJldHVybiBuZXcgVVRYTyhjb2RlY0lELCB0eElELCBvdXRwdXRpZHgsIGFzc2V0SUQsIG91dHB1dCkgYXMgdGhpc1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBc3NldEFtb3VudERlc3RpbmF0aW9uIGV4dGVuZHMgU3RhbmRhcmRBc3NldEFtb3VudERlc3RpbmF0aW9uPFxuICBUcmFuc2ZlcmFibGVPdXRwdXQsXG4gIFRyYW5zZmVyYWJsZUlucHV0XG4+IHt9XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgc2V0IG9mIFtbVVRYT11dcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFVUWE9TZXQgZXh0ZW5kcyBTdGFuZGFyZFVUWE9TZXQ8VVRYTz4ge1xuICBwcm90ZWN0ZWQgX3R5cGVOYW1lID0gXCJVVFhPU2V0XCJcbiAgcHJvdGVjdGVkIF90eXBlSUQgPSB1bmRlZmluZWRcblxuICAvL3NlcmlhbGl6ZSBpcyBpbmhlcml0ZWRcblxuICBkZXNlcmlhbGl6ZShmaWVsZHM6IG9iamVjdCwgZW5jb2Rpbmc6IFNlcmlhbGl6ZWRFbmNvZGluZyA9IFwiaGV4XCIpOiB2b2lkIHtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShmaWVsZHMsIGVuY29kaW5nKVxuICAgIGNvbnN0IHV0eG9zOiB7fSA9IHt9XG4gICAgZm9yIChsZXQgdXR4b2lkIGluIGZpZWxkc1tcInV0eG9zXCJdKSB7XG4gICAgICBsZXQgdXR4b2lkQ2xlYW5lZDogc3RyaW5nID0gc2VyaWFsaXplci5kZWNvZGVyKFxuICAgICAgICB1dHhvaWQsXG4gICAgICAgIGVuY29kaW5nLFxuICAgICAgICBcImJhc2U1OFwiLFxuICAgICAgICBcImJhc2U1OFwiXG4gICAgICApXG4gICAgICB1dHhvc1tgJHt1dHhvaWRDbGVhbmVkfWBdID0gbmV3IFVUWE8oKVxuICAgICAgdXR4b3NbYCR7dXR4b2lkQ2xlYW5lZH1gXS5kZXNlcmlhbGl6ZShcbiAgICAgICAgZmllbGRzW1widXR4b3NcIl1bYCR7dXR4b2lkfWBdLFxuICAgICAgICBlbmNvZGluZ1xuICAgICAgKVxuICAgIH1cbiAgICBsZXQgYWRkcmVzc1VUWE9zOiB7fSA9IHt9XG4gICAgZm9yIChsZXQgYWRkcmVzcyBpbiBmaWVsZHNbXCJhZGRyZXNzVVRYT3NcIl0pIHtcbiAgICAgIGxldCBhZGRyZXNzQ2xlYW5lZDogc3RyaW5nID0gc2VyaWFsaXplci5kZWNvZGVyKFxuICAgICAgICBhZGRyZXNzLFxuICAgICAgICBlbmNvZGluZyxcbiAgICAgICAgXCJjYjU4XCIsXG4gICAgICAgIFwiaGV4XCJcbiAgICAgIClcbiAgICAgIGxldCB1dHhvYmFsYW5jZToge30gPSB7fVxuICAgICAgZm9yIChsZXQgdXR4b2lkIGluIGZpZWxkc1tcImFkZHJlc3NVVFhPc1wiXVtgJHthZGRyZXNzfWBdKSB7XG4gICAgICAgIGxldCB1dHhvaWRDbGVhbmVkOiBzdHJpbmcgPSBzZXJpYWxpemVyLmRlY29kZXIoXG4gICAgICAgICAgdXR4b2lkLFxuICAgICAgICAgIGVuY29kaW5nLFxuICAgICAgICAgIFwiYmFzZTU4XCIsXG4gICAgICAgICAgXCJiYXNlNThcIlxuICAgICAgICApXG4gICAgICAgIHV0eG9iYWxhbmNlW2Ake3V0eG9pZENsZWFuZWR9YF0gPSBzZXJpYWxpemVyLmRlY29kZXIoXG4gICAgICAgICAgZmllbGRzW1wiYWRkcmVzc1VUWE9zXCJdW2Ake2FkZHJlc3N9YF1bYCR7dXR4b2lkfWBdLFxuICAgICAgICAgIGVuY29kaW5nLFxuICAgICAgICAgIFwiZGVjaW1hbFN0cmluZ1wiLFxuICAgICAgICAgIFwiQk5cIlxuICAgICAgICApXG4gICAgICB9XG4gICAgICBhZGRyZXNzVVRYT3NbYCR7YWRkcmVzc0NsZWFuZWR9YF0gPSB1dHhvYmFsYW5jZVxuICAgIH1cbiAgICB0aGlzLnV0eG9zID0gdXR4b3NcbiAgICB0aGlzLmFkZHJlc3NVVFhPcyA9IGFkZHJlc3NVVFhPc1xuICB9XG5cbiAgcGFyc2VVVFhPKHV0eG86IFVUWE8gfCBzdHJpbmcpOiBVVFhPIHtcbiAgICBjb25zdCB1dHhvdmFyOiBVVFhPID0gbmV3IFVUWE8oKVxuICAgIC8vIGZvcmNlIGEgY29weVxuICAgIGlmICh0eXBlb2YgdXR4byA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgdXR4b3Zhci5mcm9tQnVmZmVyKGJpbnRvb2xzLmNiNThEZWNvZGUodXR4bykpXG4gICAgfSBlbHNlIGlmICh1dHhvIGluc3RhbmNlb2YgVVRYTykge1xuICAgICAgdXR4b3Zhci5mcm9tQnVmZmVyKHV0eG8udG9CdWZmZXIoKSkgLy8gZm9yY2VzIGEgY29weVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgdGhyb3cgbmV3IFVUWE9FcnJvcihcbiAgICAgICAgXCJFcnJvciAtIFVUWE8ucGFyc2VVVFhPOiB1dHhvIHBhcmFtZXRlciBpcyBub3QgYSBVVFhPIG9yIHN0cmluZ1wiXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiB1dHhvdmFyXG4gIH1cblxuICBjcmVhdGUoKTogdGhpcyB7XG4gICAgcmV0dXJuIG5ldyBVVFhPU2V0KCkgYXMgdGhpc1xuICB9XG5cbiAgY2xvbmUoKTogdGhpcyB7XG4gICAgY29uc3QgbmV3c2V0OiBVVFhPU2V0ID0gdGhpcy5jcmVhdGUoKVxuICAgIGNvbnN0IGFsbFVUWE9zOiBVVFhPW10gPSB0aGlzLmdldEFsbFVUWE9zKClcbiAgICBuZXdzZXQuYWRkQXJyYXkoYWxsVVRYT3MpXG4gICAgcmV0dXJuIG5ld3NldCBhcyB0aGlzXG4gIH1cblxuICBfZmVlQ2hlY2soZmVlOiBCTiwgZmVlQXNzZXRJRDogQnVmZmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGVvZiBmZWUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgIHR5cGVvZiBmZWVBc3NldElEICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICBmZWUuZ3QobmV3IEJOKDApKSAmJlxuICAgICAgZmVlQXNzZXRJRCBpbnN0YW5jZW9mIEJ1ZmZlclxuICAgIClcbiAgfVxuXG4gIGdldE1pbmltdW1TcGVuZGFibGUgPSAoXG4gICAgYWFkOiBBc3NldEFtb3VudERlc3RpbmF0aW9uLFxuICAgIGFzT2Y6IEJOID0gVW5peE5vdygpLFxuICAgIGxvY2t0aW1lOiBCTiA9IG5ldyBCTigwKSxcbiAgICB0aHJlc2hvbGQ6IG51bWJlciA9IDFcbiAgKTogRXJyb3IgPT4ge1xuICAgIGNvbnN0IHV0eG9BcnJheTogVVRYT1tdID0gdGhpcy5nZXRBbGxVVFhPcygpXG4gICAgY29uc3Qgb3V0aWRzOiBvYmplY3QgPSB7fVxuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCB1dHhvQXJyYXkubGVuZ3RoICYmICFhYWQuY2FuQ29tcGxldGUoKTsgaSsrKSB7XG4gICAgICBjb25zdCB1OiBVVFhPID0gdXR4b0FycmF5W2Ake2l9YF1cbiAgICAgIGNvbnN0IGFzc2V0S2V5OiBzdHJpbmcgPSB1LmdldEFzc2V0SUQoKS50b1N0cmluZyhcImhleFwiKVxuICAgICAgY29uc3QgZnJvbUFkZHJlc3NlczogQnVmZmVyW10gPSBhYWQuZ2V0U2VuZGVycygpXG4gICAgICBpZiAoXG4gICAgICAgIHUuZ2V0T3V0cHV0KCkgaW5zdGFuY2VvZiBBbW91bnRPdXRwdXQgJiZcbiAgICAgICAgYWFkLmFzc2V0RXhpc3RzKGFzc2V0S2V5KSAmJlxuICAgICAgICB1LmdldE91dHB1dCgpLm1lZXRzVGhyZXNob2xkKGZyb21BZGRyZXNzZXMsIGFzT2YpXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgYW06IEFzc2V0QW1vdW50ID0gYWFkLmdldEFzc2V0QW1vdW50KGFzc2V0S2V5KVxuICAgICAgICBpZiAoIWFtLmlzRmluaXNoZWQoKSkge1xuICAgICAgICAgIGNvbnN0IHVvdXQ6IEFtb3VudE91dHB1dCA9IHUuZ2V0T3V0cHV0KCkgYXMgQW1vdW50T3V0cHV0XG4gICAgICAgICAgb3V0aWRzW2Ake2Fzc2V0S2V5fWBdID0gdW91dC5nZXRPdXRwdXRJRCgpXG4gICAgICAgICAgY29uc3QgYW1vdW50ID0gdW91dC5nZXRBbW91bnQoKVxuICAgICAgICAgIGFtLnNwZW5kQW1vdW50KGFtb3VudClcbiAgICAgICAgICBjb25zdCB0eGlkOiBCdWZmZXIgPSB1LmdldFR4SUQoKVxuICAgICAgICAgIGNvbnN0IG91dHB1dGlkeDogQnVmZmVyID0gdS5nZXRPdXRwdXRJZHgoKVxuICAgICAgICAgIGNvbnN0IGlucHV0OiBTRUNQVHJhbnNmZXJJbnB1dCA9IG5ldyBTRUNQVHJhbnNmZXJJbnB1dChhbW91bnQpXG4gICAgICAgICAgY29uc3QgeGZlcmluOiBUcmFuc2ZlcmFibGVJbnB1dCA9IG5ldyBUcmFuc2ZlcmFibGVJbnB1dChcbiAgICAgICAgICAgIHR4aWQsXG4gICAgICAgICAgICBvdXRwdXRpZHgsXG4gICAgICAgICAgICB1LmdldEFzc2V0SUQoKSxcbiAgICAgICAgICAgIGlucHV0XG4gICAgICAgICAgKVxuICAgICAgICAgIGNvbnN0IHNwZW5kZXJzOiBCdWZmZXJbXSA9IHVvdXQuZ2V0U3BlbmRlcnMoZnJvbUFkZHJlc3NlcywgYXNPZilcbiAgICAgICAgICBzcGVuZGVycy5mb3JFYWNoKChzcGVuZGVyOiBCdWZmZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlkeDogbnVtYmVyID0gdW91dC5nZXRBZGRyZXNzSWR4KHNwZW5kZXIpXG4gICAgICAgICAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgQWRkcmVzc0Vycm9yKFxuICAgICAgICAgICAgICAgIFwiRXJyb3IgLSBVVFhPU2V0LmdldE1pbmltdW1TcGVuZGFibGU6IG5vIHN1Y2ggYWRkcmVzcyBpbiBvdXRwdXRcIlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4ZmVyaW4uZ2V0SW5wdXQoKS5hZGRTaWduYXR1cmVJZHgoaWR4LCBzcGVuZGVyKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgYWFkLmFkZElucHV0KHhmZXJpbilcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBhYWQuYXNzZXRFeGlzdHMoYXNzZXRLZXkpICYmXG4gICAgICAgICAgISh1LmdldE91dHB1dCgpIGluc3RhbmNlb2YgQW1vdW50T3V0cHV0KVxuICAgICAgICApIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBMZWF2aW5nIHRoZSBiZWxvdyBsaW5lcywgbm90IHNpbXBseSBmb3IgcG9zdGVyaXR5LCBidXQgZm9yIGNsYXJpZmljYXRpb24uXG4gICAgICAgICAgICogQXNzZXRJRHMgbWF5IGhhdmUgbWl4ZWQgT3V0cHV0VHlwZXMuXG4gICAgICAgICAgICogU29tZSBvZiB0aG9zZSBPdXRwdXRUeXBlcyBtYXkgaW1wbGVtZW50IEFtb3VudE91dHB1dC5cbiAgICAgICAgICAgKiBPdGhlcnMgbWF5IG5vdC5cbiAgICAgICAgICAgKiBTaW1wbHkgY29udGludWUgaW4gdGhpcyBjb25kaXRpb24uXG4gICAgICAgICAgICovXG4gICAgICAgICAgLypyZXR1cm4gbmV3IEVycm9yKCdFcnJvciAtIFVUWE9TZXQuZ2V0TWluaW11bVNwZW5kYWJsZTogb3V0cHV0SUQgZG9lcyBub3QgJ1xuICAgICAgICAgICAgICsgYGltcGxlbWVudCBBbW91bnRPdXRwdXQ6ICR7dS5nZXRPdXRwdXQoKS5nZXRPdXRwdXRJRH1gKTsqL1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFhYWQuY2FuQ29tcGxldGUoKSkge1xuICAgICAgcmV0dXJuIG5ldyBJbnN1ZmZpY2llbnRGdW5kc0Vycm9yKFxuICAgICAgICBgRXJyb3IgLSBVVFhPU2V0LmdldE1pbmltdW1TcGVuZGFibGU6IGluc3VmZmljaWVudCBmdW5kcyB0byBjcmVhdGUgdGhlIHRyYW5zYWN0aW9uYFxuICAgICAgKVxuICAgIH1cbiAgICBjb25zdCBhbW91bnRzOiBBc3NldEFtb3VudFtdID0gYWFkLmdldEFtb3VudHMoKVxuICAgIGNvbnN0IHplcm86IEJOID0gbmV3IEJOKDApXG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IGFtb3VudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGFzc2V0S2V5OiBzdHJpbmcgPSBhbW91bnRzW2Ake2l9YF0uZ2V0QXNzZXRJRFN0cmluZygpXG4gICAgICBjb25zdCBhbW91bnQ6IEJOID0gYW1vdW50c1tgJHtpfWBdLmdldEFtb3VudCgpXG4gICAgICBpZiAoYW1vdW50Lmd0KHplcm8pKSB7XG4gICAgICAgIGNvbnN0IHNwZW5kb3V0OiBBbW91bnRPdXRwdXQgPSBTZWxlY3RPdXRwdXRDbGFzcyhcbiAgICAgICAgICBvdXRpZHNbYCR7YXNzZXRLZXl9YF0sXG4gICAgICAgICAgYW1vdW50LFxuICAgICAgICAgIGFhZC5nZXREZXN0aW5hdGlvbnMoKSxcbiAgICAgICAgICBsb2NrdGltZSxcbiAgICAgICAgICB0aHJlc2hvbGRcbiAgICAgICAgKSBhcyBBbW91bnRPdXRwdXRcbiAgICAgICAgY29uc3QgeGZlcm91dDogVHJhbnNmZXJhYmxlT3V0cHV0ID0gbmV3IFRyYW5zZmVyYWJsZU91dHB1dChcbiAgICAgICAgICBhbW91bnRzW2Ake2l9YF0uZ2V0QXNzZXRJRCgpLFxuICAgICAgICAgIHNwZW5kb3V0XG4gICAgICAgIClcbiAgICAgICAgYWFkLmFkZE91dHB1dCh4ZmVyb3V0KVxuICAgICAgfVxuICAgICAgY29uc3QgY2hhbmdlOiBCTiA9IGFtb3VudHNbYCR7aX1gXS5nZXRDaGFuZ2UoKVxuICAgICAgaWYgKGNoYW5nZS5ndCh6ZXJvKSkge1xuICAgICAgICBjb25zdCBjaGFuZ2VvdXQ6IEFtb3VudE91dHB1dCA9IFNlbGVjdE91dHB1dENsYXNzKFxuICAgICAgICAgIG91dGlkc1tgJHthc3NldEtleX1gXSxcbiAgICAgICAgICBjaGFuZ2UsXG4gICAgICAgICAgYWFkLmdldENoYW5nZUFkZHJlc3NlcygpXG4gICAgICAgICkgYXMgQW1vdW50T3V0cHV0XG4gICAgICAgIGNvbnN0IGNoZ3hmZXJvdXQ6IFRyYW5zZmVyYWJsZU91dHB1dCA9IG5ldyBUcmFuc2ZlcmFibGVPdXRwdXQoXG4gICAgICAgICAgYW1vdW50c1tgJHtpfWBdLmdldEFzc2V0SUQoKSxcbiAgICAgICAgICBjaGFuZ2VvdXRcbiAgICAgICAgKVxuICAgICAgICBhYWQuYWRkQ2hhbmdlKGNoZ3hmZXJvdXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIHVuc2lnbmVkIEltcG9ydFR4IHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gbmV0d29ya0lEIFRoZSBudW1iZXIgcmVwcmVzZW50aW5nIE5ldHdvcmtJRCBvZiB0aGUgbm9kZVxuICAgKiBAcGFyYW0gYmxvY2tjaGFpbklEIFRoZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSByZXByZXNlbnRpbmcgdGhlIEJsb2NrY2hhaW5JRCBmb3IgdGhlIHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB0b0FkZHJlc3MgVGhlIGFkZHJlc3MgdG8gc2VuZCB0aGUgZnVuZHNcbiAgICogQHBhcmFtIGltcG9ydElucyBBbiBhcnJheSBvZiBbW1RyYW5zZmVyYWJsZUlucHV0XV1zIGJlaW5nIGltcG9ydGVkXG4gICAqIEBwYXJhbSBzb3VyY2VDaGFpbiBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGZvciB0aGUgY2hhaW5pZCB3aGVyZSB0aGUgaW1wb3J0cyBhcmUgY29taW5nIGZyb20uXG4gICAqIEBwYXJhbSBmZWUgT3B0aW9uYWwuIFRoZSBhbW91bnQgb2YgZmVlcyB0byBidXJuIGluIGl0cyBzbWFsbGVzdCBkZW5vbWluYXRpb24sIHJlcHJlc2VudGVkIGFzIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy98Qk59LiBGZWUgd2lsbCBjb21lIGZyb20gdGhlIGlucHV0cyBmaXJzdCwgaWYgdGhleSBjYW4uXG4gICAqIEBwYXJhbSBmZWVBc3NldElEIE9wdGlvbmFsLiBUaGUgYXNzZXRJRCBvZiB0aGUgZmVlcyBiZWluZyBidXJuZWQuXG4gICAqIEByZXR1cm5zIEFuIHVuc2lnbmVkIHRyYW5zYWN0aW9uIGNyZWF0ZWQgZnJvbSB0aGUgcGFzc2VkIGluIHBhcmFtZXRlcnMuXG4gICAqXG4gICAqL1xuICBidWlsZEltcG9ydFR4ID0gKFxuICAgIG5ldHdvcmtJRDogbnVtYmVyLFxuICAgIGJsb2NrY2hhaW5JRDogQnVmZmVyLFxuICAgIHRvQWRkcmVzczogc3RyaW5nLFxuICAgIGF0b21pY3M6IFVUWE9bXSxcbiAgICBzb3VyY2VDaGFpbjogQnVmZmVyID0gdW5kZWZpbmVkLFxuICAgIGZlZTogQk4gPSB1bmRlZmluZWQsXG4gICAgZmVlQXNzZXRJRDogQnVmZmVyID0gdW5kZWZpbmVkXG4gICk6IFVuc2lnbmVkVHggPT4ge1xuICAgIGNvbnN0IHplcm86IEJOID0gbmV3IEJOKDApXG4gICAgY29uc3QgbWFwOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpXG5cbiAgICBsZXQgaW5zOiBUcmFuc2ZlcmFibGVJbnB1dFtdID0gW11cbiAgICBsZXQgb3V0czogRVZNT3V0cHV0W10gPSBbXVxuICAgIGxldCBmZWVwYWlkOiBCTiA9IG5ldyBCTigwKVxuXG4gICAgaWYgKHR5cGVvZiBmZWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGZlZSA9IHplcm8uY2xvbmUoKVxuICAgIH1cblxuICAgIC8vIGJ1aWxkIGEgc2V0IG9mIGlucHV0cyB3aGljaCBjb3ZlcnMgdGhlIGZlZVxuICAgIGF0b21pY3MuZm9yRWFjaCgoYXRvbWljOiBVVFhPKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBhc3NldElEQnVmOiBCdWZmZXIgPSBhdG9taWMuZ2V0QXNzZXRJRCgpXG4gICAgICBjb25zdCBhc3NldElEOiBzdHJpbmcgPSBiaW50b29scy5jYjU4RW5jb2RlKGF0b21pYy5nZXRBc3NldElEKCkpXG4gICAgICBjb25zdCBvdXRwdXQ6IEFtb3VudE91dHB1dCA9IGF0b21pYy5nZXRPdXRwdXQoKSBhcyBBbW91bnRPdXRwdXRcbiAgICAgIGNvbnN0IGFtb3VudDogQk4gPSBvdXRwdXQuZ2V0QW1vdW50KCkuY2xvbmUoKVxuICAgICAgbGV0IGluZmVlYW1vdW50OiBCTiA9IGFtb3VudC5jbG9uZSgpXG5cbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGZlZUFzc2V0SUQgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgZmVlLmd0KHplcm8pICYmXG4gICAgICAgIGZlZXBhaWQubHQoZmVlKSAmJlxuICAgICAgICBCdWZmZXIuY29tcGFyZShmZWVBc3NldElELCBhc3NldElEQnVmKSA9PT0gMFxuICAgICAgKSB7XG4gICAgICAgIGZlZXBhaWQgPSBmZWVwYWlkLmFkZChpbmZlZWFtb3VudClcbiAgICAgICAgaWYgKGZlZXBhaWQuZ3QoZmVlKSkge1xuICAgICAgICAgIGluZmVlYW1vdW50ID0gZmVlcGFpZC5zdWIoZmVlKVxuICAgICAgICAgIGZlZXBhaWQgPSBmZWUuY2xvbmUoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluZmVlYW1vdW50ID0gemVyby5jbG9uZSgpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdHhpZDogQnVmZmVyID0gYXRvbWljLmdldFR4SUQoKVxuICAgICAgY29uc3Qgb3V0cHV0aWR4OiBCdWZmZXIgPSBhdG9taWMuZ2V0T3V0cHV0SWR4KClcbiAgICAgIGNvbnN0IGlucHV0OiBTRUNQVHJhbnNmZXJJbnB1dCA9IG5ldyBTRUNQVHJhbnNmZXJJbnB1dChhbW91bnQpXG4gICAgICBjb25zdCB4ZmVyaW46IFRyYW5zZmVyYWJsZUlucHV0ID0gbmV3IFRyYW5zZmVyYWJsZUlucHV0KFxuICAgICAgICB0eGlkLFxuICAgICAgICBvdXRwdXRpZHgsXG4gICAgICAgIGFzc2V0SURCdWYsXG4gICAgICAgIGlucHV0XG4gICAgICApXG4gICAgICBjb25zdCBmcm9tOiBCdWZmZXJbXSA9IG91dHB1dC5nZXRBZGRyZXNzZXMoKVxuICAgICAgY29uc3Qgc3BlbmRlcnM6IEJ1ZmZlcltdID0gb3V0cHV0LmdldFNwZW5kZXJzKGZyb20pXG4gICAgICBzcGVuZGVycy5mb3JFYWNoKChzcGVuZGVyOiBCdWZmZXIpOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3QgaWR4OiBudW1iZXIgPSBvdXRwdXQuZ2V0QWRkcmVzc0lkeChzcGVuZGVyKVxuICAgICAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgdGhyb3cgbmV3IEFkZHJlc3NFcnJvcihcbiAgICAgICAgICAgIFwiRXJyb3IgLSBVVFhPU2V0LmJ1aWxkSW1wb3J0VHg6IG5vIHN1Y2ggYWRkcmVzcyBpbiBvdXRwdXRcIlxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICB4ZmVyaW4uZ2V0SW5wdXQoKS5hZGRTaWduYXR1cmVJZHgoaWR4LCBzcGVuZGVyKVxuICAgICAgfSlcbiAgICAgIGlucy5wdXNoKHhmZXJpbilcblxuICAgICAgaWYgKG1hcC5oYXMoYXNzZXRJRCkpIHtcbiAgICAgICAgaW5mZWVhbW91bnQgPSBpbmZlZWFtb3VudC5hZGQobmV3IEJOKG1hcC5nZXQoYXNzZXRJRCkpKVxuICAgICAgfVxuICAgICAgbWFwLnNldChhc3NldElELCBpbmZlZWFtb3VudC50b1N0cmluZygpKVxuICAgIH0pXG5cbiAgICBmb3IgKGxldCBbYXNzZXRJRCwgYW1vdW50XSBvZiBtYXApIHtcbiAgICAgIC8vIENyZWF0ZSBzaW5nbGUgRVZNT3V0cHV0IGZvciBlYWNoIGFzc2V0SURcbiAgICAgIGNvbnN0IGV2bU91dHB1dDogRVZNT3V0cHV0ID0gbmV3IEVWTU91dHB1dChcbiAgICAgICAgdG9BZGRyZXNzLFxuICAgICAgICBuZXcgQk4oYW1vdW50KSxcbiAgICAgICAgYmludG9vbHMuY2I1OERlY29kZShhc3NldElEKVxuICAgICAgKVxuICAgICAgb3V0cy5wdXNoKGV2bU91dHB1dClcbiAgICB9XG5cbiAgICAvLyBsZXhpY29ncmFwaGljYWxseSBzb3J0IGFycmF5XG4gICAgaW5zID0gaW5zLnNvcnQoVHJhbnNmZXJhYmxlSW5wdXQuY29tcGFyYXRvcigpKVxuICAgIG91dHMgPSBvdXRzLnNvcnQoRVZNT3V0cHV0LmNvbXBhcmF0b3IoKSlcblxuICAgIGNvbnN0IGltcG9ydFR4OiBJbXBvcnRUeCA9IG5ldyBJbXBvcnRUeChcbiAgICAgIG5ldHdvcmtJRCxcbiAgICAgIGJsb2NrY2hhaW5JRCxcbiAgICAgIHNvdXJjZUNoYWluLFxuICAgICAgaW5zLFxuICAgICAgb3V0cyxcbiAgICAgIGZlZVxuICAgIClcbiAgICByZXR1cm4gbmV3IFVuc2lnbmVkVHgoaW1wb3J0VHgpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiB1bnNpZ25lZCBFeHBvcnRUeCB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIG5ldHdvcmtJRCBUaGUgbnVtYmVyIHJlcHJlc2VudGluZyBOZXR3b3JrSUQgb2YgdGhlIG5vZGVcbiAgICogQHBhcmFtIGJsb2NrY2hhaW5JRCBUaGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gcmVwcmVzZW50aW5nIHRoZSBCbG9ja2NoYWluSUQgZm9yIHRoZSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgYmVpbmcgZXhwb3J0ZWQgYXMgYSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvfEJOfVxuICAgKiBAcGFyYW0gYXZheEFzc2V0SUQge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyfEJ1ZmZlcn0gb2YgdGhlIEFzc2V0SUQgZm9yIEFWQVhcbiAgICogQHBhcmFtIHRvQWRkcmVzc2VzIEFuIGFycmF5IG9mIGFkZHJlc3NlcyBhcyB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXJ8QnVmZmVyfSB3aG8gcmVjaWV2ZXMgdGhlIEFWQVhcbiAgICogQHBhcmFtIGZyb21BZGRyZXNzZXMgQW4gYXJyYXkgb2YgYWRkcmVzc2VzIGFzIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IHdobyBvd25zIHRoZSBBVkFYXG4gICAqIEBwYXJhbSBjaGFuZ2VBZGRyZXNzZXMgT3B0aW9uYWwuIFRoZSBhZGRyZXNzZXMgdGhhdCBjYW4gc3BlbmQgdGhlIGNoYW5nZSByZW1haW5pbmcgZnJvbSB0aGUgc3BlbnQgVVRYT3MuXG4gICAqIEBwYXJhbSBkZXN0aW5hdGlvbkNoYWluIE9wdGlvbmFsLiBBIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlcnxCdWZmZXJ9IGZvciB0aGUgY2hhaW5pZCB3aGVyZSB0byBzZW5kIHRoZSBhc3NldC5cbiAgICogQHBhcmFtIGZlZSBPcHRpb25hbC4gVGhlIGFtb3VudCBvZiBmZWVzIHRvIGJ1cm4gaW4gaXRzIHNtYWxsZXN0IGRlbm9taW5hdGlvbiwgcmVwcmVzZW50ZWQgYXMge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn1cbiAgICogQHBhcmFtIGZlZUFzc2V0SUQgT3B0aW9uYWwuIFRoZSBhc3NldElEIG9mIHRoZSBmZWVzIGJlaW5nIGJ1cm5lZC5cbiAgICogQHBhcmFtIGFzT2YgT3B0aW9uYWwuIFRoZSB0aW1lc3RhbXAgdG8gdmVyaWZ5IHRoZSB0cmFuc2FjdGlvbiBhZ2FpbnN0IGFzIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn1cbiAgICogQHBhcmFtIGxvY2t0aW1lIE9wdGlvbmFsLiBUaGUgbG9ja3RpbWUgZmllbGQgY3JlYXRlZCBpbiB0aGUgcmVzdWx0aW5nIG91dHB1dHNcbiAgICogQHBhcmFtIHRocmVzaG9sZCBPcHRpb25hbC4gVGhlIG51bWJlciBvZiBzaWduYXR1cmVzIHJlcXVpcmVkIHRvIHNwZW5kIHRoZSBmdW5kcyBpbiB0aGUgcmVzdWx0YW50IFVUWE9cbiAgICogQHJldHVybnMgQW4gdW5zaWduZWQgdHJhbnNhY3Rpb24gY3JlYXRlZCBmcm9tIHRoZSBwYXNzZWQgaW4gcGFyYW1ldGVycy5cbiAgICpcbiAgICovXG4gIGJ1aWxkRXhwb3J0VHggPSAoXG4gICAgbmV0d29ya0lEOiBudW1iZXIsXG4gICAgYmxvY2tjaGFpbklEOiBCdWZmZXIsXG4gICAgYW1vdW50OiBCTixcbiAgICBhdmF4QXNzZXRJRDogQnVmZmVyLFxuICAgIHRvQWRkcmVzc2VzOiBCdWZmZXJbXSxcbiAgICBmcm9tQWRkcmVzc2VzOiBCdWZmZXJbXSxcbiAgICBjaGFuZ2VBZGRyZXNzZXM6IEJ1ZmZlcltdID0gdW5kZWZpbmVkLFxuICAgIGRlc3RpbmF0aW9uQ2hhaW46IEJ1ZmZlciA9IHVuZGVmaW5lZCxcbiAgICBmZWU6IEJOID0gdW5kZWZpbmVkLFxuICAgIGZlZUFzc2V0SUQ6IEJ1ZmZlciA9IHVuZGVmaW5lZCxcbiAgICBhc09mOiBCTiA9IFVuaXhOb3coKSxcbiAgICBsb2NrdGltZTogQk4gPSBuZXcgQk4oMCksXG4gICAgdGhyZXNob2xkOiBudW1iZXIgPSAxXG4gICk6IFVuc2lnbmVkVHggPT4ge1xuICAgIGxldCBpbnM6IEVWTUlucHV0W10gPSBbXVxuICAgIGxldCBleHBvcnRvdXRzOiBUcmFuc2ZlcmFibGVPdXRwdXRbXSA9IFtdXG5cbiAgICBpZiAodHlwZW9mIGNoYW5nZUFkZHJlc3NlcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY2hhbmdlQWRkcmVzc2VzID0gdG9BZGRyZXNzZXNcbiAgICB9XG5cbiAgICBjb25zdCB6ZXJvOiBCTiA9IG5ldyBCTigwKVxuXG4gICAgaWYgKGFtb3VudC5lcSh6ZXJvKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZmVlQXNzZXRJRCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZmVlQXNzZXRJRCA9IGF2YXhBc3NldElEXG4gICAgfSBlbHNlIGlmIChmZWVBc3NldElELnRvU3RyaW5nKFwiaGV4XCIpICE9PSBhdmF4QXNzZXRJRC50b1N0cmluZyhcImhleFwiKSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHRocm93IG5ldyBGZWVBc3NldEVycm9yKFxuICAgICAgICBcIkVycm9yIC0gVVRYT1NldC5idWlsZEV4cG9ydFR4OiBmZWVBc3NldElEIG11c3QgbWF0Y2ggYXZheEFzc2V0SURcIlxuICAgICAgKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25DaGFpbiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZGVzdGluYXRpb25DaGFpbiA9IGJpbnRvb2xzLmNiNThEZWNvZGUoUGxhdGZvcm1DaGFpbklEKVxuICAgIH1cblxuICAgIGNvbnN0IGFhZDogQXNzZXRBbW91bnREZXN0aW5hdGlvbiA9IG5ldyBBc3NldEFtb3VudERlc3RpbmF0aW9uKFxuICAgICAgdG9BZGRyZXNzZXMsXG4gICAgICBmcm9tQWRkcmVzc2VzLFxuICAgICAgY2hhbmdlQWRkcmVzc2VzXG4gICAgKVxuICAgIGlmIChhdmF4QXNzZXRJRC50b1N0cmluZyhcImhleFwiKSA9PT0gZmVlQXNzZXRJRC50b1N0cmluZyhcImhleFwiKSkge1xuICAgICAgYWFkLmFkZEFzc2V0QW1vdW50KGF2YXhBc3NldElELCBhbW91bnQsIGZlZSlcbiAgICB9IGVsc2Uge1xuICAgICAgYWFkLmFkZEFzc2V0QW1vdW50KGF2YXhBc3NldElELCBhbW91bnQsIHplcm8pXG4gICAgICBpZiAodGhpcy5fZmVlQ2hlY2soZmVlLCBmZWVBc3NldElEKSkge1xuICAgICAgICBhYWQuYWRkQXNzZXRBbW91bnQoZmVlQXNzZXRJRCwgemVybywgZmVlKVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBzdWNjZXNzOiBFcnJvciA9IHRoaXMuZ2V0TWluaW11bVNwZW5kYWJsZShcbiAgICAgIGFhZCxcbiAgICAgIGFzT2YsXG4gICAgICBsb2NrdGltZSxcbiAgICAgIHRocmVzaG9sZFxuICAgIClcbiAgICBpZiAodHlwZW9mIHN1Y2Nlc3MgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGV4cG9ydG91dHMgPSBhYWQuZ2V0T3V0cHV0cygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IHN1Y2Nlc3NcbiAgICB9XG5cbiAgICBjb25zdCBleHBvcnRUeDogRXhwb3J0VHggPSBuZXcgRXhwb3J0VHgoXG4gICAgICBuZXR3b3JrSUQsXG4gICAgICBibG9ja2NoYWluSUQsXG4gICAgICBkZXN0aW5hdGlvbkNoYWluLFxuICAgICAgaW5zLFxuICAgICAgZXhwb3J0b3V0c1xuICAgIClcbiAgICByZXR1cm4gbmV3IFVuc2lnbmVkVHgoZXhwb3J0VHgpXG4gIH1cbn1cbiJdfQ=="],"sourceRoot":""}